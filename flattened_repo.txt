<svelte.config.js>
import adapter from "@sveltejs/adapter-node";
import { vitePreprocess } from "@sveltejs/vite-plugin-svelte";
import dotenv from "dotenv";

dotenv.config({ path: "./.env.local" });
dotenv.config({ path: "./.env" });

process.env.PUBLIC_VERSION ??= process.env.npm_package_version;

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://kit.svelte.dev/docs/integrations#preprocessors
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		adapter: adapter(),

		paths: {
			base: process.env.APP_BASE || "",
		},
		csrf: {
			// handled in hooks.server.ts, because we can have multiple valid origins
			checkOrigin: false,
		},
	},
};

export default config;

</svelte.config.js>

<chart/Chart.yaml>
apiVersion: v2
name: chat-ui
version: 0.0.0-latest
type: application
icon: https://huggingface.co/front/assets/huggingface_logo-noborder.svg

</chart/Chart.yaml>

<chart/env/prod.yaml>
image:
  repository: huggingface
  name: chat-ui

nodeSelector:
  role-hub-utils: "true"

tolerations:
  - key: CriticalAddonsOnly
    operator: Equal

serviceAccount:
  enabled: true
  create: true
  name: huggingchat-prod

ingress:
  path: "/chat"
  annotations:
    alb.ingress.kubernetes.io/healthcheck-path: "/healthcheck"
    alb.ingress.kubernetes.io/listen-ports: "[{\"HTTP\": 80}, {\"HTTPS\": 443}]"
    alb.ingress.kubernetes.io/group.name: "hub-prod"
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/tags: "Env=prod,Project=hub,Terraform=true"
    alb.ingress.kubernetes.io/target-node-labels: "role-hub-utils=true"
    kubernetes.io/ingress.class: "alb"

envVars:
  ADDRESS_HEADER: 'X-Forwarded-For'
  ALTERNATIVE_REDIRECT_URLS: '["huggingchat://login/callback"]'
  APP_BASE: "/chat"
  COMMUNITY_TOOLS: "true"
  ENABLE_ASSISTANTS: "true"
  ENABLE_ASSISTANTS_RAG: "true"
  EXPOSE_API: "true"
  METRICS_PORT: 5565
  LOG_LEVEL: "debug"
  METRICS_ENABLED: "true"
  MODELS: >
    [
      { 
        "name" : "meta-llama/Meta-Llama-3.1-70B-Instruct",
        "id": "meta-llama/Meta-Llama-3.1-70B-Instruct",
        "tokenizer": {"tokenizerUrl": "https://huggingface.co/nsarrazin/llama3.1-tokenizer/resolve/main/tokenizer.json", "tokenizerConfigUrl": "https://huggingface.co/nsarrazin/llama3.1-tokenizer/raw/main/tokenizer_config.json"},
        "description": "Ideal for everyday use. A fast and extremely capable model matching closed source models' capabilities.",
        "modelUrl": "https://huggingface.co/meta-llama/Meta-Llama-3.1-70B-Instruct",
        "websiteUrl": "https://llama.meta.com/",
        "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/meta-logo.png",
        "tools": true,
        "preprompt" : "",
        "parameters": {
            "temperature": 0.6,
            "top_p": 0.9,
            "stop": ["<|endoftext|>", "<|eot_id|>"],
          "max_new_tokens": 1024,
          "truncate": 7167
        },
        "promptExamples": [
          {
            "title": "Write an email from bullet list",
            "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
          }, {
            "title": "Code a snake game",
            "prompt": "Code a basic snake game in python, give explanations for each step."
          }, {
            "title": "Assist in a task",
            "prompt": "How do I make a delicious lemon cheesecake?"
          }
        ]
      }, 
      {
        "name" : "CohereForAI/c4ai-command-r-plus-08-2024",
        "tokenizer": {"tokenizerUrl": "https://huggingface.co/nsarrazin/c4ai-command-r-v01-tokenizer/resolve/main/tokenizer.json", "tokenizerConfigUrl": "https://huggingface.co/nsarrazin/c4ai-command-r-v01-tokenizer/raw/main/tokenizer_config.json"},
        "description": "Cohere's largest language model, optimized for conversational interaction and tool use. Now with the 2024 update!",
        "modelUrl": "https://huggingface.co/CohereForAI/c4ai-command-r-plus-08-2024",
        "websiteUrl": "https://docs.cohere.com/docs/command-r-plus",
        "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/cohere-logo.png",
        "tools": true,
        "parameters": {
          "stop": ["<|END_OF_TURN_TOKEN|>"],
          "truncate" : 28672,
          "max_new_tokens" : 2048,
          "temperature" : 0.3
        },
        "promptExamples" : [
          {
            "title": "Generate a mouse portrait",
            "prompt": "Generate the portrait of a scientific mouse in its laboratory."
          }, {
            "title": "Review a pull request",
            "prompt": "Review this pull request: https://github.com/huggingface/chat-ui/pull/1131/files"
          }, {
            "title": "Code a snake game",
            "prompt": "Code a basic snake game in python, give explanations for each step."
          }
        ]
      },
      {
        "name" : "mistralai/Mixtral-8x7B-Instruct-v0.1",
        "description" : "A high-quality sparse mixture of experts model with open weights.",
        "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/mistral-logo.png",
        "websiteUrl" : "https://mistral.ai/news/mixtral-of-experts/",
        "modelUrl": "https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1",
        "tokenizer": "mistralai/Mixtral-8x7B-Instruct-v0.1",
        "preprompt" : "",
        "parameters" : {
          "temperature" : 0.6,
          "top_p" : 0.95,
          "repetition_penalty" : 1.2,
          "top_k" : 50,
          "truncate" : 24576,
          "max_new_tokens" : 8192,
          "stop" : ["</s>"]
        },
        "promptExamples" : [
          {
            "title": "Write an email from bullet list",
            "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
          }, {
            "title": "Code a snake game",
            "prompt": "Code a basic snake game in python, give explanations for each step."
          }, {
            "title": "Assist in a task",
            "prompt": "How do I make a delicious lemon cheesecake?"
          }
        ]
      },
      {
          "name" : "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
          "description" : "Nous Hermes' strong flagship model trained on the Mixtral 8x7B.",
          "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/nous-logo.png",
          "websiteUrl" : "https://nousresearch.com/",
          "modelUrl": "https://huggingface.co/NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
          "tokenizer": "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
          "promptExamples": [
            {
              "title": "Write an email from bullet list",
              "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
            }, {
              "title": "Code a snake game",
              "prompt": "Code a basic snake game in python, give explanations for each step."
            }, {
              "title": "Assist in a task",
              "prompt": "How do I make a delicious lemon cheesecake?"
            }
          ],
          "parameters": {
            "temperature": 0.7,
            "top_p": 0.95,
            "repetition_penalty": 1,
            "top_k": 50,
            "truncate": 24576,
            "max_new_tokens": 2048,
            "stop": ["<|im_end|>"]
          }
        },
        {
          "name": "mistralai/Mistral-7B-Instruct-v0.3",
          "displayName": "mistralai/Mistral-7B-Instruct-v0.3",
          "description": "A small model with good capabilities in language understanding and commonsense reasoning.",
          "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/mistral-logo.png",
          "websiteUrl": "https://mistral.ai/news/announcing-mistral-7b/",
          "modelUrl": "https://huggingface.co/mistralai/Mistral-7B-Instruct-v0.3",
          "tokenizer": "mistralai/Mistral-7B-Instruct-v0.3",
          "preprompt": "",
          "parameters": {
            "temperature": 0.3,
            "top_p": 0.95,
            "repetition_penalty": 1.2,
            "top_k": 50,
            "truncate": 3072,
            "max_new_tokens": 1024,
            "stop": ["</s>"]
          },
          "promptExamples": [
            {
              "title": "Write an email from bullet list",
              "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
            }, {
              "title": "Code a snake game",
              "prompt": "Code a basic snake game in python, give explanations for each step."
            }, {
              "title": "Assist in a task",
              "prompt": "How do I make a delicious lemon cheesecake?"
            }
          ]
        },
        {
          "name": "microsoft/Phi-3-mini-4k-instruct",
          "tokenizer": "microsoft/Phi-3-mini-4k-instruct",
          "description" : "One of the best small models (3.8B parameters), super fast for simple tasks.",
          "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/microsoft-logo.png",
          "modelUrl": "https://huggingface.co/microsoft/Phi-3-mini-4k-instruct",
          "websiteUrl": "https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/",
          "preprompt": "",
          "parameters": {
            "stop": ["<|end|>", "<|endoftext|>", "<|assistant|>"],
            "temperature": 0.7,
            "max_new_tokens": 1024,
            "truncate": 3071
          },
          "promptExamples": [
            {
              "title": "Write an email from bullet list",
              "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
            }, {
              "title": "Code a snake game",
              "prompt": "Code a basic snake game in python, give explanations for each step."
            }, {
              "title": "Assist in a task",
              "prompt": "How do I make a delicious lemon cheesecake?"
            }
          ]
        },
        {
          "name" : "llhf/Meta-Llama-3.1-8B-Instruct",
        "tokenizer": {"tokenizerUrl": "https://huggingface.co/nsarrazin/llama3.1-tokenizer/resolve/main/tokenizer.json", "tokenizerConfigUrl": "https://huggingface.co/nsarrazin/llama3.1-tokenizer/raw/main/tokenizer_config.json"},
          "parameters": {
            "temperature": 0.6,
            "top_p": 0.9,
            "stop": ["<|endoftext|>", "<|eot_id|>"],
          },
          "unlisted": true
        }
    ]
  NODE_ENV: "prod"
  NODE_LOG_STRUCTURED_DATA: true
  OLD_MODELS: >
    [
      { "name": "bigcode/starcoder" },
      { "name": "OpenAssistant/oasst-sft-6-llama-30b-xor" },
      { "name": "HuggingFaceH4/zephyr-7b-alpha" },
      { "name": "openchat/openchat_3.5" },
      { "name": "openchat/openchat-3.5-1210" },
      { "name": "tiiuae/falcon-180B-chat" },
      { "name": "codellama/CodeLlama-34b-Instruct-hf" },
      { "name": "google/gemma-7b-it" },
      { "name": "meta-llama/Llama-2-70b-chat-hf" },
      { "name": "codellama/CodeLlama-70b-Instruct-hf" },
      { "name": "openchat/openchat-3.5-0106" },
      { "name": "meta-llama/Meta-Llama-3-70B-Instruct"},
      { "name": "meta-llama/Meta-Llama-3.1-405B-Instruct-FP8"},
      { "name": "CohereForAI/c4ai-command-r-plus", "transferTo": "CohereForAI/c4ai-command-r-plus-08-2024"},
      { "name": "01-ai/Yi-1.5-34B-Chat", "transferTo": "CohereForAI/c4ai-command-r-plus-08-2024"}
    ]
  PUBLIC_ORIGIN: "https://huggingface.co"
  PUBLIC_SHARE_PREFIX: "https://hf.co/chat"
  PUBLIC_ANNOUNCEMENT_BANNERS: "[]"
  PUBLIC_APP_NAME: "HuggingChat"
  PUBLIC_APP_ASSETS: "huggingchat"
  PUBLIC_APP_COLOR: "yellow"
  PUBLIC_APP_DESCRIPTION: "Making the community's best AI chat models available to everyone."
  PUBLIC_APP_DISCLAIMER_MESSAGE: "Disclaimer: AI is an area of active research with known problems such as biased generation and misinformation. Do not use this application for high-stakes decisions or advice."
  PUBLIC_APP_DATA_SHARING: 0
  PUBLIC_APP_DISCLAIMER: 1
  PUBLIC_PLAUSIBLE_SCRIPT_URL: "/js/script.js"
  REQUIRE_FEATURED_ASSISTANTS: "true"
  TASK_MODEL: "llhf/Meta-Llama-3.1-8B-Instruct"
  TEXT_EMBEDDING_MODELS: >
    [{
      "name": "bge-base-en-v1-5-sxa",
      "displayName": "bge-base-en-v1-5-sxa",
      "chunkCharLength": 512,
      "endpoints": [{
        "type": "tei",
        "url": "https://huggingchat-tei.hf.space/"
      }]
    }]
  WEBSEARCH_BLOCKLIST: '["youtube.com", "twitter.com"]'
  XFF_DEPTH: '2'
  TOOLS: >
    [
      {
        "_id": "000000000000000000000001",
        "displayName": "Image Generation",
        "description": "Use this tool to generate images based on a prompt.",
        "color": "yellow",
        "icon": "camera",
        "baseUrl": "black-forest-labs/FLUX.1-schnell",
        "name": "image_generation",
        "endpoint": "/infer",
        "inputs": [
          {
            "name": "prompt",
            "description": "A prompt to generate an image from",
            "paramType": "required",
            "type": "str"
          },
          { "name": "seed", "paramType": "fixed", "value": "0", "type": "float" },
          {
            "name": "randomize_seed",
            "paramType": "fixed",
            "value": "true",
            "type": "bool"
          },
          {
            "name": "width",
            "description": "numeric value between 256 and 2048",
            "paramType": "optional",
            "default": 1024,
            "type": "float"
          },
          {
            "name": "height",
            "description": "numeric value between 256 and 2048",
            "paramType": "optional",
            "default": 1024,
            "type": "float"
          },
          {
            "name": "num_inference_steps",
            "paramType": "fixed",
            "value": "4",
            "type": "float"
          }
        ],
        "outputComponent": "image",
        "outputComponentIdx": 0,
        "showOutput": true
      },
      {
        "_id": "000000000000000000000002",
        "displayName": "Document Parser",
        "description": "Use this tool to parse any document and get its content in markdown format.",
        "color": "yellow",
        "icon": "cloud",
        "baseUrl": "huggingchat/document-parser",
        "name": "document_parser",
        "endpoint": "/predict",
        "inputs": [
          {
            "name": "document",
            "description": "Filename of the document to parse",
            "paramType": "required",
            "type": "file",
            "mimeTypes": 'application/*'
          },
          {
            "name": "filename",
            "paramType": "fixed",
            "value": "document.pdf",
            "type": "str"
          }
        ],
        "outputComponent": "textbox",
        "outputComponentIdx": 0,
        "showOutput": false
      },
      {
        "_id": "000000000000000000000003",
        "name": "edit_image",
        "baseUrl": "multimodalart/cosxl",
        "endpoint": "/run_edit",
        "inputs": [
          {
            "name": "image",
            "description": "The image path to be edited",
            "paramType": "required",
            "type": "file",
            "mimeTypes": 'image/*'
          },
          {
            "name": "prompt",
            "description": "The prompt with which to edit the image",
            "paramType": "required",
            "type": "str"
          },
          {
            "name": "negative_prompt",
            "paramType": "fixed",
            "value": "",
            "type": "str"
          },
          {
            "name": "guidance_scale",
            "paramType": "fixed",
            "value": 6.5,
            "type": "float"
          },
          {
            "name": "steps",
            "paramType": "fixed",
            "value": 30,
            "type": "float"
          }
        ],
        "outputComponent": "image",
        "showOutput": true,
        "displayName": "Image Editor",
        "color": "green",
        "icon": "camera",
        "description": "This tool lets you edit images",
        "outputComponentIdx": 0
      }
    ]
  HF_ORG_ADMIN: '644171cfbd0c97265298aa99'
  HF_ORG_EARLY_ACCESS: '5e67bd5b1009063689407478'

infisical:
  enabled: true
  env: "prod-us-east-1"

autoscaling:
  enabled: true
  minReplicas: 12
  maxReplicas: 30
  targetMemoryUtilizationPercentage: "50"
  targetCPUUtilizationPercentage: "50"

resources:
  requests:
    cpu: 2
    memory: 4Gi
  limits:
    cpu: 4
    memory: 8Gi

monitoring:
  enabled: true

</chart/env/prod.yaml>

<chart/templates/service-monitor.yaml>
{{- if $.Values.monitoring.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels: {{ include "labels.standard" . | nindent 4 }}
  name: {{ include "name" . }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels: {{ include "labels.standard" . | nindent 6 }}
  endpoints:
    - port: metrics
      path: /metrics
      interval: 15s
{{- end }}

</chart/templates/service-monitor.yaml>

<chart/templates/deployment.yaml>
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{ include "labels.standard" . | nindent 4 }}
  name: {{ include "name" . }}
  namespace: {{ .Release.Namespace }}
  {{- if .Values.infisical.enabled }}
  annotations:
    secrets.infisical.com/auto-reload: "true"
  {{- end }}
spec:
  progressDeadlineSeconds: 600
  {{- if not $.Values.autoscaling.enabled }}
  replicas: {{ .Values.replicas }}
  {{- end }}
  revisionHistoryLimit: 10
  selector:
    matchLabels: {{ include "labels.standard" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels: {{ include "labels.standard" . | nindent 8 }}
      {{- if $.Values.envVars.NODE_LOG_STRUCTURED_DATA }}
      annotations:
        co.elastic.logs/json.expand_keys: "true"
      {{- end }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: "{{ .Values.serviceAccount.name | default (include "name" .) }}"
      {{- end }}
      containers:
        - name: chat-ui
          image: "{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          readinessProbe:
            failureThreshold: 30
            periodSeconds: 10
            httpGet:
              path: {{ $.Values.envVars.APP_BASE | default "" }}/healthcheck
              port: {{ $.Values.envVars.APP_PORT | default 3000 | int }}
          livenessProbe:
            failureThreshold: 30
            periodSeconds: 10
            httpGet:
              path: {{ $.Values.envVars.APP_BASE | default "" }}/healthcheck
              port: {{ $.Values.envVars.APP_PORT | default 3000 | int }}
          ports:
            - containerPort: {{ $.Values.envVars.APP_PORT | default 3000 | int }}
              name: http
              protocol: TCP
            {{- if $.Values.monitoring.enabled }}
            - containerPort: {{ $.Values.envVars.METRICS_PORT | default 5565 | int }}
              name: metrics
              protocol: TCP
            {{- end }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          {{- with $.Values.extraEnv }}
          env:
            {{- toYaml . | nindent 14 }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "name" . }}
          {{- if $.Values.infisical.enabled }}
            - secretRef:
                name: {{ include "name" $ }}-secs
          {{- end }}
          {{- with $.Values.extraEnvFrom }}
            {{- toYaml . | nindent 14 }}
          {{- end }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "name" . }}

</chart/templates/deployment.yaml>

<chart/templates/infisical.yaml>
{{- if .Values.infisical.enabled }}
apiVersion: secrets.infisical.com/v1alpha1
kind: InfisicalSecret
metadata:
  name: {{ include "name" $ }}-infisical-secret
  namespace: {{ $.Release.Namespace }}
spec:
  authentication:
    universalAuth:
      credentialsRef:
        secretName: {{ .Values.infisical.operatorSecretName | quote }}
        secretNamespace: {{ .Values.infisical.operatorSecretNamespace | quote }}
      secretsScope:
        envSlug: {{ .Values.infisical.env | quote }}
        projectSlug: {{ .Values.infisical.project | quote }}
        secretsPath: /
  hostAPI: {{ .Values.infisical.url | quote }}
  managedSecretReference:
    creationPolicy: Owner
    secretName: {{ include "name" $ }}-secs
    secretNamespace: {{ .Release.Namespace | quote }}
    secretType: Opaque
  resyncInterval: {{ .Values.infisical.resyncInterval }}
{{- end }}

</chart/templates/infisical.yaml>

<chart/templates/ingress.yaml>
{{- if $.Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations: {{ toYaml .Values.ingress.annotations | nindent 4 }}
  labels: {{ include "labels.standard" . | nindent 4 }}
  name: {{ include "name" . }}
  namespace: {{ .Release.Namespace }}
spec:
  {{ if $.Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{ end }}
  {{- with .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ $.Values.domain | quote }}
      {{- with .secretName }}
      secretName: {{ . }}
      {{- end }}
  {{- end }}
  rules:
    - host: {{ .Values.domain }}
      http:
        paths:
          - backend:
              service:
                name: {{ include "name" . }}
                port:
                  name: http
            path: {{ $.Values.ingress.path | default "/" }}
            pathType: Prefix
{{- end }}

</chart/templates/ingress.yaml>

<chart/templates/config.yaml>
apiVersion: v1
kind: ConfigMap
metadata:
  labels: {{ include "labels.standard" . | nindent 4 }}
  name: {{ include "name" . }}
  namespace: {{ .Release.Namespace }}
data:
  {{- range $key, $value := $.Values.envVars }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}

</chart/templates/config.yaml>

<chart/templates/service.yaml>
apiVersion: v1
kind: Service
metadata:
  name: "{{ include "name" . }}"
  annotations: {{ toYaml .Values.service.annotations | nindent 4 }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "labels.standard" . | nindent 4 }}
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  {{- if $.Values.monitoring.enabled }}
  - name: metrics
    port: 5565
    protocol: TCP
    targetPort: metrics
  {{- end }}
  selector: {{ include "labels.standard" . | nindent 4 }}
  type: {{.Values.service.type}}

</chart/templates/service.yaml>

<chart/templates/hpa.yaml>
{{- if $.Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  labels: {{ include "labels.standard" . | nindent 4 }}
  name: {{ include "name" . }}
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "name" . }}
  minReplicas: {{ $.Values.autoscaling.minReplicas }}
  maxReplicas: {{ $.Values.autoscaling.maxReplicas }}
  metrics:
    {{- if ne "" $.Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ $.Values.autoscaling.targetMemoryUtilizationPercentage | int }}
    {{- end }}
    {{- if ne "" $.Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ $.Values.autoscaling.targetCPUUtilizationPercentage | int }}
    {{- end }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
{{- end }}

</chart/templates/hpa.yaml>

<chart/templates/service-account.yaml>
{{- if and .Values.serviceAccount.enabled .Values.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
metadata:
  name: "{{ .Values.serviceAccount.name | default (include "name" .) }}"
  namespace: {{ .Release.Namespace }}
  labels: {{ include "labels.standard" . | nindent 4 }}
  {{- with .Values.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}

</chart/templates/service-account.yaml>

<chart/values.yaml>
image:
  repository: ghcr.io/huggingface
  name: chat-ui
  tag: 0.0.0-latest
  pullPolicy: IfNotPresent

replicas: 3

domain: huggingface.co

service:
  type: NodePort
  annotations: { }

serviceAccount:
  enabled: false
  create: false
  name: ""
  automountServiceAccountToken: true
  annotations: { }

ingress:
  enabled: true
  path: "/"
  annotations: { }
  # className: "nginx"
  tls: { }
    # secretName: XXX

resources:
  requests:
    cpu: 2
    memory: 4Gi
  limits:
    cpu: 2
    memory: 4Gi
nodeSelector: {}
tolerations: []

envVars: { }

infisical:
  enabled: false
  env: ""
  project: "huggingchat-v2-a1"
  url: ""
  resyncInterval: 60
  operatorSecretName: "huggingchat-operator-secrets"
  operatorSecretNamespace: "hub-utils"

# Allow to environment injections on top or instead of infisical
extraEnvFrom: []
extraEnv: []

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetMemoryUtilizationPercentage: ""
  targetCPUUtilizationPercentage: ""

monitoring:
  enabled: false

</chart/values.yaml>

<PRIVACY.md>
## Privacy

> Last updated: April 15, 2024

Users of HuggingChat are authenticated through their HF user account.

We endorse Privacy by Design. As such, your conversations are private to you and will not be shared with anyone, including model authors, for any purpose, including for research or model training purposes.

You conversation data will only be stored to let you access past conversations. You can click on the Delete icon to delete any past conversation at any moment.

🗓 Please also consult huggingface.co's main privacy policy at <https://huggingface.co/privacy>. To exercise any of your legal privacy rights, please send an email to <privacy@huggingface.co>.

## About available LLMs

The goal of this app is to showcase that it is now possible to build an open source alternative to ChatGPT. 💪

We aim to always provide a diverse set of state of the art open LLMs, hence we rotate the available models over time.

Historically, HuggingChat has been running models such as:

- [Llama 2 70B](https://huggingface.co/meta-llama/Llama-2-70b-chat-hf)
- [CodeLlama 35B](https://about.fb.com/news/2023/08/code-llama-ai-for-coding/)
- [Falcon 180B](https://www.tii.ae/news/technology-innovation-institute-introduces-worlds-most-powerful-open-llm-falcon-180b)
- [Mistral 7B](https://mistral.ai/news/announcing-mistral-7b/)
- [Cohere Command R+](https://huggingface.co/chat/models/CohereForAI/c4ai-command-r-plus)
- [Google Gemma 7B](https://huggingface.co/chat/models/google/gemma-1.1-7b-it)

This is only a partial list. Check the [models](https://huggingface.co/chat/models/) page for up-to-date list of the best available LLMs.

## Technical details

This app is running in a [Space](https://huggingface.co/docs/hub/spaces-overview), which entails that the code for this UI is publicly visible [inside the Space repo](https://huggingface.co/spaces/huggingchat/chat-ui/tree/main).

**Further development takes place on the [huggingface/chat-ui GitHub repo](https://github.com/huggingface/chat-ui).**

The inference backend is running the optimized [text-generation-inference](https://github.com/huggingface/text-generation-inference) on HuggingFace's Inference API infrastructure.

It is therefore possible to deploy a copy of this app to a Space and customize it (swap model, add some UI elements, or store user messages according to your own Terms and conditions). You can also 1-click deploy your own instance using the [Chat UI Spaces Docker template](https://huggingface.co/new-space?template=huggingchat/chat-ui-template).

We welcome any feedback on this app: please participate to the public discussion at <https://huggingface.co/spaces/huggingchat/chat-ui/discussions>

<a target="_blank" href="https://huggingface.co/spaces/huggingchat/chat-ui/discussions"><img src="https://huggingface.co/datasets/huggingface/badges/raw/main/open-a-discussion-xl.svg" title="open a discussion"></a>

</PRIVACY.md>

<docs/source/configuration/overview.md>
# Configuration Overview

Chat UI handles configuration with environment variables. The default config for Chat UI is stored in the `.env` file, which you may use as a reference. You will need to override some values to get Chat UI to run locally. This can be done in `.env.local` or via your environment. The bare minimum configuration to get Chat UI running is:

```ini
MONGODB_URL=mongodb://localhost:27017
HF_TOKEN=your_token
```

The following sections detail various sections of the app you may want to configure.

</docs/source/configuration/overview.md>

<docs/source/configuration/embeddings.md>
# Text Embedding Models

By default (for backward compatibility), when `TEXT_EMBEDDING_MODELS` environment variable is not defined, [transformers.js](https://huggingface.co/docs/transformers.js) embedding models will be used for embedding tasks, specifically, the [Xenova/gte-small](https://huggingface.co/Xenova/gte-small) model.

You can customize the embedding model by setting `TEXT_EMBEDDING_MODELS` in your `.env.local` file where the required fields are `name`, `chunkCharLength` and `endpoints`.

Supported text embedding backends are: [`transformers.js`](https://huggingface.co/docs/transformers.js), [`TEI`](https://github.com/huggingface/text-embeddings-inference) and [`OpenAI`](https://platform.openai.com/docs/guides/embeddings). `transformers.js` models run locally as part of `chat-ui`, whereas `TEI` models run in a different environment & accessed through an API endpoint. `openai` models are accessed through the [OpenAI API](https://platform.openai.com/docs/guides/embeddings).

When more than one embedding models are supplied in `.env.local` file, the first will be used by default, and the others will only be used on LLM's which configured `embeddingModel` to the name of the model.

## Transformers.js

The Transformers.js backend uses local CPU for the embedding which can be quite slow. If possible, consider using TEI or OpenAI embeddings instead if you use web search frequently, as performance will improve significantly.

```ini
TEXT_EMBEDDING_MODELS = `[
  {
    "name": "Xenova/gte-small",
    "displayName": "Xenova/gte-small",
    "description": "locally running embedding",
    "chunkCharLength": 512,
    "endpoints": [
      { "type": "transformersjs" }
    ]
  }
]`
```

## Text Embeddings Inference (TEI)

> Text Embeddings Inference (TEI) is a comprehensive toolkit designed for efficient deployment and serving of open source text embeddings models. It enables high-performance extraction for the most popular models, including FlagEmbedding, Ember, GTE, and E5.

Some recommended models at the time of writing (May 2024) are `Snowflake/snowflake-arctic-embed-m` and `BAAI/bge-large-en-v1.5`. You may run TEI locally with GPU support via Docker:

`docker run --gpus all -p 8080:80 -v tei-data:/data --name tei ghcr.io/huggingface/text-embeddings-inference:1.2 --model-id YOUR/HF_MODEL`

You can then hook this up to your Chat UI instance with the following configuration.

```ini
TEXT_EMBEDDING_MODELS=`[
  {
    "name": "YOUR/HF_MODEL",
    "displayName": "YOUR/HF_MODEL",
    "preQuery": "Check the model documentation for the preQuery. Not all models have one",
    "prePassage": "Check the model documentation for the prePassage. Not all models have one",
    "chunkCharLength": 512,
    "endpoints": [{
      "type": "tei",
      "url": "http://127.0.0.1:8080/"
    }]
  }
]`
```

Examples for `Snowflake/snowflake-arctic-embed-m` and `BAAI/bge-large-en-v1.5`:

```ini
TEXT_EMBEDDING_MODELS=`[
  {
    "name": "Snowflake/snowflake-arctic-embed-m",
    "displayName": "Snowflake/snowflake-arctic-embed-m",
    "preQuery": "Represent this sentence for searching relevant passages: ",
    "chunkCharLength": 512,
    "endpoints": [{
      "type": "tei",
      "url": "http://127.0.0.1:8080/"
    }]
  },{
    "name": "BAAI/bge-large-en-v1.5",
    "displayName": "BAAI/bge-large-en-v1.5",
    "chunkCharLength": 512,
    "endpoints": [{
      "type": "tei",
      "url": "http://127.0.0.1:8080/"
    }]
  }
]`
```

## OpenAI

Please contribute an example!

</docs/source/configuration/embeddings.md>

<docs/source/configuration/common-issues.md>
# Common Issues

## 403：You don't have access to this conversation

Most likely you are running chat-ui over HTTP. The recommended option is to setup something like NGINX to handle HTTPS and proxy the requests to chat-ui. If you really need to run over HTTP you can add `ALLOW_INSECURE_COOKIES=true` to your `.env.local`.

Make sure to set your `PUBLIC_ORIGIN` in your `.env.local` to the correct URL as well.

</docs/source/configuration/common-issues.md>

<docs/source/configuration/web-search.md>
# Web Search

Chat UI features a powerful Web Search feature. A high level overview of how it works:

1. Generate an appropriate search query from the user prompt using the `TASK_MODEL`
2. Perform web search via an external provider (i.e. Serper) or via locally scrape Google results
3. Load each search result into playwright and scrape
4. Convert scraped HTML to Markdown tree with headings as parents
5. Create embeddings for each Markdown element
6. Find the embedings clossest to the user query using a vector similarity search (inner product)
7. Get the corresponding Markdown elements and their parent, up to 8000 characters
8. Supply the information as context to the model

<div class="flex justify-center">
<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/websearch-light.png" height="auto"/>
<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/websearch-dark.png" height="auto"/>
</div>

## Providers

Many providers are supported for the web search, or you can use locally scraped Google results.

### Local

For locally scraped Google results, put `USE_LOCAL_WEBSEARCH=true` in your `.env.local`. Please note that you may hit rate limits as we make no attempt to make the traffic look legitimate. To avoid this, you may choose a provider, such as Serper, used on the official instance.

### SearXNG

> SearXNG is a free internet metasearch engine which aggregates results from various search services and databases. Users are neither tracked nor profiled.

You may enable support via the `SEARXNG_QUERY_URL` where `<query>` will be replaceed with the query keywords. Please see [the official documentation](https://docs.searxng.org/dev/search_api.html) for more information

Example: `https://searxng.yourdomain.com/search?q=<query>&engines=duckduckgo,google&format=json`

### Third Party

Many third party providers are supported as well. The official instance uses Serper.

```ini
YDC_API_KEY=docs.you.com api key here
SERPER_API_KEY=serper.dev api key here
SERPAPI_KEY=serpapi key here
SERPSTACK_API_KEY=serpstack api key here
SEARCHAPI_KEY=searchapi api key here
```

## Block/Allow List

You may block or allow specific websites from the web search results. When using an allow list, only the links in the allowlist will be used. For supported search engines, the links will be blocked from the results directly. Any URL in the results that **partially or fully matches** the entry will be filtered out.

```ini
WEBSEARCH_BLOCKLIST=`["youtube.com", "https://example.com/foo/bar"]`
WEBSEARCH_ALLOWLIST=`["stackoverflow.com"]`
```

## Disabling Javascript

By default, Playwright will execute all Javascript on the page. This can be intensive, requiring up to 6 cores for full performance, on some webpages. You may block scripts from running by settings `WEBSEARCH_JAVASCRIPT=false`. However, this will not block Javascript inlined in the HTML.

</docs/source/configuration/web-search.md>

<docs/source/configuration/models/overview.md>
# Models Overview

You can customize the parameters passed to the model or even use a new model by updating the `MODELS` variable in your `.env.local`. The default one can be found in `.env` and looks like this :

```ini
MODELS=`[
  {
    "name": "mistralai/Mistral-7B-Instruct-v0.2",
    "displayName": "mistralai/Mistral-7B-Instruct-v0.2",
    "description": "Mistral 7B is a new Apache 2.0 model, released by Mistral AI that outperforms Llama2 13B in benchmarks.",
    "websiteUrl": "https://mistral.ai/news/announcing-mistral-7b/",
    "preprompt": "",
    "chatPromptTemplate" : "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s>{{/ifAssistant}}{{/each}}",
    "parameters": {
      "temperature": 0.3,
      "top_p": 0.95,
      "repetition_penalty": 1.2,
      "top_k": 50,
      "truncate": 3072,
      "max_new_tokens": 1024,
      "stop": ["</s>"]
    },
    "promptExamples": [
      {
        "title": "Write an email from bullet list",
        "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
      }, {
        "title": "Code a snake game",
        "prompt": "Code a basic snake game in python, give explanations for each step."
      }, {
        "title": "Assist in a task",
        "prompt": "How do I make a delicious lemon cheesecake?"
      }
    ]
  }
]`

```

You can change things like the parameters, or customize the preprompt to better suit your needs. You can also add more models by adding more objects to the array, with different preprompts for example.

## Chat Prompt Template

When querying the model for a chat response, the `chatPromptTemplate` template is used. `messages` is an array of chat messages, it has the format `[{ content: string }, ...]`. To identify if a message is a user message or an assistant message the `ifUser` and `ifAssistant` block helpers can be used.

The following is the default `chatPromptTemplate`, although newlines and indentiation have been added for readability. You can find the prompts used in production for HuggingChat [here](https://github.com/huggingface/chat-ui/blob/main/PROMPTS.md). The templating language used is [Handlebars](https://www.npmjs.com/package/handlebars).

```handlebars
{{preprompt}}
{{#each messages}}
	{{#ifUser}}{{@root.userMessageToken}}{{content}}{{@root.userMessageEndToken}}{{/ifUser}}
	{{#ifAssistant
	}}{{@root.assistantMessageToken}}{{content}}{{@root.assistantMessageEndToken}}{{/ifAssistant}}
{{/each}}
{{assistantMessageToken}}
```

## Custom endpoint authorization

### Basic and Bearer

Custom endpoints may require authorization, depending on how you configure them. Authentication will usually be set either with `Basic` or `Bearer`.

For `Basic` we will need to generate a base64 encoding of the username and password.

`echo -n "USER:PASS" | base64`

> VVNFUjpQQVNT

For `Bearer` you can use a token, which can be grabbed from [here](https://huggingface.co/settings/tokens).

You can then add the generated information and the `authorization` parameter to your `.env.local`.

```ini
"endpoints": [
  {
    "url": "https://HOST:PORT",
    "authorization": "Basic VVNFUjpQQVNT",
  }
]
```

Please note that if `HF_TOKEN` is also set or not empty, it will take precedence.

## Models hosted on multiple custom endpoints

If the model being hosted will be available on multiple servers/instances add the `weight` parameter to your `.env.local`. The `weight` will be used to determine the probability of requesting a particular endpoint.

```ini
"endpoints": [
  {
    "url": "https://HOST:PORT",
    "weight": 1
  },
  {
    "url": "https://HOST:PORT",
    "weight": 2
  }
  ...
]
```

## Client Certificate Authentication (mTLS)

Custom endpoints may require client certificate authentication, depending on how you configure them. To enable mTLS between Chat UI and your custom endpoint, you will need to set the `USE_CLIENT_CERTIFICATE` to `true`, and add the `CERT_PATH` and `KEY_PATH` parameters to your `.env.local`. These parameters should point to the location of the certificate and key files on your local machine. The certificate and key files should be in PEM format. The key file can be encrypted with a passphrase, in which case you will also need to add the `CLIENT_KEY_PASSWORD` parameter to your `.env.local`.

If you're using a certificate signed by a private CA, you will also need to add the `CA_PATH` parameter to your `.env.local`. This parameter should point to the location of the CA certificate file on your local machine.

If you're using a self-signed certificate, e.g. for testing or development purposes, you can set the `REJECT_UNAUTHORIZED` parameter to `false` in your `.env.local`. This will disable certificate validation, and allow Chat UI to connect to your custom endpoint.

## Specific Embedding Model

A model can use any of the embedding models defined under `TEXT_EMBEDDING_MODELS`, (currently used when web searching). By default it will use the first embedding model, but it can be changed with the field `embeddingModel`:

```ini
TEXT_EMBEDDING_MODELS = `[
  {
    "name": "Xenova/gte-small",
    "chunkCharLength": 512,
    "endpoints": [
      {"type": "transformersjs"}
    ]
  },
  {
    "name": "intfloat/e5-base-v2",
    "chunkCharLength": 768,
    "endpoints": [
      {"type": "tei", "url": "http://127.0.0.1:8080/", "authorization": "Basic VVNFUjpQQVNT"},
      {"type": "tei", "url": "http://127.0.0.1:8081/"}
    ]
  }
]`

MODELS=`[
  {
      "name": "Ollama Mistral",
      "chatPromptTemplate": "...",
      "embeddingModel": "intfloat/e5-base-v2"
      "parameters": {
        ...
      },
      "endpoints": [
        ...
      ]
  }
]`
```

</docs/source/configuration/models/overview.md>

<docs/source/configuration/models/providers/anthropic.md>
# Anthropic

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | Yes       |

We also support Anthropic models (including multimodal ones via `multmodal: true`) through the official SDK. You may provide your API key via the `ANTHROPIC_API_KEY` env variable, or alternatively, through the `endpoints.apiKey` as per the following example.

```ini
MODELS=`[
  {
      "name": "claude-3-haiku-20240307",
      "displayName": "Claude 3 Haiku",
      "description": "Fastest and most compact model for near-instant responsiveness",
      "multimodal": true,
      "parameters": {
        "max_new_tokens": 4096,
      },
      "endpoints": [
        {
          "type": "anthropic",
          // optionals
          "apiKey": "sk-ant-...",
          "baseURL": "https://api.anthropic.com",
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
  {
      "name": "claude-3-sonnet-20240229",
      "displayName": "Claude 3 Sonnet",
      "description": "Ideal balance of intelligence and speed",
      "multimodal": true,
      "parameters": {
        "max_new_tokens": 4096,
      },
      "endpoints": [
        {
          "type": "anthropic",
          // optionals
          "apiKey": "sk-ant-...",
          "baseURL": "https://api.anthropic.com",
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
  {
      "name": "claude-3-opus-20240229",
      "displayName": "Claude 3 Opus",
      "description": "Most powerful model for highly complex tasks",
      "multimodal": true,
      "parameters": {
         "max_new_tokens": 4096
      },
      "endpoints": [
        {
          "type": "anthropic",
          // optionals
          "apiKey": "sk-ant-...",
          "baseURL": "https://api.anthropic.com",
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  }
]`
```

## VertexAI

We also support using Anthropic models running on Vertex AI. Authentication is done using Google Application Default Credentials. Project ID can be provided through the `endpoints.projectId` as per the following example:

```ini
MODELS=`[
  {
      "name": "claude-3-haiku@20240307",
      "displayName": "Claude 3 Haiku",
      "description": "Fastest, most compact model for near-instant responsiveness",
      "multimodal": true,
      "parameters": {
         "max_new_tokens": 4096
      },
      "endpoints": [
        {
          "type": "anthropic-vertex",
          "region": "us-central1",
          "projectId": "gcp-project-id",
          // optionals
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
  {
      "name": "claude-3-sonnet@20240229",
      "displayName": "Claude 3 Sonnet",
      "description": "Ideal balance of intelligence and speed",
      "multimodal": true,
      "parameters": {
        "max_new_tokens": 4096,
      },
      "endpoints": [
        {
          "type": "anthropic-vertex",
          "region": "us-central1",
          "projectId": "gcp-project-id",
          // optionals
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
]`
```

</docs/source/configuration/models/providers/anthropic.md>

<docs/source/configuration/models/providers/tgi.md>
# Text Generation Inference (TGI)

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | Yes\*     |
| [Multimodal](../multimodal) | Yes\*     |

\* Tools are only supported with the Cohere Command R+ model with the Xenova tokenizers. Please see the [Tools](../tools) section.

\* Multimodal is only supported with the IDEFICS model. Please see the [Multimodal](../multimodal) section.

By default, if `endpoints` are left unspecified, Chat UI will look for the model on the hosted Hugging Face inference API using the model name, and use your `HF_TOKEN`. Refer to the [overview](/configuration/models/overview) for more information about model configuration.

```ini
MODELS=`[
  {
    "name": "mistralai/Mistral-7B-Instruct-v0.2",
    "displayName": "mistralai/Mistral-7B-Instruct-v0.2",
    "description": "Mistral 7B is a new Apache 2.0 model, released by Mistral AI that outperforms Llama2 13B in benchmarks.",
    "websiteUrl": "https://mistral.ai/news/announcing-mistral-7b/",
    "preprompt": "",
    "chatPromptTemplate" : "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s>{{/ifAssistant}}{{/each}}",
    "parameters": {
      "temperature": 0.3,
      "top_p": 0.95,
      "repetition_penalty": 1.2,
      "top_k": 50,
      "truncate": 3072,
      "max_new_tokens": 1024,
      "stop": ["</s>"]
    },
    "promptExamples": [
      {
        "title": "Write an email from bullet list",
        "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
      }, {
        "title": "Code a snake game",
        "prompt": "Code a basic snake game in python, give explanations for each step."
      }, {
        "title": "Assist in a task",
        "prompt": "How do I make a delicious lemon cheesecake?"
      }
    ]
  }
]`
```

## Running your own models using a custom endpoint

If you want to, instead of hitting models on the Hugging Face Inference API, you can run your own models locally.

A good option is to hit a [text-generation-inference](https://github.com/huggingface/text-generation-inference) endpoint. This is what is done in the official [Chat UI Spaces Docker template](https://huggingface.co/new-space?template=huggingchat/chat-ui-template) for instance: both this app and a text-generation-inference server run inside the same container.

To do this, you can add your own endpoints to the `MODELS` variable in `.env.local`, by adding an `"endpoints"` key for each model in `MODELS`.

```ini
MODELS=`[{
  "name": "your-model-name",
  "displayName": "Your Model Name",
  ... other model config
  "endpoints": [{
    "type" : "tgi",
    "url": "https://HOST:PORT",
  }]
}]
```

</docs/source/configuration/models/providers/tgi.md>

<docs/source/configuration/models/providers/openai.md>
# OpenAI

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

Chat UI can be used with any API server that supports OpenAI API compatibility, for example [text-generation-webui](https://github.com/oobabooga/text-generation-webui/tree/main/extensions/openai), [LocalAI](https://github.com/go-skynet/LocalAI), [FastChat](https://github.com/lm-sys/FastChat/blob/main/docs/openai_api.md), [llama-cpp-python](https://github.com/abetlen/llama-cpp-python), and [ialacol](https://github.com/chenhunghan/ialacol) and [vllm](https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html).

The following example config makes Chat UI works with [text-generation-webui](https://github.com/oobabooga/text-generation-webui/tree/main/extensions/openai), the `endpoint.baseUrl` is the url of the OpenAI API compatible server, this overrides the baseUrl to be used by OpenAI instance. The `endpoint.completion` determine which endpoint to be used, default is `chat_completions` which uses `/chat/completions`, change to `endpoint.completion` to `completions` to use the `/completions` endpoint.

```ini
MODELS=`[
  {
    "name": "text-generation-webui",
    "id": "text-generation-webui",
    "parameters": {
      "temperature": 0.9,
      "top_p": 0.95,
      "repetition_penalty": 1.2,
      "top_k": 50,
      "truncate": 1000,
      "max_new_tokens": 1024,
      "stop": []
    },
    "endpoints": [{
      "type" : "openai",
      "baseURL": "http://localhost:8000/v1"
    }]
  }
]`

```

The `openai` type includes official OpenAI models. You can add, for example, GPT4/GPT3.5 as a "openai" model:

```ini
OPENAI_API_KEY=#your openai api key here
MODELS=`[{
  "name": "gpt-4",
  "displayName": "GPT 4",
  "endpoints" : [{
    "type": "openai",
    "apiKey": "or your openai api key here"
  }]
},{
  "name": "gpt-3.5-turbo",
  "displayName": "GPT 3.5 Turbo",
  "endpoints" : [{
    "type": "openai",
    "apiKey": "or your openai api key here"
  }]
}]`
```

You may also consume any model provider that provides compatible OpenAI API endpoint. For example, you may self-host [Portkey](https://github.com/Portkey-AI/gateway) gateway and experiment with Claude or GPTs offered by Azure OpenAI. Example for Claude from Anthropic:

```ini
MODELS=`[{
  "name": "claude-2.1",
  "displayName": "Claude 2.1",
  "description": "Anthropic has been founded by former OpenAI researchers...",
  "parameters": {
    "temperature": 0.5,
    "max_new_tokens": 4096,
  },
  "endpoints": [
    {
      "type": "openai",
      "baseURL": "https://gateway.example.com/v1",
      "defaultHeaders": {
        "x-portkey-config": '{"provider":"anthropic","api_key":"sk-ant-abc...xyz"}'
      }
    }
  ]
}]`
```

Example for GPT 4 deployed on Azure OpenAI:

```ini
MODELS=`[{
  "id": "gpt-4-1106-preview",
  "name": "gpt-4-1106-preview",
  "displayName": "gpt-4-1106-preview",
  "parameters": {
    "temperature": 0.5,
    "max_new_tokens": 4096,
  },
  "endpoints": [
    {
      "type": "openai",
      "baseURL": "https://{resource-name}.openai.azure.com/openai/deployments/{deployment-id}",
      "defaultHeaders": {
        "api-key": "{api-key}"
      },
      "defaultQuery": {
        "api-version": "2023-05-15"
      }
    }
  ]
}]`
```

## DeepInfra

Or try Mistral from [Deepinfra](https://deepinfra.com/mistralai/Mistral-7B-Instruct-v0.1/api?example=openai-http):

> Note, apiKey can either be set custom per endpoint, or globally using `OPENAI_API_KEY` variable.

```ini
MODELS=`[{
  "name": "mistral-7b",
  "displayName": "Mistral 7B",
  "description": "A 7B dense Transformer, fast-deployed and easily customisable. Small, yet powerful for a variety of use cases. Supports English and code, and a 8k context window.",
  "parameters": {
    "temperature": 0.5,
    "max_new_tokens": 4096,
  },
  "endpoints": [
    {
      "type": "openai",
      "baseURL": "https://api.deepinfra.com/v1/openai",
      "apiKey": "abc...xyz"
    }
  ]
}]`
```

## Other

Some other providers and their `baseURL` for reference.

[Groq](https://groq.com/): https://api.groq.com/openai/v1
[Fireworks](https://fireworks.ai/): https://api.fireworks.ai/inference/v1

</docs/source/configuration/models/providers/openai.md>

<docs/source/configuration/models/providers/langserve.md>
# LangServe

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

LangChain applications that are deployed using LangServe can be called with the following config:

```ini
MODELS=`[
  {
    "name": "summarization-chain",
    "displayName": "Summarization Chain"
    "endpoints" : [{
      "type": "langserve",
      "url" : "http://127.0.0.1:8100",
    }]
  }
]`

```

</docs/source/configuration/models/providers/langserve.md>

<docs/source/configuration/models/providers/ollama.md>
# Ollama

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

We also support the Ollama inference server. Spin up a model with

```bash
ollama run mistral
```

Then specify the endpoints like so:

```ini
MODELS=`[
  {
    "name": "Ollama Mistral",
    "chatPromptTemplate": "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}} {{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s> {{/ifAssistant}}{{/each}}",
    "parameters": {
      "temperature": 0.1,
      "top_p": 0.95,
      "repetition_penalty": 1.2,
      "top_k": 50,
      "truncate": 3072,
      "max_new_tokens": 1024,
      "stop": ["</s>"]
    },
    "endpoints": [
      {
        "type": "ollama",
        "url" : "http://127.0.0.1:11434",
        "ollamaName" : "mistral"
      }
    ]
  }
]`
```

</docs/source/configuration/models/providers/ollama.md>

<docs/source/configuration/models/providers/llamacpp.md>
# Llama.cpp

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

Chat UI supports the llama.cpp API server directly without the need for an adapter. You can do this using the `llamacpp` endpoint type.

If you want to run Chat UI with llama.cpp, you can do the following, using [microsoft/Phi-3-mini-4k-instruct-gguf](https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf) as an example model:

```bash
# install llama.cpp
brew install llama.cpp
# start llama.cpp server
llama-server --hf-repo microsoft/Phi-3-mini-4k-instruct-gguf --hf-file Phi-3-mini-4k-instruct-q4.gguf -c 4096
```

_note: you can swap the `hf-repo` and `hf-file` with your fav GGUF on the [Hub](https://huggingface.co/models?library=gguf). For example: `--hf-repo TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF` for [this repo](https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF) & `--hf-file tinyllama-1.1b-chat-v1.0.Q4_0.gguf` for [this file](https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF/blob/main/tinyllama-1.1b-chat-v1.0.Q4_0.gguf)._

A local LLaMA.cpp HTTP Server will start on `http://localhost:8080` (to change the port or any other default options, please find [LLaMA.cpp HTTP Server readme](https://github.com/ggerganov/llama.cpp/tree/master/examples/server)).

Add the following to your `.env.local`:

```ini
MODELS=`[
  {
    "name": "Local microsoft/Phi-3-mini-4k-instruct-gguf",
    "tokenizer": "microsoft/Phi-3-mini-4k-instruct-gguf",
    "preprompt": "",
    "chatPromptTemplate": "<s>{{preprompt}}{{#each messages}}{{#ifUser}}<|user|>\n{{content}}<|end|>\n<|assistant|>\n{{/ifUser}}{{#ifAssistant}}{{content}}<|end|>\n{{/ifAssistant}}{{/each}}",
    "parameters": {
      "stop": ["<|end|>", "<|endoftext|>", "<|assistant|>"],
      "temperature": 0.7,
      "max_new_tokens": 1024,
      "truncate": 3071
    },
    "endpoints": [{
      "type" : "llamacpp",
      "baseURL": "http://localhost:8080"
    }],
  },
]`
```

<div class="flex justify-center">
<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/llamacpp-light.png" height="auto"/>
<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/llamacpp-dark.png" height="auto"/>
</div>

</docs/source/configuration/models/providers/llamacpp.md>

<docs/source/configuration/models/providers/cohere.md>
# Cohere

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | Yes       |
| [Multimodal](../multimodal) | No        |

You may use Cohere to run their models directly from Chat UI. You will need to have a Cohere account, then get your [API token](https://dashboard.cohere.com/api-keys). You can either specify it directly in your `.env.local` using the `COHERE_API_TOKEN` variable, or you can set it in the endpoint config.

Here is an example of a Cohere model config. You can set which model you want to use by setting the `id` field to the model name.

```ini
MODELS=`[
  {
    "name": "command-r-plus",
    "displayName": "Command R+",
    "tools": true,
    "endpoints": [{
      "type": "cohere",
      <!-- optionally specify these, or use COHERE_API_TOKEN
      "apiKey": "your-api-token"
      -->
    }]
  }
]`
```

</docs/source/configuration/models/providers/cohere.md>

<docs/source/configuration/models/providers/google.md>
# Google

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

Chat UI can connect to the google Vertex API endpoints ([List of supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models)).

To enable:

1. [Select](https://console.cloud.google.com/project) or [create](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project) a Google Cloud project.
1. [Enable billing for your project](https://cloud.google.com/billing/docs/how-to/modify-project).
1. [Enable the Vertex AI API](https://console.cloud.google.com/flows/enableapi?apiid=aiplatform.googleapis.com).
1. [Set up authentication with a service account](https://cloud.google.com/docs/authentication/getting-started)
   so you can access the API from your local workstation.

The service account credentials file can be imported as an environmental variable:

```ini
GOOGLE_APPLICATION_CREDENTIALS = clientid.json
```

Make sure your docker container has access to the file and the variable is correctly set.
Afterwards Google Vertex endpoints can be configured as following:

```ini
MODELS=`[
  {
    "name": "gemini-1.5-pro",
    "displayName": "Vertex Gemini Pro 1.5",
    "endpoints" : [{
      "type": "vertex",
      "project": "abc-xyz",
      "location": "europe-west3",
      "model": "gemini-1.5-pro-preview-0409", // model-name

      // Optional
      "safetyThreshold": "BLOCK_MEDIUM_AND_ABOVE",
      "apiEndpoint": "", // alternative api endpoint url,
      "tools": [{
        "googleSearchRetrieval": {
          "disableAttribution": true
        }
      }]
    }]
  }
]`
```

## GenAI

Or use the Gemini API API provider [from](https://github.com/google-gemini/generative-ai-js#readme):

Make sure that you have an API key from Google Cloud Platform. To get an API key, follow the instructions [here](https://ai.google.dev/gemini-api/docs/api-key).

You can either specify them directly in your `.env.local` using the `GOOGLE_GENAI_API_KEY` variables, or you can set them directly in the endpoint config.

You can find the list of models available [here](https://ai.google.dev/gemini-api/docs/models/gemini), and experimental models available [here](https://ai.google.dev/gemini-api/docs/models/experimental-models).

```ini
MODELS=`[
  {
    "name": "gemini-1.5-flash",
    "displayName": "Gemini Flash 1.5",
    "multimodal": true,
    "endpoints": [
      {
        "type": "genai",

        // Optional
        "apiKey": "abc...xyz"
        "safetyThreshold": "BLOCK_MEDIUM_AND_ABOVE",
      }
    ]
  },
  {
    "name": "gemini-1.5-pro",
    "displayName": "Gemini Pro 1.5",
    "multimodal": false,
    "endpoints": [
      {
        "type": "genai",

        // Optional
        "apiKey": "abc...xyz"
      }
    ]
  }
]`
```

</docs/source/configuration/models/providers/google.md>

<docs/source/configuration/models/providers/cloudflare.md>
# Cloudflare

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

You may use Cloudflare Workers AI to run your own models with serverless inference.

You will need to have a Cloudflare account, then get your [account ID](https://developers.cloudflare.com/fundamentals/setup/find-account-and-zone-ids/) as well as your [API token](https://developers.cloudflare.com/workers-ai/get-started/rest-api/#1-get-an-api-token) for Workers AI.

You can either specify them directly in your `.env.local` using the `CLOUDFLARE_ACCOUNT_ID` and `CLOUDFLARE_API_TOKEN` variables, or you can set them directly in the endpoint config.

You can find the list of models available on Cloudflare [here](https://developers.cloudflare.com/workers-ai/models/#text-generation).

```ini
MODELS=`[
  {
    "name" : "nousresearch/hermes-2-pro-mistral-7b",
    "tokenizer": "nousresearch/hermes-2-pro-mistral-7b",
    "parameters": {
      "stop": ["<|im_end|>"]
    },
    "endpoints" : [
      {
        "type" : "cloudflare"
        <!-- optionally specify these
        "accountId": "your-account-id",
        "authToken": "your-api-token"
        -->
      }
    ]
  }
]`
```

</docs/source/configuration/models/providers/cloudflare.md>

<docs/source/configuration/models/providers/aws.md>
# Amazon Web Services (AWS)

| Feature                     | Available |
| --------------------------- | --------- |
| [Tools](../tools)           | No        |
| [Multimodal](../multimodal) | No        |

You may specify your Amazon SageMaker instance as an endpoint for Chat UI:

```ini
MODELS=`[{
  "name": "your-model",
  "displayName": "Your Model",
  "description": "Your description",
  "parameters": {
     "max_new_tokens": 4096
  },
  "endpoints": [
    {
      "type" : "aws",
      "service" : "sagemaker"
      "url": "",
      "accessKey": "",
      "secretKey" : "",
      "sessionToken": "",
      "region": "",
      "weight": 1
    }
  ]
}]`
```

You can also set `"service": "lambda"` to use a lambda instance.

You can get the `accessKey` and `secretKey` from your AWS user, under programmatic access.

</docs/source/configuration/models/providers/aws.md>

<docs/source/configuration/models/multimodal.md>
# Multimodal

We currently support [IDEFICS](https://huggingface.co/blog/idefics) (hosted on [TGI](./providers/tgi)), OpenAI and Anthropic Claude 3 as multimodal models. You can enable it by setting `multimodal: true` in your `MODELS` configuration. For IDEFICS, you must have a [PRO HF Api token](https://huggingface.co/settings/tokens). For OpenAI, see the [OpenAI section](./providers/openai). For Anthropic, see the [Anthropic section](./providers/anthropic).

```ini
MODELS=`[
  {
    "name": "HuggingFaceM4/idefics-80b-instruct",
    "multimodal" : true,
    "description": "IDEFICS is the new multimodal model by Hugging Face.",
    "preprompt": "",
    "chatPromptTemplate" : "{{#each messages}}{{#ifUser}}User: {{content}}{{/ifUser}}<end_of_utterance>\nAssistant: {{#ifAssistant}}{{content}}\n{{/ifAssistant}}{{/each}}",
    "parameters": {
      "temperature": 0.1,
      "top_p": 0.95,
      "repetition_penalty": 1.2,
      "top_k": 12,
      "truncate": 1000,
      "max_new_tokens": 1024,
      "stop": ["<end_of_utterance>", "User:", "\nUser:"]
    }
  }
]`
```

</docs/source/configuration/models/multimodal.md>

<docs/source/configuration/models/tools.md>
# Tools

Tool calling instructs the model to generate an output matching a user-defined schema, which may be parsed for invoking external tools. The model simply chooses the tools and their parameters. Currently, only `TGI` and `Cohere` with `Command R+` are supported.

<div class="flex justify-center">
<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/tools-light.png" height="auto"/>
<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/tools-dark.png" height="auto"/>
</div>

## TGI Configuration

A custom tokenizer is required for prompting the model for generating tool calls, as well as prompting with the results. The expected format for these tools and the resulting tool calls are hard coded for TGI, so it's likely that only the following configuration will work:

```ini
MODELS=`[
  {
    "name" : "CohereForAI/c4ai-command-r-plus",
    "displayName": "Command R+",
    "description": "Command R+ is Cohere's latest LLM and is the first open weight model to beat GPT4 in the Chatbot Arena!",
    "tools": true,
    "tokenizer": "Xenova/c4ai-command-r-v01-tokenizer",
    "modelUrl": "https://huggingface.co/CohereForAI/c4ai-command-r-plus",
    "websiteUrl": "https://docs.cohere.com/docs/command-r-plus",
    "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/cohere-logo.png",
    "parameters": {
      "stop": ["<|END_OF_TURN_TOKEN|>"],
      "truncate" : 28672,
      "max_new_tokens" : 4096,
      "temperature" : 0.3
    }
  }
]`
```

## Cohere Configuration

The Cohere provider supports the endpoint native method of tool calling. Refer to the `endpoints/cohere` for implementation details.

```ini
MODELS=`[
  {
    "name": "command-r-plus",
    "displayName": "Command R+",
    "description": "Command R+ is Cohere's latest LLM and is the first open weight model to beat GPT4 in the Chatbot Arena!",
    "tools": true,
    "websiteUrl": "https://docs.cohere.com/docs/command-r-plus",
    "logoUrl": "https://huggingface.co/datasets/huggingchat/models-logo/resolve/main/cohere-logo.png",
    "endpoints": [{
      "type": "cohere",
      "apiKey": "YOUR_API_KEY"
    }]
  }
]`
```

## Adding Tools

Tool implementations are placed in `src/lib/server/tools`, with helpers available for easy integration with HuggingFace Zero GPU spaces. In the future, there may be an OpenAPI interface for adding tools.

## Adding Support for Additional Models

The TGI implementation uses a custom tokenizer and hard coded schema for supporting tools. The Cohere implementation, on the other hand, uses the native support in the SDK to emit tool calls. This is the recommended way to add support for more models. Please see the `endpoints/cohere` section of the code for implementation details.

</docs/source/configuration/models/tools.md>

<docs/source/configuration/open-id.md>
# OpenID

The login feature is disabled by default and users are attributed a unique ID based on their browser. But if you want to use OpenID to authenticate your users, you can add the following to your `.env.local` file:

```ini
OPENID_CONFIG=`{
  PROVIDER_URL: "<your OIDC issuer>",
  CLIENT_ID: "<your OIDC client ID>",
  CLIENT_SECRET: "<your OIDC client secret>",
  SCOPES: "openid profile",
  TOLERANCE: // optional
  RESOURCE: // optional
}`
```

Redirect URI: `/login/callback`

</docs/source/configuration/open-id.md>

<docs/source/configuration/theming.md>
# Theming

You can use a few environment variables to customize the look and feel of Chat UI. These are by default:

```ini
PUBLIC_APP_NAME=ChatUI
PUBLIC_APP_ASSETS=chatui
PUBLIC_APP_COLOR=blue
PUBLIC_APP_DESCRIPTION="Making the community's best AI chat models available to everyone."
PUBLIC_APP_DATA_SHARING=
PUBLIC_APP_DISCLAIMER=
```

- `PUBLIC_APP_NAME` The name used as a title throughout the app.
- `PUBLIC_APP_ASSETS` Is used to find logos & favicons in `static/$PUBLIC_APP_ASSETS`, current options are `chatui` and `huggingchat`.
- `PUBLIC_APP_COLOR` Can be any of the [tailwind colors](https://tailwindcss.com/docs/customizing-colors#default-color-palette).
- `PUBLIC_APP_DATA_SHARING` Can be set to 1 to add a toggle in the user settings that lets your users opt-in to data sharing with models creator.
- `PUBLIC_APP_DISCLAIMER` If set to 1, we show a disclaimer about generated outputs on login.

</docs/source/configuration/theming.md>

<docs/source/configuration/metrics.md>
# Metrics

The server can expose prometheus metrics on port `5565` but is off by default. You may enable the metrics server with `METRICS_ENABLED=true` and change the port with `METRICS_PORT=1234`.

<Tip>

In development with `npm run dev`, the metrics server does not shutdown gracefully due to Sveltekit not providing hooks for restart. It's recommended to disable the metrics server in this case.

</Tip>

</docs/source/configuration/metrics.md>

<docs/source/developing/architecture.md>
# Architecture

This document discusses the high level overview of the Chat UI codebase. If you're looking to contribute or just want to understand how the codebase works, this is the place for you!

## Overview

Chat UI provides a simple interface connecting LLMs to external information and tools. The project uses [MongoDB](https://www.mongodb.com/) and [SvelteKit](https://kit.svelte.dev/) with [Tailwind](https://tailwindcss.com/).

## Code Map

This section discusses various modules of the codebase briefly. The headings are not paths since the codebase structure may change.

### `routes`

Provides all of the routes rendered with SSR via SvelteKit. The majority of backend and frontend logic can be found here, with some modules being pulled out into `lib` for the client and `lib/server` for the server.

### `textGeneration`

Provides a standard interface for most chat features such as model output, web search, assistants and tools. Outputs `MessageUpdate`s which provide fine-grained updates on the request status such as new tokens and web search results.

### `endpoints`/`embeddingEndpoints`

Provides a common streaming interface for many third party LLM and embedding providers.

### `websearch`

Implements web search querying and RAG. See the [Web Search](../configuration/web-search) section for more information.

### `tools`

Provides a common interface for external tools called by LLMs. See the [Tools](../configuration/models/tools) section for more information

### `migrations`

Includes all MongoDB migrations for maintaining backwards compatibility across schema changes. Any changes to the schema must include a migration

</docs/source/developing/architecture.md>

<docs/source/developing/copy-huggingchat.md>
# Copy HuggingChat

The config file for HuggingChat is stored in the `chart/env/prod.yaml` file. It is the source of truth for the environment variables used for our CI/CD pipeline. For HuggingChat, as we need to customize the app color, as well as the base path, we build a custom docker image. You can find the workflow here.

<Tip>

If you want to make changes to the model config used in production for HuggingChat, you should do so against `chart/env/prod.yaml`.

</Tip>

### Running a copy of HuggingChat locally

If you want to run an exact copy of HuggingChat locally, you will need to do the following first:

1. Create an [OAuth App on the hub](https://huggingface.co/settings/applications/new) with `openid profile email` permissions. Make sure to set the callback URL to something like `http://localhost:5173/chat/login/callback` which matches the right path for your local instance.
2. Create a [HF Token](https://huggingface.co/settings/tokens) with your Hugging Face account. You will need a Pro account to be able to access some of the larger models available through HuggingChat.
3. Create a free account with [serper.dev](https://serper.dev/) (you will get 2500 free search queries)
4. Run an instance of MongoDB, however you want. (Local or remote)

You can then create a new `.env.SECRET_CONFIG` file with the following content

```ini
MONGODB_URL=<link to your mongo DB from step 4>
HF_TOKEN=<your HF token from step 2>
OPENID_CONFIG=`{
  PROVIDER_URL: "https://huggingface.co",
  CLIENT_ID: "<your client ID from step 1>",
  CLIENT_SECRET: "<your client secret from step 1>",
}`
SERPER_API_KEY=<your serper API key from step 3>
MESSAGES_BEFORE_LOGIN=<can be any numerical value, or set to 0 to require login>
```

You can then run `npm run updateLocalEnv` in the root of chat-ui. This will create a `.env.local` file which combines the `chart/env/prod.yaml` and the `.env.SECRET_CONFIG` file. You can then run `npm run dev` to start your local instance of HuggingChat.

### Populate database

<Tip warning={true}>

The `MONGODB_URL` used for this script will be fetched from `.env.local`. Make sure it's correct! The command runs directly on the database.

</Tip>

You can populate the database using faker data using the `populate` script:

```bash
npm run populate <flags here>
```

At least one flag must be specified, the following flags are available:

- `reset` - resets the database
- `all` - populates all tables
- `users` - populates the users table
- `settings` - populates the settings table for existing users
- `assistants` - populates the assistants table for existing users
- `conversations` - populates the conversations table for existing users

For example, you could use it like so:

```bash
npm run populate reset
```

to clear out the database. Then login in the app to create your user and run the following command:

```bash
npm run populate users settings assistants conversations
```

to populate the database with fake data, including fake conversations and assistants for your user.

</docs/source/developing/copy-huggingchat.md>

<docs/source/_toctree.yml>
- local: index
  title: 🤗 Chat UI
- title: Installation
  sections:
    - local: installation/local
      title: Local
    - local: installation/spaces
      title: Spaces
    - local: installation/docker
      title: Docker
    - local: installation/helm
      title: Helm
- title: Configuration
  sections:
    - local: configuration/overview
      title: Overview
    - local: configuration/theming
      title: Theming
    - local: configuration/open-id
      title: OpenID
    - local: configuration/web-search
      title: Web Search
    - local: configuration/metrics
      title: Metrics
    - local: configuration/embeddings
      title: Text Embedding Models
    - title: Models
      sections:
        - local: configuration/models/overview
          title: Overview
        - local: configuration/models/multimodal
          title: Multimodal
        - local: configuration/models/tools
          title: Tools
        - title: Providers
          sections:
            - local: configuration/models/providers/anthropic
              title: Anthropic
            - local: configuration/models/providers/aws
              title: AWS
            - local: configuration/models/providers/cloudflare
              title: Cloudflare
            - local: configuration/models/providers/cohere
              title: Cohere
            - local: configuration/models/providers/google
              title: Google
            - local: configuration/models/providers/langserve
              title: Langserve
            - local: configuration/models/providers/llamacpp
              title: Llama.cpp
            - local: configuration/models/providers/ollama
              title: Ollama
            - local: configuration/models/providers/openai
              title: OpenAI
            - local: configuration/models/providers/tgi
              title: TGI
    - local: configuration/common-issues
      title: Common Issues
- title: Developing
  sections:
    - local: developing/architecture
      title: Architecture
    - local: developing/copy-huggingchat
      title: Copy HuggingChat

</docs/source/_toctree.yml>

<docs/source/installation/helm.md>
# Helm

<Tip warning={true}>

**We highly discourage using the chart**. The Helm chart is a work in progress and should be considered unstable. Breaking changes to the chart may be pushed without migration guides or notice. Contributions welcome!

</Tip>

For installation on Kubernetes, you may use the helm chart in `/chart`. Please note that no chart repository has been setup, so you'll need to clone the repository and install the chart by path. The production values may be found at `chart/env/prod.yaml`.

**Example values.yaml**

```yaml
replicas: 1

domain: example.com

service:
  type: ClusterIP

resources:
  requests:
    cpu: 100m
    memory: 2Gi
  limits:
    # Recommended to use large limits when web search is enabled
    cpu: "4"
    memory: 6Gi

envVars:
  MONGODB_URL: mongodb://chat-ui-mongo:27017
  # Ensure that your values.yaml will not leak anywhere
  # PRs welcome for a chart rework with envFrom support!
  HF_TOKEN: secret_token
```

</docs/source/installation/helm.md>

<docs/source/installation/docker.md>
# Running on Docker

Pre-built docker images are provided with and without MongoDB built in. Refer to the [configuration section](../configuration/overview) for env variables that must be provided. We recommend using the `--env-file` option to avoid leaking secrets into your shell history.

```bash
# Without built-in DB
docker run -p 3000:3000 --env-file .env.local --name chat-ui ghcr.io/huggingface/chat-ui

# With built-in DB
docker run -p 3000:3000 --env-file .env.local -v chat-ui:/data --name chat-ui ghcr.io/huggingface/chat-ui-db
```

</docs/source/installation/docker.md>

<docs/source/installation/spaces.md>
# Running on Huggingface Spaces

If you don't want to configure, setup, and launch your own Chat UI yourself, you can use this option as a fast deploy alternative.

You can deploy your own customized Chat UI instance with any supported [LLM](https://huggingface.co/models?pipeline_tag=text-generation) of your choice on [Hugging Face Spaces](https://huggingface.co/spaces). To do so, use the chat-ui template [available here](https://huggingface.co/new-space?template=huggingchat/chat-ui-template).

Set `HF_TOKEN` in [Space secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables) to deploy a model with gated access or a model in a private repository. It's also compatible with [Inference for PROs](https://huggingface.co/blog/inference-pro) curated list of powerful models with higher rate limits. Make sure to create your personal token first in your [User Access Tokens settings](https://huggingface.co/settings/tokens).

Read the full tutorial [here](https://huggingface.co/docs/hub/spaces-sdks-docker-chatui#chatui-on-spaces).

</docs/source/installation/spaces.md>

<docs/source/installation/local.md>
# Running Locally

You may start an instance locally for non-production use cases. For production use cases, please see the other installation options.

## Configuration

The default config for Chat UI is stored in the `.env` file. You will need to override some values to get Chat UI to run locally. Start by creating a `.env.local` file in the root of the repository as per the [configuration section](../configuration/overview). The bare minimum config you need to get Chat UI to run locally is the following:

```ini
MONGODB_URL=<the URL to your MongoDB instance>
HF_TOKEN=<your access token> # find your token at hf.co/settings/token
```

## Database

The chat history is stored in a MongoDB instance, and having a DB instance available is needed for Chat UI to work.

You can use a local MongoDB instance. The easiest way is to spin one up using docker with persistence:

```bash
docker run -d -p 27017:27017 -v mongo-chat-ui:/data --name mongo-chat-ui mongo:latest
```

In which case the url of your DB will be `MONGODB_URL=mongodb://localhost:27017`.

Alternatively, you can use a [free MongoDB Atlas](https://www.mongodb.com/pricing) instance for this, Chat UI should fit comfortably within their free tier. After which you can set the `MONGODB_URL` variable in `.env.local` to match your instance.

## Starting the server

```bash
npm ci # install dependencies
npm run build # build the project
npm run preview -- --open # start the server with & open your instance at http://localhost:4173
```

</docs/source/installation/local.md>

<docs/source/index.md>
# 🤗 Chat UI

Open source chat interface with support for tools, web search, multimodal and many API providers. The app uses MongoDB and SvelteKit behind the scenes. Try the live version of the app called [HuggingChat on hf.co/chat](https://huggingface.co/chat) or [setup your own instance](./installation/spaces).

🔧 **[Tools](./configuration/models/tools)**: Function calling with custom tools and support for [Zero GPU spaces](https://huggingface.co/spaces/enzostvs/zero-gpu-spaces)

🔍 **[Web Search](./configuration/web-search)**: Automated web search, scraping and RAG for all models

🐙 **[Multimodal](./configuration/models/multimodal)**: Accepts image file uploads on supported providers

👤 **[OpenID](./configuration/open-id)**: Optionally setup OpenID for user authentication

<div class="flex gap-x-4">

<div>
Tools
<div class="flex justify-center">
<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/tools-light.png" height="auto"/>
<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/tools-dark.png" height="auto"/>
</div>
</div>

<div>
Web Search
<div class="flex justify-center">
<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/websearch-light.png" height="auto"/>
<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/websearch-dark.png" height="auto"/>
</div>
</div>

</div>

## Quickstart

You can quickly have a locally running chat-ui & LLM text-generation server thanks to chat-ui's [llama.cpp server support](https://huggingface.co/docs/chat-ui/configuration/models/providers/llamacpp).

**Step 1 (Start llama.cpp server):**

```bash
# install llama.cpp
brew install llama.cpp
# start llama.cpp server (using hf.co/microsoft/Phi-3-mini-4k-instruct-gguf as an example)
llama-server --hf-repo microsoft/Phi-3-mini-4k-instruct-gguf --hf-file Phi-3-mini-4k-instruct-q4.gguf -c 4096
```

A local LLaMA.cpp HTTP Server will start on `http://localhost:8080`. Read more [here](https://huggingface.co/docs/chat-ui/configuration/models/providers/llamacpp).

**Step 2 (tell chat-ui to use local llama.cpp server):**

Add the following to your `.env.local`:

```ini
MODELS=`[
  {
    "name": "Local microsoft/Phi-3-mini-4k-instruct-gguf",
    "tokenizer": "microsoft/Phi-3-mini-4k-instruct-gguf",
    "preprompt": "",
    "chatPromptTemplate": "<s>{{preprompt}}{{#each messages}}{{#ifUser}}<|user|>\n{{content}}<|end|>\n<|assistant|>\n{{/ifUser}}{{#ifAssistant}}{{content}}<|end|>\n{{/ifAssistant}}{{/each}}",
    "parameters": {
      "stop": ["<|end|>", "<|endoftext|>", "<|assistant|>"],
      "temperature": 0.7,
      "max_new_tokens": 1024,
      "truncate": 3071
    },
    "endpoints": [{
      "type" : "llamacpp",
      "baseURL": "http://localhost:8080"
    }],
  },
]`
```

Read more [here](https://huggingface.co/docs/chat-ui/configuration/models/providers/llamacpp).

**Step 3 (make sure you have MongoDb running locally):**

```bash
docker run -d -p 27017:27017 --name mongo-chatui mongo:latest
```

Read more [here](https://github.com/huggingface/chat-ui?tab=Readme-ov-file#database).

**Step 4 (start chat-ui):**

```bash
git clone https://github.com/huggingface/chat-ui
cd chat-ui
npm install
npm run dev -- --open
```

Read more [here](https://github.com/huggingface/chat-ui?tab=readme-ov-file#launch).

<div class="flex justify-center">
<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/llamacpp-light.png" height="auto"/>
<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/llamacpp-dark.png" height="auto"/>
</div>

</docs/source/index.md>

<README.md>
---
title: chat-ui
emoji: 🔥
colorFrom: purple
colorTo: purple
sdk: docker
pinned: false
license: apache-2.0
base_path: /chat
app_port: 3000
failure_strategy: rollback
load_balancing_strategy: random
---

# Chat UI

**Find the docs at [hf.co/docs/chat-ui](https://huggingface.co/docs/chat-ui/index).**

![Chat UI repository thumbnail](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chatui-websearch.png)

A chat interface using open source models, eg OpenAssistant or Llama. It is a SvelteKit app and it powers the [HuggingChat app on hf.co/chat](https://huggingface.co/chat).

0. [Quickstart](#quickstart)
1. [No Setup Deploy](#no-setup-deploy)
2. [Setup](#setup)
3. [Launch](#launch)
4. [Web Search](#web-search)
5. [Text Embedding Models](#text-embedding-models)
6. [Extra parameters](#extra-parameters)
7. [Common issues](#common-issues)
8. [Deploying to a HF Space](#deploying-to-a-hf-space)
9. [Building](#building)

## Quickstart

You can quickly start a locally running chat-ui & LLM text-generation server thanks to chat-ui's [llama.cpp server support](https://huggingface.co/docs/chat-ui/configuration/models/providers/llamacpp).

**Step 1 (Start llama.cpp server):**

Install llama.cpp w/ brew (for Mac):

```bash
# install llama.cpp
brew install llama.cpp
```

or [build directly from the source](https://github.com/ggerganov/llama.cpp/blob/master/docs/build.md) for your target device:

```
git clone https://github.com/ggerganov/llama.cpp && cd llama.cpp && make
```

Next, start the server with the [LLM of your choice](https://huggingface.co/models?library=gguf):

```bash
# start llama.cpp server (using hf.co/microsoft/Phi-3-mini-4k-instruct-gguf as an example)
llama-server --hf-repo microsoft/Phi-3-mini-4k-instruct-gguf --hf-file Phi-3-mini-4k-instruct-q4.gguf -c 4096
```

A local LLaMA.cpp HTTP Server will start on `http://localhost:8080`. Read more [here](https://huggingface.co/docs/chat-ui/configuration/models/providers/llamacpp).

**Step 2 (tell chat-ui to use local llama.cpp server):**

Add the following to your `.env.local`:

```ini
MODELS=`[
  {
    "name": "Local microsoft/Phi-3-mini-4k-instruct-gguf",
    "tokenizer": "microsoft/Phi-3-mini-4k-instruct-gguf",
    "preprompt": "",
    "chatPromptTemplate": "<s>{{preprompt}}{{#each messages}}{{#ifUser}}<|user|>\n{{content}}<|end|>\n<|assistant|>\n{{/ifUser}}{{#ifAssistant}}{{content}}<|end|>\n{{/ifAssistant}}{{/each}}",
    "parameters": {
      "stop": ["<|end|>", "<|endoftext|>", "<|assistant|>"],
      "temperature": 0.7,
      "max_new_tokens": 1024,
      "truncate": 3071
    },
    "endpoints": [{
      "type" : "llamacpp",
      "baseURL": "http://localhost:8080"
    }],
  },
]`
```

Read more [here](https://huggingface.co/docs/chat-ui/configuration/models/providers/llamacpp).

**Step 3 (make sure you have MongoDb running locally):**

```bash
docker run -d -p 27017:27017 --name mongo-chatui mongo:latest
```

Read more [here](#database).

**Step 4 (start chat-ui):**

```bash
git clone https://github.com/huggingface/chat-ui
cd chat-ui
npm install
npm run dev -- --open
```

Read more [here](#launch).

<img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/chat-ui/llamacpp-dark.png" height="auto"/>

## No Setup Deploy

If you don't want to configure, setup, and launch your own Chat UI yourself, you can use this option as a fast deploy alternative.

You can deploy your own customized Chat UI instance with any supported [LLM](https://huggingface.co/models?pipeline_tag=text-generation&sort=trending) of your choice on [Hugging Face Spaces](https://huggingface.co/spaces). To do so, use the chat-ui template [available here](https://huggingface.co/new-space?template=huggingchat/chat-ui-template).

Set `HF_TOKEN` in [Space secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables) to deploy a model with gated access or a model in a private repository. It's also compatible with [Inference for PROs](https://huggingface.co/blog/inference-pro) curated list of powerful models with higher rate limits. Make sure to create your personal token first in your [User Access Tokens settings](https://huggingface.co/settings/tokens).

Read the full tutorial [here](https://huggingface.co/docs/hub/spaces-sdks-docker-chatui#chatui-on-spaces).

## Setup

The default config for Chat UI is stored in the `.env` file. You will need to override some values to get Chat UI to run locally. This is done in `.env.local`.

Start by creating a `.env.local` file in the root of the repository. The bare minimum config you need to get Chat UI to run locally is the following:

```env
MONGODB_URL=<the URL to your MongoDB instance>
HF_TOKEN=<your access token>
```

### Database

The chat history is stored in a MongoDB instance, and having a DB instance available is needed for Chat UI to work.

You can use a local MongoDB instance. The easiest way is to spin one up using docker:

```bash
docker run -d -p 27017:27017 --name mongo-chatui mongo:latest
```

In which case the url of your DB will be `MONGODB_URL=mongodb://localhost:27017`.

Alternatively, you can use a [free MongoDB Atlas](https://www.mongodb.com/pricing) instance for this, Chat UI should fit comfortably within their free tier. After which you can set the `MONGODB_URL` variable in `.env.local` to match your instance.

### Hugging Face Access Token

If you use a remote inference endpoint, you will need a Hugging Face access token to run Chat UI locally. You can get one from [your Hugging Face profile](https://huggingface.co/settings/tokens).

## Launch

After you're done with the `.env.local` file you can run Chat UI locally with:

```bash
npm install
npm run dev
```

## Web Search

Chat UI features a powerful Web Search feature. It works by:

1. Generating an appropriate search query from the user prompt.
2. Performing web search and extracting content from webpages.
3. Creating embeddings from texts using a text embedding model.
4. From these embeddings, find the ones that are closest to the user query using a vector similarity search. Specifically, we use `inner product` distance.
5. Get the corresponding texts to those closest embeddings and perform [Retrieval-Augmented Generation](https://huggingface.co/papers/2005.11401) (i.e. expand user prompt by adding those texts so that an LLM can use this information).

## Text Embedding Models

By default (for backward compatibility), when `TEXT_EMBEDDING_MODELS` environment variable is not defined, [transformers.js](https://huggingface.co/docs/transformers.js) embedding models will be used for embedding tasks, specifically, [Xenova/gte-small](https://huggingface.co/Xenova/gte-small) model.

You can customize the embedding model by setting `TEXT_EMBEDDING_MODELS` in your `.env.local` file. For example:

```env
TEXT_EMBEDDING_MODELS = `[
  {
    "name": "Xenova/gte-small",
    "displayName": "Xenova/gte-small",
    "description": "locally running embedding",
    "chunkCharLength": 512,
    "endpoints": [
      {"type": "transformersjs"}
    ]
  },
  {
    "name": "intfloat/e5-base-v2",
    "displayName": "intfloat/e5-base-v2",
    "description": "hosted embedding model",
    "chunkCharLength": 768,
    "preQuery": "query: ", # See https://huggingface.co/intfloat/e5-base-v2#faq
    "prePassage": "passage: ", # See https://huggingface.co/intfloat/e5-base-v2#faq
    "endpoints": [
      {
        "type": "tei",
        "url": "http://127.0.0.1:8080/",
        "authorization": "TOKEN_TYPE TOKEN" // optional authorization field. Example: "Basic VVNFUjpQQVNT"
      }
    ]
  }
]`
```

The required fields are `name`, `chunkCharLength` and `endpoints`.
Supported text embedding backends are: [`transformers.js`](https://huggingface.co/docs/transformers.js), [`TEI`](https://github.com/huggingface/text-embeddings-inference) and [`OpenAI`](https://platform.openai.com/docs/guides/embeddings). `transformers.js` models run locally as part of `chat-ui`, whereas `TEI` models run in a different environment & accessed through an API endpoint. `openai` models are accessed through the [OpenAI API](https://platform.openai.com/docs/guides/embeddings).

When more than one embedding models are supplied in `.env.local` file, the first will be used by default, and the others will only be used on LLM's which configured `embeddingModel` to the name of the model.

## Extra parameters

### OpenID connect

The login feature is disabled by default and users are attributed a unique ID based on their browser. But if you want to use OpenID to authenticate your users, you can add the following to your `.env.local` file:

```env
OPENID_CONFIG=`{
  PROVIDER_URL: "<your OIDC issuer>",
  CLIENT_ID: "<your OIDC client ID>",
  CLIENT_SECRET: "<your OIDC client secret>",
  SCOPES: "openid profile",
  TOLERANCE: // optional
  RESOURCE: // optional
}`
```

These variables will enable the openID sign-in modal for users.

### Trusted header authentication

You can set the env variable `TRUSTED_EMAIL_HEADER` to point to the header that contains the user's email address. This will allow you to authenticate users from the header. This setup is usually combined with a proxy that will be in front of chat-ui and will handle the auth and set the header.

> [!WARNING]
> Make sure to only allow requests to chat-ui through your proxy which handles authentication, otherwise users could authenticate as anyone by setting the header manually! Only set this up if you understand the implications and know how to do it correctly.

Here is a list of header names for common auth providers:

- Tailscale Serve: `Tailscale-User-Login`
- Cloudflare Access: `Cf-Access-Authenticated-User-Email`
- oauth2-proxy: `X-Forwarded-Email`

### Theming

You can use a few environment variables to customize the look and feel of chat-ui. These are by default:

```env
PUBLIC_APP_NAME=ChatUI
PUBLIC_APP_ASSETS=chatui
PUBLIC_APP_COLOR=blue
PUBLIC_APP_DESCRIPTION="Making the community's best AI chat models available to everyone."
PUBLIC_APP_DATA_SHARING=
PUBLIC_APP_DISCLAIMER=
```

- `PUBLIC_APP_NAME` The name used as a title throughout the app.
- `PUBLIC_APP_ASSETS` Is used to find logos & favicons in `static/$PUBLIC_APP_ASSETS`, current options are `chatui` and `huggingchat`.
- `PUBLIC_APP_COLOR` Can be any of the [tailwind colors](https://tailwindcss.com/docs/customizing-colors#default-color-palette).
- `PUBLIC_APP_DATA_SHARING` Can be set to 1 to add a toggle in the user settings that lets your users opt-in to data sharing with models creator.
- `PUBLIC_APP_DISCLAIMER` If set to 1, we show a disclaimer about generated outputs on login.

### Web Search config

You can enable the web search through an API by adding `YDC_API_KEY` ([docs.you.com](https://docs.you.com)) or `SERPER_API_KEY` ([serper.dev](https://serper.dev/)) or `SERPAPI_KEY` ([serpapi.com](https://serpapi.com/)) or `SERPSTACK_API_KEY` ([serpstack.com](https://serpstack.com/)) or `SEARCHAPI_KEY` ([searchapi.io](https://www.searchapi.io/)) to your `.env.local`.

You can also simply enable the local google websearch by setting `USE_LOCAL_WEBSEARCH=true` in your `.env.local` or specify a SearXNG instance by adding the query URL to `SEARXNG_QUERY_URL`.

You can enable javascript when parsing webpages to improve compatibility with `WEBSEARCH_JAVASCRIPT=true` at the cost of increased CPU usage. You'll want at least 4 cores when enabling.

### Custom models

You can customize the parameters passed to the model or even use a new model by updating the `MODELS` variable in your `.env.local`. The default one can be found in `.env` and looks like this :

```env
MODELS=`[
  {
    "name": "mistralai/Mistral-7B-Instruct-v0.2",
    "displayName": "mistralai/Mistral-7B-Instruct-v0.2",
    "description": "Mistral 7B is a new Apache 2.0 model, released by Mistral AI that outperforms Llama2 13B in benchmarks.",
    "websiteUrl": "https://mistral.ai/news/announcing-mistral-7b/",
    "preprompt": "",
    "chatPromptTemplate" : "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s>{{/ifAssistant}}{{/each}}",
    "parameters": {
      "temperature": 0.3,
      "top_p": 0.95,
      "repetition_penalty": 1.2,
      "top_k": 50,
      "truncate": 3072,
      "max_new_tokens": 1024,
      "stop": ["</s>"]
    },
    "promptExamples": [
      {
        "title": "Write an email from bullet list",
        "prompt": "As a restaurant owner, write a professional email to the supplier to get these products every week: \n\n- Wine (x10)\n- Eggs (x24)\n- Bread (x12)"
      }, {
        "title": "Code a snake game",
        "prompt": "Code a basic snake game in python, give explanations for each step."
      }, {
        "title": "Assist in a task",
        "prompt": "How do I make a delicious lemon cheesecake?"
      }
    ]
  }
]`

```

You can change things like the parameters, or customize the preprompt to better suit your needs. You can also add more models by adding more objects to the array, with different preprompts for example.

#### chatPromptTemplate

When querying the model for a chat response, the `chatPromptTemplate` template is used. `messages` is an array of chat messages, it has the format `[{ content: string }, ...]`. To identify if a message is a user message or an assistant message the `ifUser` and `ifAssistant` block helpers can be used.

The following is the default `chatPromptTemplate`, although newlines and indentiation have been added for readability. You can find the prompts used in production for HuggingChat [here](https://github.com/huggingface/chat-ui/blob/main/PROMPTS.md).

```prompt
{{preprompt}}
{{#each messages}}
  {{#ifUser}}{{@root.userMessageToken}}{{content}}{{@root.userMessageEndToken}}{{/ifUser}}
  {{#ifAssistant}}{{@root.assistantMessageToken}}{{content}}{{@root.assistantMessageEndToken}}{{/ifAssistant}}
{{/each}}
{{assistantMessageToken}}
```

#### Multi modal model

We currently support [IDEFICS](https://huggingface.co/blog/idefics) (hosted on TGI), OpenAI and Claude 3 as multimodal models. You can enable it by setting `multimodal: true` in your `MODELS` configuration. For IDEFICS, you must have a [PRO HF Api token](https://huggingface.co/settings/tokens). For OpenAI, see the [OpenAI section](#OpenAI). For Anthropic, see the [Anthropic section](#anthropic).

```env
    {
      "name": "HuggingFaceM4/idefics-80b-instruct",
      "multimodal" : true,
      "description": "IDEFICS is the new multimodal model by Hugging Face.",
      "preprompt": "",
      "chatPromptTemplate" : "{{#each messages}}{{#ifUser}}User: {{content}}{{/ifUser}}<end_of_utterance>\nAssistant: {{#ifAssistant}}{{content}}\n{{/ifAssistant}}{{/each}}",
      "parameters": {
        "temperature": 0.1,
        "top_p": 0.95,
        "repetition_penalty": 1.2,
        "top_k": 12,
        "truncate": 1000,
        "max_new_tokens": 1024,
        "stop": ["<end_of_utterance>", "User:", "\nUser:"]
      }
    }
```

#### Running your own models using a custom endpoint

If you want to, instead of hitting models on the Hugging Face Inference API, you can run your own models locally.

A good option is to hit a [text-generation-inference](https://github.com/huggingface/text-generation-inference) endpoint. This is what is done in the official [Chat UI Spaces Docker template](https://huggingface.co/new-space?template=huggingchat/chat-ui-template) for instance: both this app and a text-generation-inference server run inside the same container.

To do this, you can add your own endpoints to the `MODELS` variable in `.env.local`, by adding an `"endpoints"` key for each model in `MODELS`.

```env
{
// rest of the model config here
"endpoints": [{
  "type" : "tgi",
  "url": "https://HOST:PORT",
  }]
}
```

If `endpoints` are left unspecified, ChatUI will look for the model on the hosted Hugging Face inference API using the model name.

##### OpenAI API compatible models

Chat UI can be used with any API server that supports OpenAI API compatibility, for example [text-generation-webui](https://github.com/oobabooga/text-generation-webui/tree/main/extensions/openai), [LocalAI](https://github.com/go-skynet/LocalAI), [FastChat](https://github.com/lm-sys/FastChat/blob/main/docs/openai_api.md), [llama-cpp-python](https://github.com/abetlen/llama-cpp-python), and [ialacol](https://github.com/chenhunghan/ialacol) and [vllm](https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html).

The following example config makes Chat UI works with [text-generation-webui](https://github.com/oobabooga/text-generation-webui/tree/main/extensions/openai), the `endpoint.baseUrl` is the url of the OpenAI API compatible server, this overrides the baseUrl to be used by OpenAI instance. The `endpoint.completion` determine which endpoint to be used, default is `chat_completions` which uses `v1/chat/completions`, change to `endpoint.completion` to `completions` to use the `v1/completions` endpoint.

Parameters not supported by OpenAI (e.g., top_k, repetition_penalty, etc.) must be set in the extraBody of endpoints. Be aware that setting them in parameters will cause them to be omitted.

```
MODELS=`[
  {
    "name": "text-generation-webui",
    "id": "text-generation-webui",
    "parameters": {
      "temperature": 0.9,
      "top_p": 0.95,
      "max_new_tokens": 1024,
      "stop": []
    },
    "endpoints": [{
      "type" : "openai",
      "baseURL": "http://localhost:8000/v1",
      "extraBody": {
        "repetition_penalty": 1.2,
        "top_k": 50,
        "truncate": 1000
      }
    }]
  }
]`

```

The `openai` type includes official OpenAI models. You can add, for example, GPT4/GPT3.5 as a "openai" model:

```
OPENAI_API_KEY=#your openai api key here
MODELS=`[{
      "name": "gpt-4",
      "displayName": "GPT 4",
      "endpoints" : [{
        "type": "openai"
      }]
},
      {
      "name": "gpt-3.5-turbo",
      "displayName": "GPT 3.5 Turbo",
      "endpoints" : [{
        "type": "openai"
      }]
}]`
```

You may also consume any model provider that provides compatible OpenAI API endpoint. For example, you may self-host [Portkey](https://github.com/Portkey-AI/gateway) gateway and experiment with Claude or GPTs offered by Azure OpenAI. Example for Claude from Anthropic:

```
MODELS=`[{
  "name": "claude-2.1",
  "displayName": "Claude 2.1",
  "description": "Anthropic has been founded by former OpenAI researchers...",
  "parameters": {
      "temperature": 0.5,
      "max_new_tokens": 4096,
  },
  "endpoints": [
      {
          "type": "openai",
          "baseURL": "https://gateway.example.com/v1",
          "defaultHeaders": {
              "x-portkey-config": '{"provider":"anthropic","api_key":"sk-ant-abc...xyz"}'
          }
      }
  ]
}]`
```

Example for GPT 4 deployed on Azure OpenAI:

```
MODELS=`[{
  "id": "gpt-4-1106-preview",
  "name": "gpt-4-1106-preview",
  "displayName": "gpt-4-1106-preview",
  "parameters": {
      "temperature": 0.5,
      "max_new_tokens": 4096,
  },
  "endpoints": [
      {
          "type": "openai",
          "baseURL": "https://{resource-name}.openai.azure.com/openai/deployments/{deployment-id}",
          "defaultHeaders": {
              "api-key": "{api-key}"
          },
          "defaultQuery": {
              "api-version": "2023-05-15"
          }
      }
  ]
}]`
```

Or try Mistral from [Deepinfra](https://deepinfra.com/mistralai/Mistral-7B-Instruct-v0.1/api?example=openai-http):

> Note, apiKey can either be set custom per endpoint, or globally using `OPENAI_API_KEY` variable.

```
MODELS=`[{
  "name": "mistral-7b",
  "displayName": "Mistral 7B",
  "description": "A 7B dense Transformer, fast-deployed and easily customisable. Small, yet powerful for a variety of use cases. Supports English and code, and a 8k context window.",
  "parameters": {
      "temperature": 0.5,
      "max_new_tokens": 4096,
  },
  "endpoints": [
      {
          "type": "openai",
          "baseURL": "https://api.deepinfra.com/v1/openai",
          "apiKey": "abc...xyz"
      }
  ]
}]`
```

##### Llama.cpp API server

chat-ui also supports the llama.cpp API server directly without the need for an adapter. You can do this using the `llamacpp` endpoint type.

If you want to run Chat UI with llama.cpp, you can do the following, using [microsoft/Phi-3-mini-4k-instruct-gguf](https://huggingface.co/microsoft/Phi-3-mini-4k-instruct-gguf) as an example model:

```bash
# install llama.cpp
brew install llama.cpp
# start llama.cpp server
llama-server --hf-repo microsoft/Phi-3-mini-4k-instruct-gguf --hf-file Phi-3-mini-4k-instruct-q4.gguf -c 4096
```

```env
MODELS=`[
  {
      "name": "Local Zephyr",
      "chatPromptTemplate": "<|system|>\n{{preprompt}}</s>\n{{#each messages}}{{#ifUser}}<|user|>\n{{content}}</s>\n<|assistant|>\n{{/ifUser}}{{#ifAssistant}}{{content}}</s>\n{{/ifAssistant}}{{/each}}",
      "parameters": {
        "temperature": 0.1,
        "top_p": 0.95,
        "repetition_penalty": 1.2,
        "top_k": 50,
        "truncate": 1000,
        "max_new_tokens": 2048,
        "stop": ["</s>"]
      },
      "endpoints": [
        {
         "url": "http://127.0.0.1:8080",
         "type": "llamacpp"
        }
      ]
  }
]`
```

Start chat-ui with `npm run dev` and you should be able to chat with Zephyr locally.

#### Ollama

We also support the Ollama inference server. Spin up a model with

```cli
ollama run mistral
```

Then specify the endpoints like so:

```env
MODELS=`[
  {
      "name": "Ollama Mistral",
      "chatPromptTemplate": "<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}} {{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s> {{/ifAssistant}}{{/each}}",
      "parameters": {
        "temperature": 0.1,
        "top_p": 0.95,
        "repetition_penalty": 1.2,
        "top_k": 50,
        "truncate": 3072,
        "max_new_tokens": 1024,
        "stop": ["</s>"]
      },
      "endpoints": [
        {
         "type": "ollama",
         "url" : "http://127.0.0.1:11434",
         "ollamaName" : "mistral"
        }
      ]
  }
]`
```

#### Anthropic

We also support Anthropic models (including multimodal ones via `multmodal: true`) through the official SDK. You may provide your API key via the `ANTHROPIC_API_KEY` env variable, or alternatively, through the `endpoints.apiKey` as per the following example.

```
MODELS=`[
  {
      "name": "claude-3-haiku-20240307",
      "displayName": "Claude 3 Haiku",
      "description": "Fastest and most compact model for near-instant responsiveness",
      "multimodal": true,
      "parameters": {
        "max_new_tokens": 4096,
      },
      "endpoints": [
        {
          "type": "anthropic",
          // optionals
          "apiKey": "sk-ant-...",
          "baseURL": "https://api.anthropic.com",
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
  {
      "name": "claude-3-sonnet-20240229",
      "displayName": "Claude 3 Sonnet",
      "description": "Ideal balance of intelligence and speed",
      "multimodal": true,
      "parameters": {
        "max_new_tokens": 4096,
      },
      "endpoints": [
        {
          "type": "anthropic",
          // optionals
          "apiKey": "sk-ant-...",
          "baseURL": "https://api.anthropic.com",
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
  {
      "name": "claude-3-opus-20240229",
      "displayName": "Claude 3 Opus",
      "description": "Most powerful model for highly complex tasks",
      "multimodal": true,
      "parameters": {
         "max_new_tokens": 4096
      },
      "endpoints": [
        {
          "type": "anthropic",
          // optionals
          "apiKey": "sk-ant-...",
          "baseURL": "https://api.anthropic.com",
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  }
]`
```

We also support using Anthropic models running on Vertex AI. Authentication is done using Google Application Default Credentials. Project ID can be provided through the `endpoints.projectId` as per the following example:

```
MODELS=`[
  {
      "name": "claude-3-sonnet@20240229",
      "displayName": "Claude 3 Sonnet",
      "description": "Ideal balance of intelligence and speed",
      "multimodal": true,
      "parameters": {
        "max_new_tokens": 4096,
      },
      "endpoints": [
        {
          "type": "anthropic-vertex",
          "region": "us-central1",
          "projectId": "gcp-project-id",
          // optionals
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  },
  {
      "name": "claude-3-haiku@20240307",
      "displayName": "Claude 3 Haiku",
      "description": "Fastest, most compact model for near-instant responsiveness",
      "multimodal": true,
      "parameters": {
         "max_new_tokens": 4096
      },
      "endpoints": [
        {
          "type": "anthropic-vertex",
          "region": "us-central1",
          "projectId": "gcp-project-id",
          // optionals
          "defaultHeaders": {},
          "defaultQuery": {}
        }
      ]
  }
]`
```

#### Amazon

You can also specify your Amazon SageMaker instance as an endpoint for chat-ui. The config goes like this:

```env
"endpoints": [
    {
      "type" : "aws",
      "service" : "sagemaker"
      "url": "",
      "accessKey": "",
      "secretKey" : "",
      "sessionToken": "",
      "region": "",

      "weight": 1
    }
]
```

You can also set `"service" : "lambda"` to use a lambda instance.

You can get the `accessKey` and `secretKey` from your AWS user, under programmatic access.

#### Cloudflare Workers AI

You can also use Cloudflare Workers AI to run your own models with serverless inference.

You will need to have a Cloudflare account, then get your [account ID](https://developers.cloudflare.com/fundamentals/setup/find-account-and-zone-ids/) as well as your [API token](https://developers.cloudflare.com/workers-ai/get-started/rest-api/#1-get-an-api-token) for Workers AI.

You can either specify them directly in your `.env.local` using the `CLOUDFLARE_ACCOUNT_ID` and `CLOUDFLARE_API_TOKEN` variables, or you can set them directly in the endpoint config.

You can find the list of models available on Cloudflare [here](https://developers.cloudflare.com/workers-ai/models/#text-generation).

```env
  {
  "name" : "nousresearch/hermes-2-pro-mistral-7b",
  "tokenizer": "nousresearch/hermes-2-pro-mistral-7b",
  "parameters": {
    "stop": ["<|im_end|>"]
  },
  "endpoints" : [
    {
      "type" : "cloudflare"
      <!-- optionally specify these
      "accountId": "your-account-id",
      "authToken": "your-api-token"
      -->
    }
  ]
}
```

#### Cohere

You can also use Cohere to run their models directly from chat-ui. You will need to have a Cohere account, then get your [API token](https://dashboard.cohere.com/api-keys). You can either specify it directly in your `.env.local` using the `COHERE_API_TOKEN` variable, or you can set it in the endpoint config.

Here is an example of a Cohere model config. You can set which model you want to use by setting the `id` field to the model name.

```env
  {
    "name" : "CohereForAI/c4ai-command-r-v01",
    "id": "command-r",
    "description": "C4AI Command-R is a research release of a 35 billion parameter highly performant generative model",
    "endpoints": [
      {
        "type": "cohere",
        <!-- optionally specify these, or use COHERE_API_TOKEN
        "apiKey": "your-api-token"
        -->
      }
    ]
  }
```

##### Google Vertex models

Chat UI can connect to the google Vertex API endpoints ([List of supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models)).

To enable:

1. [Select](https://console.cloud.google.com/project) or [create](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project) a Google Cloud project.
1. [Enable billing for your project](https://cloud.google.com/billing/docs/how-to/modify-project).
1. [Enable the Vertex AI API](https://console.cloud.google.com/flows/enableapi?apiid=aiplatform.googleapis.com).
1. [Set up authentication with a service account](https://cloud.google.com/docs/authentication/getting-started)
   so you can access the API from your local workstation.

The service account credentials file can be imported as an environmental variable:

```env
    GOOGLE_APPLICATION_CREDENTIALS = clientid.json
```

Make sure your docker container has access to the file and the variable is correctly set.
Afterwards Google Vertex endpoints can be configured as following:

```
MODELS=`[
//...
    {
       "name": "gemini-1.5-pro",
       "displayName": "Vertex Gemini Pro 1.5",
       "multimodal": true,
       "endpoints" : [{
          "type": "vertex",
          "project": "abc-xyz",
          "location": "europe-west3",
          "model": "gemini-1.5-pro-preview-0409", // model-name
          // Optional
          "safetyThreshold": "BLOCK_MEDIUM_AND_ABOVE",
          "apiEndpoint": "", // alternative api endpoint url,
          "tools": [{
            "googleSearchRetrieval": {
              "disableAttribution": true
            }
          }],
          "multimodal": {
            "image": {
              "supportedMimeTypes": ["image/png", "image/jpeg", "image/webp"],
              "preferredMimeType": "image/png",
              "maxSizeInMB": 5,
              "maxWidth": 2000,
              "maxHeight": 1000;
            }
          }
       }]
     },
]`

```

##### LangServe

LangChain applications that are deployed using LangServe can be called with the following config:

```
MODELS=`[
//...
    {
       "name": "summarization-chain", //model-name
       "endpoints" : [{
         "type": "langserve",
         "url" : "http://127.0.0.1:8100",
       }]
     },
]`

```

### Custom endpoint authorization

#### Basic and Bearer

Custom endpoints may require authorization, depending on how you configure them. Authentication will usually be set either with `Basic` or `Bearer`.

For `Basic` we will need to generate a base64 encoding of the username and password.

`echo -n "USER:PASS" | base64`

> VVNFUjpQQVNT

For `Bearer` you can use a token, which can be grabbed from [here](https://huggingface.co/settings/tokens).

You can then add the generated information and the `authorization` parameter to your `.env.local`.

```env
"endpoints": [
  {
    "url": "https://HOST:PORT",
    "authorization": "Basic VVNFUjpQQVNT",
  }
]
```

Please note that if `HF_TOKEN` is also set or not empty, it will take precedence.

#### Models hosted on multiple custom endpoints

If the model being hosted will be available on multiple servers/instances add the `weight` parameter to your `.env.local`. The `weight` will be used to determine the probability of requesting a particular endpoint.

```env
"endpoints": [
  {
    "url": "https://HOST:PORT",
    "weight": 1
  },
  {
    "url": "https://HOST:PORT",
    "weight": 2
  }
  ...
]
```

#### Client Certificate Authentication (mTLS)

Custom endpoints may require client certificate authentication, depending on how you configure them. To enable mTLS between Chat UI and your custom endpoint, you will need to set the `USE_CLIENT_CERTIFICATE` to `true`, and add the `CERT_PATH` and `KEY_PATH` parameters to your `.env.local`. These parameters should point to the location of the certificate and key files on your local machine. The certificate and key files should be in PEM format. The key file can be encrypted with a passphrase, in which case you will also need to add the `CLIENT_KEY_PASSWORD` parameter to your `.env.local`.

If you're using a certificate signed by a private CA, you will also need to add the `CA_PATH` parameter to your `.env.local`. This parameter should point to the location of the CA certificate file on your local machine.

If you're using a self-signed certificate, e.g. for testing or development purposes, you can set the `REJECT_UNAUTHORIZED` parameter to `false` in your `.env.local`. This will disable certificate validation, and allow Chat UI to connect to your custom endpoint.

#### Specific Embedding Model

A model can use any of the embedding models defined in `.env.local`, (currently used when web searching),
by default it will use the first embedding model, but it can be changed with the field `embeddingModel`:

```env
TEXT_EMBEDDING_MODELS = `[
  {
    "name": "Xenova/gte-small",
    "chunkCharLength": 512,
    "endpoints": [
      {"type": "transformersjs"}
    ]
  },
  {
    "name": "intfloat/e5-base-v2",
    "chunkCharLength": 768,
    "endpoints": [
      {"type": "tei", "url": "http://127.0.0.1:8080/", "authorization": "Basic VVNFUjpQQVNT"},
      {"type": "tei", "url": "http://127.0.0.1:8081/"}
    ]
  }
]`

MODELS=`[
  {
      "name": "Ollama Mistral",
      "chatPromptTemplate": "...",
      "embeddingModel": "intfloat/e5-base-v2"
      "parameters": {
        ...
      },
      "endpoints": [
        ...
      ]
  }
]`
```

## Common issues

### 403：You don't have access to this conversation

Most likely you are running chat-ui over HTTP. The recommended option is to setup something like NGINX to handle HTTPS and proxy the requests to chat-ui. If you really need to run over HTTP you can add `ALLOW_INSECURE_COOKIES=true` to your `.env.local`.

Make sure to set your `PUBLIC_ORIGIN` in your `.env.local` to the correct URL as well.

## Deploying to a HF Space

Create a `DOTENV_LOCAL` secret to your HF space with the content of your .env.local, and they will be picked up automatically when you run.

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://kit.svelte.dev/docs/adapters) for your target environment.

## Config changes for HuggingChat

The config file for HuggingChat is stored in the `chart/env/prod.yaml` file. It is the source of truth for the environment variables used for our CI/CD pipeline. For HuggingChat, as we need to customize the app color, as well as the base path, we build a custom docker image. You can find the workflow here.

> [!TIP]
> If you want to make changes to the model config used in production for HuggingChat, you should do so against `chart/env/prod.yaml`.

### Running a copy of HuggingChat locally

If you want to run an exact copy of HuggingChat locally, you will need to do the following first:

1. Create an [OAuth App on the hub](https://huggingface.co/settings/applications/new) with `openid profile email` permissions. Make sure to set the callback URL to something like `http://localhost:5173/chat/login/callback` which matches the right path for your local instance.
2. Create a [HF Token](https://huggingface.co/settings/tokens) with your Hugging Face account. You will need a Pro account to be able to access some of the larger models available through HuggingChat.
3. Create a free account with [serper.dev](https://serper.dev/) (you will get 2500 free search queries)
4. Run an instance of mongoDB, however you want. (Local or remote)

You can then create a new `.env.SECRET_CONFIG` file with the following content

```env
MONGODB_URL=<link to your mongo DB from step 4>
HF_TOKEN=<your HF token from step 2>
OPENID_CONFIG=`{
  PROVIDER_URL: "https://huggingface.co",
  CLIENT_ID: "<your client ID from step 1>",
  CLIENT_SECRET: "<your client secret from step 1>",
}`
SERPER_API_KEY=<your serper API key from step 3>
MESSAGES_BEFORE_LOGIN=<can be any numerical value, or set to 0 to require login>
```

You can then run `npm run updateLocalEnv` in the root of chat-ui. This will create a `.env.local` file which combines the `chart/env/prod.yaml` and the `.env.SECRET_CONFIG` file. You can then run `npm run dev` to start your local instance of HuggingChat.

### Populate database

> [!WARNING]
> The `MONGODB_URL` used for this script will be fetched from `.env.local`. Make sure it's correct! The command runs directly on the database.

You can populate the database using faker data using the `populate` script:

```bash
npm run populate <flags here>
```

At least one flag must be specified, the following flags are available:

- `reset` - resets the database
- `all` - populates all tables
- `users` - populates the users table
- `settings` - populates the settings table for existing users
- `assistants` - populates the assistants table for existing users
- `conversations` - populates the conversations table for existing users

For example, you could use it like so:

```bash
npm run populate reset
```

to clear out the database. Then login in the app to create your user and run the following command:

```bash
npm run populate users settings assistants conversations
```

to populate the database with fake data, including fake conversations and assistants for your user.

</README.md>

<package-lock.json>
{
	"name": "chat-ui",
	"version": "0.9.2",
	"lockfileVersion": 3,
	"requires": true,
	"packages": {
		"": {
			"name": "chat-ui",
			"version": "0.9.2",
			"dependencies": {
				"@aws-sdk/credential-providers": "^3.592.0",
				"@cliqz/adblocker-playwright": "^1.27.2",
				"@gradio/client": "^1.1.1",
				"@huggingface/hub": "^0.5.1",
				"@huggingface/inference": "^2.7.0",
				"@huggingface/transformers": "^3.0.0-alpha.6",
				"@iconify-json/bi": "^1.1.21",
				"@playwright/browser-chromium": "^1.43.1",
				"@resvg/resvg-js": "^2.6.2",
				"autoprefixer": "^10.4.14",
				"aws-sigv4-fetch": "^4.0.1",
				"aws4": "^1.13.0",
				"browser-image-resizer": "^2.4.1",
				"date-fns": "^2.29.3",
				"dotenv": "^16.0.3",
				"express": "^4.19.2",
				"file-type": "^19.4.1",
				"google-auth-library": "^9.13.0",
				"handlebars": "^4.7.8",
				"highlight.js": "^11.7.0",
				"husky": "^9.0.11",
				"image-size": "^1.0.2",
				"ip-address": "^9.0.5",
				"jose": "^5.3.0",
				"jsdom": "^22.0.0",
				"json5": "^2.2.3",
				"jsonpath": "^1.1.1",
				"lint-staged": "^15.2.7",
				"marked": "^12.0.1",
				"marked-katex-extension": "^5.0.1",
				"mongodb": "^5.8.0",
				"nanoid": "^4.0.2",
				"openid-client": "^5.4.2",
				"parquetjs": "^0.11.2",
				"pino": "^9.0.0",
				"pino-pretty": "^11.0.0",
				"playwright": "^1.44.1",
				"postcss": "^8.4.31",
				"saslprep": "^1.0.3",
				"satori": "^0.10.11",
				"satori-html": "^0.3.2",
				"sbd": "^1.0.19",
				"serpapi": "^1.1.1",
				"sharp": "^0.33.4",
				"tailwind-scrollbar": "^3.0.0",
				"tailwindcss": "^3.4.0",
				"uuid": "^10.0.0",
				"zod": "^3.22.3"
			},
			"devDependencies": {
				"@faker-js/faker": "^8.4.1",
				"@iconify-json/carbon": "^1.1.16",
				"@iconify-json/eos-icons": "^1.1.6",
				"@sveltejs/adapter-node": "^5.2.0",
				"@sveltejs/kit": "^2.5.20",
				"@tailwindcss/typography": "^0.5.9",
				"@types/dompurify": "^3.0.5",
				"@types/express": "^4.17.21",
				"@types/js-yaml": "^4.0.9",
				"@types/jsdom": "^21.1.1",
				"@types/jsonpath": "^0.2.4",
				"@types/minimist": "^1.2.5",
				"@types/node": "^22.1.0",
				"@types/parquetjs": "^0.10.3",
				"@types/sbd": "^1.0.5",
				"@types/uuid": "^9.0.8",
				"@typescript-eslint/eslint-plugin": "^6.x",
				"@typescript-eslint/parser": "^6.x",
				"dompurify": "^3.1.6",
				"eslint": "^8.28.0",
				"eslint-config-prettier": "^8.5.0",
				"eslint-plugin-svelte": "^2.30.0",
				"isomorphic-dompurify": "^2.13.0",
				"js-yaml": "^4.1.0",
				"minimist": "^1.2.8",
				"prettier": "^2.8.0",
				"prettier-plugin-svelte": "^2.10.1",
				"prettier-plugin-tailwindcss": "^0.2.7",
				"prom-client": "^15.1.2",
				"svelte": "^4.2.19",
				"svelte-check": "^3.8.5",
				"ts-node": "^10.9.1",
				"tslib": "^2.4.1",
				"typescript": "^5.0.0",
				"unplugin-icons": "^0.16.1",
				"vite": "^5.3.5",
				"vite-node": "^1.3.1",
				"vitest": "^0.31.0"
			},
			"optionalDependencies": {
				"@anthropic-ai/sdk": "^0.25.0",
				"@anthropic-ai/vertex-sdk": "^0.4.1",
				"@aws-sdk/client-bedrock-runtime": "^3.631.0",
				"@google-cloud/vertexai": "^1.1.0",
				"@google/generative-ai": "^0.14.1",
				"aws4fetch": "^1.0.17",
				"cohere-ai": "^7.9.0",
				"openai": "^4.44.0"
			}
		},
		"node_modules/@alloc/quick-lru": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
			"integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@ampproject/remapping": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
			"integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
			"dev": true,
			"dependencies": {
				"@jridgewell/gen-mapping": "^0.3.5",
				"@jridgewell/trace-mapping": "^0.3.24"
			},
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@antfu/install-pkg": {
			"version": "0.1.1",
			"resolved": "https://registry.npmjs.org/@antfu/install-pkg/-/install-pkg-0.1.1.tgz",
			"integrity": "sha512-LyB/8+bSfa0DFGC06zpCEfs89/XoWZwws5ygEa5D+Xsm3OfI+aXQ86VgVG7Acyef+rSZ5HE7J8rrxzrQeM3PjQ==",
			"dev": true,
			"dependencies": {
				"execa": "^5.1.1",
				"find-up": "^5.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/execa": {
			"version": "5.1.1",
			"resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
			"integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
			"dev": true,
			"dependencies": {
				"cross-spawn": "^7.0.3",
				"get-stream": "^6.0.0",
				"human-signals": "^2.1.0",
				"is-stream": "^2.0.0",
				"merge-stream": "^2.0.0",
				"npm-run-path": "^4.0.1",
				"onetime": "^5.1.2",
				"signal-exit": "^3.0.3",
				"strip-final-newline": "^2.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sindresorhus/execa?sponsor=1"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/get-stream": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
			"integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
			"dev": true,
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/human-signals": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
			"integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
			"dev": true,
			"engines": {
				"node": ">=10.17.0"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/is-stream": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
			"integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
			"dev": true,
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/mimic-fn": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
			"integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/npm-run-path": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
			"integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
			"dev": true,
			"dependencies": {
				"path-key": "^3.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/onetime": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
			"integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
			"dev": true,
			"dependencies": {
				"mimic-fn": "^2.1.0"
			},
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@antfu/install-pkg/node_modules/signal-exit": {
			"version": "3.0.7",
			"resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
			"integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
			"dev": true
		},
		"node_modules/@antfu/install-pkg/node_modules/strip-final-newline": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
			"integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/@antfu/utils": {
			"version": "0.7.10",
			"resolved": "https://registry.npmjs.org/@antfu/utils/-/utils-0.7.10.tgz",
			"integrity": "sha512-+562v9k4aI80m1+VuMHehNJWLOFjBnXn3tdOitzD0il5b7smkSBal4+a3oKiQTbrwMmN/TBUMDvbdoWDehgOww==",
			"dev": true,
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/@anthropic-ai/sdk": {
			"version": "0.25.2",
			"resolved": "https://registry.npmjs.org/@anthropic-ai/sdk/-/sdk-0.25.2.tgz",
			"integrity": "sha512-F1Hck/asswwidFLtGdMg3XYgRxEUfygNbpkq5KEaEGsHNaSfxeX18/uZGQCL0oQNcj/tYNx8BaFXVwRhFDi45g==",
			"optional": true,
			"dependencies": {
				"@types/node": "^18.11.18",
				"@types/node-fetch": "^2.6.4",
				"abort-controller": "^3.0.0",
				"agentkeepalive": "^4.2.1",
				"form-data-encoder": "1.7.2",
				"formdata-node": "^4.3.2",
				"node-fetch": "^2.6.7"
			}
		},
		"node_modules/@anthropic-ai/sdk/node_modules/@types/node": {
			"version": "18.19.50",
			"resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.50.tgz",
			"integrity": "sha512-xonK+NRrMBRtkL1hVCc3G+uXtjh1Al4opBLjqVmipe5ZAaBYWW6cNAiBVZ1BvmkBhep698rP3UM3aRAdSALuhg==",
			"optional": true,
			"dependencies": {
				"undici-types": "~5.26.4"
			}
		},
		"node_modules/@anthropic-ai/sdk/node_modules/undici-types": {
			"version": "5.26.5",
			"resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
			"integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
			"optional": true
		},
		"node_modules/@anthropic-ai/vertex-sdk": {
			"version": "0.4.1",
			"resolved": "https://registry.npmjs.org/@anthropic-ai/vertex-sdk/-/vertex-sdk-0.4.1.tgz",
			"integrity": "sha512-RT/2CWzqyAcJDZWxnNc1mXa7XiiHDaQ9aknfW4mIDw6zE+Zj/R2vCKpTb0dIwrmHYNOyKQNaD7Z1ynDt9oXFWA==",
			"optional": true,
			"dependencies": {
				"@anthropic-ai/sdk": ">=0.14 <1",
				"google-auth-library": "^9.4.2"
			}
		},
		"node_modules/@aws-crypto/crc32": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/crc32/-/crc32-5.2.0.tgz",
			"integrity": "sha512-nLbCWqQNgUiwwtFsen1AdzAtvuLRsQS8rYgMuxCrdKf9kOssamGLuPwyTY9wyYblNr9+1XM8v6zoDTPPSIeANg==",
			"optional": true,
			"dependencies": {
				"@aws-crypto/util": "^5.2.0",
				"@aws-sdk/types": "^3.222.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-crypto/sha256-browser": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/sha256-browser/-/sha256-browser-5.2.0.tgz",
			"integrity": "sha512-AXfN/lGotSQwu6HNcEsIASo7kWXZ5HYWvfOmSNKDsEqC4OashTp8alTmaz+F7TC2L083SFv5RdB+qU3Vs1kZqw==",
			"dependencies": {
				"@aws-crypto/sha256-js": "^5.2.0",
				"@aws-crypto/supports-web-crypto": "^5.2.0",
				"@aws-crypto/util": "^5.2.0",
				"@aws-sdk/types": "^3.222.0",
				"@aws-sdk/util-locate-window": "^3.0.0",
				"@smithy/util-utf8": "^2.0.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@aws-crypto/sha256-browser/node_modules/@smithy/is-array-buffer": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/is-array-buffer/-/is-array-buffer-2.2.0.tgz",
			"integrity": "sha512-GGP3O9QFD24uGeAXYUjwSTXARoqpZykHadOmA8G5vfJPK0/DC67qa//0qvqrJzL1xc8WQWX7/yc7fwudjPHPhA==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-crypto/sha256-browser/node_modules/@smithy/util-buffer-from": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-buffer-from/-/util-buffer-from-2.2.0.tgz",
			"integrity": "sha512-IJdWBbTcMQ6DA0gdNhh/BwrLkDR+ADW5Kr1aZmd4k3DIF6ezMV4R2NIAmT08wQJ3yUK82thHWmC/TnK/wpMMIA==",
			"dependencies": {
				"@smithy/is-array-buffer": "^2.2.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-crypto/sha256-browser/node_modules/@smithy/util-utf8": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-utf8/-/util-utf8-2.3.0.tgz",
			"integrity": "sha512-R8Rdn8Hy72KKcebgLiv8jQcQkXoLMOGGv5uI1/k0l+snqkOzQ1R0ChUBCxWMlBsFMekWjq0wRudIweFs7sKT5A==",
			"dependencies": {
				"@smithy/util-buffer-from": "^2.2.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-crypto/sha256-js": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/sha256-js/-/sha256-js-5.2.0.tgz",
			"integrity": "sha512-FFQQyu7edu4ufvIZ+OadFpHHOt+eSTBaYaki44c+akjg7qZg9oOQeLlk77F6tSYqjDAFClrHJk9tMf0HdVyOvA==",
			"dependencies": {
				"@aws-crypto/util": "^5.2.0",
				"@aws-sdk/types": "^3.222.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-crypto/supports-web-crypto": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/supports-web-crypto/-/supports-web-crypto-5.2.0.tgz",
			"integrity": "sha512-iAvUotm021kM33eCdNfwIN//F77/IADDSs58i+MDaOqFrVjZo9bAal0NK7HurRuWLLpF1iLX7gbWrjHjeo+YFg==",
			"dependencies": {
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@aws-crypto/util": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-5.2.0.tgz",
			"integrity": "sha512-4RkU9EsI6ZpBve5fseQlGNUWKMa1RLPQ1dnjnQoe07ldfIzcsGb5hC5W0Dm7u423KWzawlrpbjXBrXCEv9zazQ==",
			"dependencies": {
				"@aws-sdk/types": "^3.222.0",
				"@smithy/util-utf8": "^2.0.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@aws-crypto/util/node_modules/@smithy/is-array-buffer": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/is-array-buffer/-/is-array-buffer-2.2.0.tgz",
			"integrity": "sha512-GGP3O9QFD24uGeAXYUjwSTXARoqpZykHadOmA8G5vfJPK0/DC67qa//0qvqrJzL1xc8WQWX7/yc7fwudjPHPhA==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-crypto/util/node_modules/@smithy/util-buffer-from": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-buffer-from/-/util-buffer-from-2.2.0.tgz",
			"integrity": "sha512-IJdWBbTcMQ6DA0gdNhh/BwrLkDR+ADW5Kr1aZmd4k3DIF6ezMV4R2NIAmT08wQJ3yUK82thHWmC/TnK/wpMMIA==",
			"dependencies": {
				"@smithy/is-array-buffer": "^2.2.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-utf8/-/util-utf8-2.3.0.tgz",
			"integrity": "sha512-R8Rdn8Hy72KKcebgLiv8jQcQkXoLMOGGv5uI1/k0l+snqkOzQ1R0ChUBCxWMlBsFMekWjq0wRudIweFs7sKT5A==",
			"dependencies": {
				"@smithy/util-buffer-from": "^2.2.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/client-bedrock-runtime": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/client-bedrock-runtime/-/client-bedrock-runtime-3.645.0.tgz",
			"integrity": "sha512-a5UY1DT1F8HyTU0uwO0rgyBGPkn74QdUWvSaFz6mSX0rfEIVATtreSOZBiAptrZDfh1wPDJjz0CBA9FZVL75ag==",
			"optional": true,
			"dependencies": {
				"@aws-crypto/sha256-browser": "5.2.0",
				"@aws-crypto/sha256-js": "5.2.0",
				"@aws-sdk/client-sso-oidc": "3.645.0",
				"@aws-sdk/client-sts": "3.645.0",
				"@aws-sdk/core": "3.635.0",
				"@aws-sdk/credential-provider-node": "3.645.0",
				"@aws-sdk/middleware-host-header": "3.620.0",
				"@aws-sdk/middleware-logger": "3.609.0",
				"@aws-sdk/middleware-recursion-detection": "3.620.0",
				"@aws-sdk/middleware-user-agent": "3.645.0",
				"@aws-sdk/region-config-resolver": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@aws-sdk/util-user-agent-browser": "3.609.0",
				"@aws-sdk/util-user-agent-node": "3.614.0",
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/core": "^2.4.0",
				"@smithy/eventstream-serde-browser": "^3.0.6",
				"@smithy/eventstream-serde-config-resolver": "^3.0.3",
				"@smithy/eventstream-serde-node": "^3.0.5",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/hash-node": "^3.0.3",
				"@smithy/invalid-dependency": "^3.0.3",
				"@smithy/middleware-content-length": "^3.0.5",
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-body-length-node": "^3.0.0",
				"@smithy/util-defaults-mode-browser": "^3.0.15",
				"@smithy/util-defaults-mode-node": "^3.0.15",
				"@smithy/util-endpoints": "^2.0.5",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"@smithy/util-stream": "^3.1.3",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/client-cognito-identity": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/client-cognito-identity/-/client-cognito-identity-3.645.0.tgz",
			"integrity": "sha512-nBfWDzWBQI1NCHYqBAmiifhdnLRxQYozaq6OjTuRcALjYJbOdFV7t0w9FWGISOq1OnM7r8UdCXlr2bzdyU0tJA==",
			"dependencies": {
				"@aws-crypto/sha256-browser": "5.2.0",
				"@aws-crypto/sha256-js": "5.2.0",
				"@aws-sdk/client-sso-oidc": "3.645.0",
				"@aws-sdk/client-sts": "3.645.0",
				"@aws-sdk/core": "3.635.0",
				"@aws-sdk/credential-provider-node": "3.645.0",
				"@aws-sdk/middleware-host-header": "3.620.0",
				"@aws-sdk/middleware-logger": "3.609.0",
				"@aws-sdk/middleware-recursion-detection": "3.620.0",
				"@aws-sdk/middleware-user-agent": "3.645.0",
				"@aws-sdk/region-config-resolver": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@aws-sdk/util-user-agent-browser": "3.609.0",
				"@aws-sdk/util-user-agent-node": "3.614.0",
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/core": "^2.4.0",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/hash-node": "^3.0.3",
				"@smithy/invalid-dependency": "^3.0.3",
				"@smithy/middleware-content-length": "^3.0.5",
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-body-length-node": "^3.0.0",
				"@smithy/util-defaults-mode-browser": "^3.0.15",
				"@smithy/util-defaults-mode-node": "^3.0.15",
				"@smithy/util-endpoints": "^2.0.5",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/client-sagemaker": {
			"version": "3.646.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/client-sagemaker/-/client-sagemaker-3.646.0.tgz",
			"integrity": "sha512-y1ezoj2D4/pwlftyibkCIvkhHHyQzQOspl8wZFHYyYWcmPsB/fkEndh/1a3nYSMXtw+aduFv25Om9wtXXlH/HQ==",
			"optional": true,
			"dependencies": {
				"@aws-crypto/sha256-browser": "5.2.0",
				"@aws-crypto/sha256-js": "5.2.0",
				"@aws-sdk/client-sso-oidc": "3.645.0",
				"@aws-sdk/client-sts": "3.645.0",
				"@aws-sdk/core": "3.635.0",
				"@aws-sdk/credential-provider-node": "3.645.0",
				"@aws-sdk/middleware-host-header": "3.620.0",
				"@aws-sdk/middleware-logger": "3.609.0",
				"@aws-sdk/middleware-recursion-detection": "3.620.0",
				"@aws-sdk/middleware-user-agent": "3.645.0",
				"@aws-sdk/region-config-resolver": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@aws-sdk/util-user-agent-browser": "3.609.0",
				"@aws-sdk/util-user-agent-node": "3.614.0",
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/core": "^2.4.0",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/hash-node": "^3.0.3",
				"@smithy/invalid-dependency": "^3.0.3",
				"@smithy/middleware-content-length": "^3.0.5",
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-body-length-node": "^3.0.0",
				"@smithy/util-defaults-mode-browser": "^3.0.15",
				"@smithy/util-defaults-mode-node": "^3.0.15",
				"@smithy/util-endpoints": "^2.0.5",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"@smithy/util-utf8": "^3.0.0",
				"@smithy/util-waiter": "^3.1.2",
				"tslib": "^2.6.2",
				"uuid": "^9.0.1"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/client-sagemaker/node_modules/uuid": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
			"integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"optional": true,
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/@aws-sdk/client-sso": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/client-sso/-/client-sso-3.645.0.tgz",
			"integrity": "sha512-2rc8TjnsNddOeKQ/pfNN7deNvGLXAeKeYtHtGDAiM2qfTKxd2sNcAsZ+JCDLyshuD4xLM5fpUyR0X8As9EAouQ==",
			"dependencies": {
				"@aws-crypto/sha256-browser": "5.2.0",
				"@aws-crypto/sha256-js": "5.2.0",
				"@aws-sdk/core": "3.635.0",
				"@aws-sdk/middleware-host-header": "3.620.0",
				"@aws-sdk/middleware-logger": "3.609.0",
				"@aws-sdk/middleware-recursion-detection": "3.620.0",
				"@aws-sdk/middleware-user-agent": "3.645.0",
				"@aws-sdk/region-config-resolver": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@aws-sdk/util-user-agent-browser": "3.609.0",
				"@aws-sdk/util-user-agent-node": "3.614.0",
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/core": "^2.4.0",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/hash-node": "^3.0.3",
				"@smithy/invalid-dependency": "^3.0.3",
				"@smithy/middleware-content-length": "^3.0.5",
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-body-length-node": "^3.0.0",
				"@smithy/util-defaults-mode-browser": "^3.0.15",
				"@smithy/util-defaults-mode-node": "^3.0.15",
				"@smithy/util-endpoints": "^2.0.5",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/client-sso-oidc": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/client-sso-oidc/-/client-sso-oidc-3.645.0.tgz",
			"integrity": "sha512-X9ULtdk3cO+1ysurEkJ1MSnu6U00qodXx+IVual+1jXX4RYY1WmQmfo7uDKf6FFkz7wW1DAqU+GJIBNQr0YH8A==",
			"dependencies": {
				"@aws-crypto/sha256-browser": "5.2.0",
				"@aws-crypto/sha256-js": "5.2.0",
				"@aws-sdk/core": "3.635.0",
				"@aws-sdk/credential-provider-node": "3.645.0",
				"@aws-sdk/middleware-host-header": "3.620.0",
				"@aws-sdk/middleware-logger": "3.609.0",
				"@aws-sdk/middleware-recursion-detection": "3.620.0",
				"@aws-sdk/middleware-user-agent": "3.645.0",
				"@aws-sdk/region-config-resolver": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@aws-sdk/util-user-agent-browser": "3.609.0",
				"@aws-sdk/util-user-agent-node": "3.614.0",
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/core": "^2.4.0",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/hash-node": "^3.0.3",
				"@smithy/invalid-dependency": "^3.0.3",
				"@smithy/middleware-content-length": "^3.0.5",
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-body-length-node": "^3.0.0",
				"@smithy/util-defaults-mode-browser": "^3.0.15",
				"@smithy/util-defaults-mode-node": "^3.0.15",
				"@smithy/util-endpoints": "^2.0.5",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			},
			"peerDependencies": {
				"@aws-sdk/client-sts": "^3.645.0"
			}
		},
		"node_modules/@aws-sdk/client-sts": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/client-sts/-/client-sts-3.645.0.tgz",
			"integrity": "sha512-6azXYtvtnAsPf2ShN9vKynIYVcJOpo6IoVmoMAVgNaBJyllP+s/RORzranYZzckqfmrudSxtct4rVapjLWuAMg==",
			"dependencies": {
				"@aws-crypto/sha256-browser": "5.2.0",
				"@aws-crypto/sha256-js": "5.2.0",
				"@aws-sdk/client-sso-oidc": "3.645.0",
				"@aws-sdk/core": "3.635.0",
				"@aws-sdk/credential-provider-node": "3.645.0",
				"@aws-sdk/middleware-host-header": "3.620.0",
				"@aws-sdk/middleware-logger": "3.609.0",
				"@aws-sdk/middleware-recursion-detection": "3.620.0",
				"@aws-sdk/middleware-user-agent": "3.645.0",
				"@aws-sdk/region-config-resolver": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@aws-sdk/util-user-agent-browser": "3.609.0",
				"@aws-sdk/util-user-agent-node": "3.614.0",
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/core": "^2.4.0",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/hash-node": "^3.0.3",
				"@smithy/invalid-dependency": "^3.0.3",
				"@smithy/middleware-content-length": "^3.0.5",
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-body-length-node": "^3.0.0",
				"@smithy/util-defaults-mode-browser": "^3.0.15",
				"@smithy/util-defaults-mode-node": "^3.0.15",
				"@smithy/util-endpoints": "^2.0.5",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/core": {
			"version": "3.635.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/core/-/core-3.635.0.tgz",
			"integrity": "sha512-i1x/E/sgA+liUE1XJ7rj1dhyXpAKO1UKFUcTTHXok2ARjWTvszHnSXMOsB77aPbmn0fUp1JTx2kHUAZ1LVt5Bg==",
			"dependencies": {
				"@smithy/core": "^2.4.0",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/signature-v4": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-middleware": "^3.0.3",
				"fast-xml-parser": "4.4.1",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-cognito-identity": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-cognito-identity/-/credential-provider-cognito-identity-3.645.0.tgz",
			"integrity": "sha512-Z4By/90TaYQZO1dPR1udYhegFiOlSWnZsJOYSAk4Gdny26Tqb78xVLw9R/33CzFblXC4WVSt4gizXTQ/sYyHNg==",
			"dependencies": {
				"@aws-sdk/client-cognito-identity": "3.645.0",
				"@aws-sdk/types": "3.609.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-env": {
			"version": "3.620.1",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-env/-/credential-provider-env-3.620.1.tgz",
			"integrity": "sha512-ExuILJ2qLW5ZO+rgkNRj0xiAipKT16Rk77buvPP8csR7kkCflT/gXTyzRe/uzIiETTxM7tr8xuO9MP/DQXqkfg==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-http": {
			"version": "3.635.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-http/-/credential-provider-http-3.635.0.tgz",
			"integrity": "sha512-iJyRgEjOCQlBMXqtwPLIKYc7Bsc6nqjrZybdMDenPDa+kmLg7xh8LxHsu9088e+2/wtLicE34FsJJIfzu3L82g==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-stream": "^3.1.3",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-ini": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-ini/-/credential-provider-ini-3.645.0.tgz",
			"integrity": "sha512-LlZW0qwUwNlTaAIDCNpLbPsyXvS42pRIwF92fgtCQedmdnpN3XRUC6hcwSYI7Xru3GGKp3RnceOvsdOaRJORsw==",
			"dependencies": {
				"@aws-sdk/credential-provider-env": "3.620.1",
				"@aws-sdk/credential-provider-http": "3.635.0",
				"@aws-sdk/credential-provider-process": "3.620.1",
				"@aws-sdk/credential-provider-sso": "3.645.0",
				"@aws-sdk/credential-provider-web-identity": "3.621.0",
				"@aws-sdk/types": "3.609.0",
				"@smithy/credential-provider-imds": "^3.2.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			},
			"peerDependencies": {
				"@aws-sdk/client-sts": "^3.645.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-node": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-node/-/credential-provider-node-3.645.0.tgz",
			"integrity": "sha512-eGFFuNvLeXjCJf5OCIuSEflxUowmK+bCS+lK4M8ofsYOEGAivdx7C0UPxNjHpvM8wKd8vpMl5phTeS9BWX5jMQ==",
			"dependencies": {
				"@aws-sdk/credential-provider-env": "3.620.1",
				"@aws-sdk/credential-provider-http": "3.635.0",
				"@aws-sdk/credential-provider-ini": "3.645.0",
				"@aws-sdk/credential-provider-process": "3.620.1",
				"@aws-sdk/credential-provider-sso": "3.645.0",
				"@aws-sdk/credential-provider-web-identity": "3.621.0",
				"@aws-sdk/types": "3.609.0",
				"@smithy/credential-provider-imds": "^3.2.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-process": {
			"version": "3.620.1",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-process/-/credential-provider-process-3.620.1.tgz",
			"integrity": "sha512-hWqFMidqLAkaV9G460+1at6qa9vySbjQKKc04p59OT7lZ5cO5VH5S4aI05e+m4j364MBROjjk2ugNvfNf/8ILg==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-sso": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-sso/-/credential-provider-sso-3.645.0.tgz",
			"integrity": "sha512-d6XuChAl5NCsCrUexc6AFb4efPmb9+66iwPylKG+iMTMYgO1ackfy1Q2/f35jdn0jolkPkzKsVyfzsEVoID6ew==",
			"dependencies": {
				"@aws-sdk/client-sso": "3.645.0",
				"@aws-sdk/token-providers": "3.614.0",
				"@aws-sdk/types": "3.609.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/credential-provider-web-identity": {
			"version": "3.621.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-provider-web-identity/-/credential-provider-web-identity-3.621.0.tgz",
			"integrity": "sha512-w7ASSyfNvcx7+bYGep3VBgC3K6vEdLmlpjT7nSIHxxQf+WSdvy+HynwJosrpZax0sK5q0D1Jpn/5q+r5lwwW6w==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			},
			"peerDependencies": {
				"@aws-sdk/client-sts": "^3.621.0"
			}
		},
		"node_modules/@aws-sdk/credential-providers": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/credential-providers/-/credential-providers-3.645.0.tgz",
			"integrity": "sha512-6g9qMngrMCvHNsxmh/1urnWKrvaa2fv55b3bYwPxwJCYAvg/xc7bV8YHL7GS2rJpACG707k9G86DTW+Hab8bJA==",
			"dependencies": {
				"@aws-sdk/client-cognito-identity": "3.645.0",
				"@aws-sdk/client-sso": "3.645.0",
				"@aws-sdk/client-sts": "3.645.0",
				"@aws-sdk/credential-provider-cognito-identity": "3.645.0",
				"@aws-sdk/credential-provider-env": "3.620.1",
				"@aws-sdk/credential-provider-http": "3.635.0",
				"@aws-sdk/credential-provider-ini": "3.645.0",
				"@aws-sdk/credential-provider-node": "3.645.0",
				"@aws-sdk/credential-provider-process": "3.620.1",
				"@aws-sdk/credential-provider-sso": "3.645.0",
				"@aws-sdk/credential-provider-web-identity": "3.621.0",
				"@aws-sdk/types": "3.609.0",
				"@smithy/credential-provider-imds": "^3.2.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/middleware-host-header": {
			"version": "3.620.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/middleware-host-header/-/middleware-host-header-3.620.0.tgz",
			"integrity": "sha512-VMtPEZwqYrII/oUkffYsNWY9PZ9xpNJpMgmyU0rlDQ25O1c0Hk3fJmZRe6pEkAJ0omD7kLrqGl1DUjQVxpd/Rg==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/middleware-logger": {
			"version": "3.609.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/middleware-logger/-/middleware-logger-3.609.0.tgz",
			"integrity": "sha512-S62U2dy4jMDhDFDK5gZ4VxFdWzCtLzwbYyFZx2uvPYTECkepLUfzLic2BHg2Qvtu4QjX+oGE3P/7fwaGIsGNuQ==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/middleware-recursion-detection": {
			"version": "3.620.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/middleware-recursion-detection/-/middleware-recursion-detection-3.620.0.tgz",
			"integrity": "sha512-nh91S7aGK3e/o1ck64sA/CyoFw+gAYj2BDOnoNa6ouyCrVJED96ZXWbhye/fz9SgmNUZR2g7GdVpiLpMKZoI5w==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/middleware-user-agent": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/middleware-user-agent/-/middleware-user-agent-3.645.0.tgz",
			"integrity": "sha512-NpTAtqWK+49lRuxfz7st9for80r4NriCMK0RfdJSoPFVntjsSQiQ7+2nW2XL05uVY633e9DvCAw8YatX3zd1mw==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@aws-sdk/util-endpoints": "3.645.0",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/protocol-http": {
			"version": "3.374.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/protocol-http/-/protocol-http-3.374.0.tgz",
			"integrity": "sha512-9WpRUbINdGroV3HiZZIBoJvL2ndoWk39OfwxWs2otxByppJZNN14bg/lvCx5e8ggHUti7IBk5rb0nqQZ4m05pg==",
			"deprecated": "This package has moved to @smithy/protocol-http",
			"optional": true,
			"dependencies": {
				"@smithy/protocol-http": "^1.1.0",
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/protocol-http/node_modules/@smithy/protocol-http": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/protocol-http/-/protocol-http-1.2.0.tgz",
			"integrity": "sha512-GfGfruksi3nXdFok5RhgtOnWe5f6BndzYfmEXISD+5gAGdayFGpjWu5pIqIweTudMtse20bGbc+7MFZXT1Tb8Q==",
			"optional": true,
			"dependencies": {
				"@smithy/types": "^1.2.0",
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/protocol-http/node_modules/@smithy/types": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/types/-/types-1.2.0.tgz",
			"integrity": "sha512-z1r00TvBqF3dh4aHhya7nz1HhvCg4TRmw51fjMrh5do3h+ngSstt/yKlNbHeb9QxJmFbmN8KEVSWgb1bRvfEoA==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/region-config-resolver": {
			"version": "3.614.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/region-config-resolver/-/region-config-resolver-3.614.0.tgz",
			"integrity": "sha512-vDCeMXvic/LU0KFIUjpC3RiSTIkkvESsEfbVHiHH0YINfl8HnEqR5rj+L8+phsCeVg2+LmYwYxd5NRz4PHxt5g==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"@smithy/util-config-provider": "^3.0.0",
				"@smithy/util-middleware": "^3.0.3",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4": {
			"version": "3.374.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/signature-v4/-/signature-v4-3.374.0.tgz",
			"integrity": "sha512-2xLJvSdzcZZAg0lsDLUAuSQuihzK0dcxIK7WmfuJeF7DGKJFmp9czQmz5f3qiDz6IDQzvgK1M9vtJSVCslJbyQ==",
			"deprecated": "This package has moved to @smithy/signature-v4",
			"optional": true,
			"dependencies": {
				"@smithy/signature-v4": "^1.0.1",
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@aws-crypto/crc32": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/crc32/-/crc32-3.0.0.tgz",
			"integrity": "sha512-IzSgsrxUcsrejQbPVilIKy16kAT52EwB6zSaI+M3xxIhKh5+aldEyvI+z6erM7TCLB2BJsFrtHjp6/4/sr+3dA==",
			"optional": true,
			"dependencies": {
				"@aws-crypto/util": "^3.0.0",
				"@aws-sdk/types": "^3.222.0",
				"tslib": "^1.11.1"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@aws-crypto/crc32/node_modules/tslib": {
			"version": "1.14.1",
			"resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
			"integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
			"optional": true
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@aws-crypto/util": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-3.0.0.tgz",
			"integrity": "sha512-2OJlpeJpCR48CC8r+uKVChzs9Iungj9wkZrl8Z041DWEWvyIHILYKCPNzJghKsivj+S3mLo6BVc7mBNzdxA46w==",
			"optional": true,
			"dependencies": {
				"@aws-sdk/types": "^3.222.0",
				"@aws-sdk/util-utf8-browser": "^3.0.0",
				"tslib": "^1.11.1"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@aws-crypto/util/node_modules/tslib": {
			"version": "1.14.1",
			"resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
			"integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
			"optional": true
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/eventstream-codec": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/eventstream-codec/-/eventstream-codec-1.1.0.tgz",
			"integrity": "sha512-3tEbUb8t8an226jKB6V/Q2XU/J53lCwCzULuBPEaF4JjSh+FlCMp7TmogE/Aij5J9DwlsZ4VAD/IRDuQ/0ZtMw==",
			"optional": true,
			"dependencies": {
				"@aws-crypto/crc32": "3.0.0",
				"@smithy/types": "^1.2.0",
				"@smithy/util-hex-encoding": "^1.1.0",
				"tslib": "^2.5.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/is-array-buffer": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/is-array-buffer/-/is-array-buffer-1.1.0.tgz",
			"integrity": "sha512-twpQ/n+3OWZJ7Z+xu43MJErmhB/WO/mMTnqR6PwWQShvSJ/emx5d1N59LQZk6ZpTAeuRWrc+eHhkzTp9NFjNRQ==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/signature-v4": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/signature-v4/-/signature-v4-1.1.0.tgz",
			"integrity": "sha512-fDo3m7YqXBs7neciOePPd/X9LPm5QLlDMdIC4m1H6dgNLnXfLMFNIxEfPyohGA8VW9Wn4X8lygnPSGxDZSmp0Q==",
			"optional": true,
			"dependencies": {
				"@smithy/eventstream-codec": "^1.1.0",
				"@smithy/is-array-buffer": "^1.1.0",
				"@smithy/types": "^1.2.0",
				"@smithy/util-hex-encoding": "^1.1.0",
				"@smithy/util-middleware": "^1.1.0",
				"@smithy/util-uri-escape": "^1.1.0",
				"@smithy/util-utf8": "^1.1.0",
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/types": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/types/-/types-1.2.0.tgz",
			"integrity": "sha512-z1r00TvBqF3dh4aHhya7nz1HhvCg4TRmw51fjMrh5do3h+ngSstt/yKlNbHeb9QxJmFbmN8KEVSWgb1bRvfEoA==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/util-buffer-from": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-buffer-from/-/util-buffer-from-1.1.0.tgz",
			"integrity": "sha512-9m6NXE0ww+ra5HKHCHig20T+FAwxBAm7DIdwc/767uGWbRcY720ybgPacQNB96JMOI7xVr/CDa3oMzKmW4a+kw==",
			"optional": true,
			"dependencies": {
				"@smithy/is-array-buffer": "^1.1.0",
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/util-hex-encoding": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-hex-encoding/-/util-hex-encoding-1.1.0.tgz",
			"integrity": "sha512-7UtIE9eH0u41zpB60Jzr0oNCQ3hMJUabMcKRUVjmyHTXiWDE4vjSqN6qlih7rCNeKGbioS7f/y2Jgym4QZcKFg==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/util-middleware": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-middleware/-/util-middleware-1.1.0.tgz",
			"integrity": "sha512-6hhckcBqVgjWAqLy2vqlPZ3rfxLDhFWEmM7oLh2POGvsi7j0tHkbN7w4DFhuBExVJAbJ/qqxqZdRY6Fu7/OezQ==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/util-uri-escape": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-uri-escape/-/util-uri-escape-1.1.0.tgz",
			"integrity": "sha512-/jL/V1xdVRt5XppwiaEU8Etp5WHZj609n0xMTuehmCqdoOFbId1M+aEeDWZsQ+8JbEB/BJ6ynY2SlYmOaKtt8w==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/signature-v4/node_modules/@smithy/util-utf8": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-utf8/-/util-utf8-1.1.0.tgz",
			"integrity": "sha512-p/MYV+JmqmPyjdgyN2UxAeYDj9cBqCjp0C/NsTWnnjoZUVqoeZ6IrW915L9CAKWVECgv9lVQGc4u/yz26/bI1A==",
			"optional": true,
			"dependencies": {
				"@smithy/util-buffer-from": "^1.1.0",
				"tslib": "^2.5.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/@aws-sdk/token-providers": {
			"version": "3.614.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/token-providers/-/token-providers-3.614.0.tgz",
			"integrity": "sha512-okItqyY6L9IHdxqs+Z116y5/nda7rHxLvROxtAJdLavWTYDydxrZstImNgGWTeVdmc0xX2gJCI77UYUTQWnhRw==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			},
			"peerDependencies": {
				"@aws-sdk/client-sso-oidc": "^3.614.0"
			}
		},
		"node_modules/@aws-sdk/types": {
			"version": "3.609.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.609.0.tgz",
			"integrity": "sha512-+Tqnh9w0h2LcrUsdXyT1F8mNhXz+tVYBtP19LpeEGntmvHwa2XzvLUCWpoIAIVsHp5+HdB2X9Sn0KAtmbFXc2Q==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/util-endpoints": {
			"version": "3.645.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/util-endpoints/-/util-endpoints-3.645.0.tgz",
			"integrity": "sha512-Oe+xaU4ic4PB1k3pb5VTC1/MWES13IlgpaQw01bVHGfwP6Yv6zZOxizRzca2Y3E+AyR+nKD7vXtHRY+w3bi4bg==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-endpoints": "^2.0.5",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/util-locate-window": {
			"version": "3.568.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/util-locate-window/-/util-locate-window-3.568.0.tgz",
			"integrity": "sha512-3nh4TINkXYr+H41QaPelCceEB2FXP3fxp93YZXB/kqJvX0U9j0N0Uk45gvsjmEPzG8XxkPEeLIfT2I1M7A6Lig==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@aws-sdk/util-user-agent-browser": {
			"version": "3.609.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-3.609.0.tgz",
			"integrity": "sha512-fojPU+mNahzQ0YHYBsx0ZIhmMA96H+ZIZ665ObU9tl+SGdbLneVZVikGve+NmHTQwHzwkFsZYYnVKAkreJLAtA==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/types": "^3.3.0",
				"bowser": "^2.11.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@aws-sdk/util-user-agent-node": {
			"version": "3.614.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/util-user-agent-node/-/util-user-agent-node-3.614.0.tgz",
			"integrity": "sha512-15ElZT88peoHnq5TEoEtZwoXTXRxNrk60TZNdpl/TUBJ5oNJ9Dqb5Z4ryb8ofN6nm9aFf59GVAerFDz8iUoHBA==",
			"dependencies": {
				"@aws-sdk/types": "3.609.0",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			},
			"peerDependencies": {
				"aws-crt": ">=1.0.0"
			},
			"peerDependenciesMeta": {
				"aws-crt": {
					"optional": true
				}
			}
		},
		"node_modules/@aws-sdk/util-utf8-browser": {
			"version": "3.259.0",
			"resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.259.0.tgz",
			"integrity": "sha512-UvFa/vR+e19XookZF8RzFZBrw2EUkQWxiBW0yYQAhvk3C+QVGl0H3ouca8LDBlBfQKXwmW3huo/59H8rwb1wJw==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.3.1"
			}
		},
		"node_modules/@babel/runtime": {
			"version": "7.25.6",
			"resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.25.6.tgz",
			"integrity": "sha512-VBj9MYyDb9tuLq7yzqjgzt6Q+IBQLrGZfdjOekyEirZPHxXWoTSGUTMrpsfi58Up73d13NfYLv8HT9vmznjzhQ==",
			"dependencies": {
				"regenerator-runtime": "^0.14.0"
			},
			"engines": {
				"node": ">=6.9.0"
			}
		},
		"node_modules/@bundled-es-modules/cookie": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/@bundled-es-modules/cookie/-/cookie-2.0.0.tgz",
			"integrity": "sha512-Or6YHg/kamKHpxULAdSqhGqnWFneIXu1NKvvfBBzKGwpVsYuFIQ5aBPHDnnoR3ghW1nvSkALd+EF9iMtY7Vjxw==",
			"dependencies": {
				"cookie": "^0.5.0"
			}
		},
		"node_modules/@bundled-es-modules/cookie/node_modules/cookie": {
			"version": "0.5.0",
			"resolved": "https://registry.npmjs.org/cookie/-/cookie-0.5.0.tgz",
			"integrity": "sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/@bundled-es-modules/statuses": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/@bundled-es-modules/statuses/-/statuses-1.0.1.tgz",
			"integrity": "sha512-yn7BklA5acgcBr+7w064fGV+SGIFySjCKpqjcWgBAIfrAkY+4GQTJJHQMeT3V/sgz23VTEVV8TtOmkvJAhFVfg==",
			"dependencies": {
				"statuses": "^2.0.1"
			}
		},
		"node_modules/@bundled-es-modules/tough-cookie": {
			"version": "0.1.6",
			"resolved": "https://registry.npmjs.org/@bundled-es-modules/tough-cookie/-/tough-cookie-0.1.6.tgz",
			"integrity": "sha512-dvMHbL464C0zI+Yqxbz6kZ5TOEp7GLW+pry/RWndAR8MJQAXZ2rPmIs8tziTZjeIyhSNZgZbCePtfSbdWqStJw==",
			"dependencies": {
				"@types/tough-cookie": "^4.0.5",
				"tough-cookie": "^4.1.4"
			}
		},
		"node_modules/@cliqz/adblocker": {
			"version": "1.33.2",
			"resolved": "https://registry.npmjs.org/@cliqz/adblocker/-/adblocker-1.33.2.tgz",
			"integrity": "sha512-S6XHtSsn2+vvCgkqgmMuyZwGjXNfwQtPdzitrELzzNP881gbt7DDdbTBPAF50DOI2ZPDvkXfyoinbY5wEJPD+g==",
			"dependencies": {
				"@cliqz/adblocker-content": "^1.33.2",
				"@cliqz/adblocker-extended-selectors": "^1.33.2",
				"@remusao/guess-url-type": "^1.3.0",
				"@remusao/small": "^1.2.1",
				"@remusao/smaz": "^1.9.1",
				"@types/chrome": "^0.0.270",
				"@types/firefox-webext-browser": "^120.0.0",
				"tldts-experimental": "^6.0.14"
			}
		},
		"node_modules/@cliqz/adblocker-content": {
			"version": "1.33.2",
			"resolved": "https://registry.npmjs.org/@cliqz/adblocker-content/-/adblocker-content-1.33.2.tgz",
			"integrity": "sha512-OlLfenwU6sxo3/y6IPfnl9ou32IFwRzQXgHrLWZ0IjzcY8ZxpGlh97QcW1D9QyTPj3Ndub6vNJxsnMjNOWDd7g==",
			"dependencies": {
				"@cliqz/adblocker-extended-selectors": "^1.33.2"
			}
		},
		"node_modules/@cliqz/adblocker-extended-selectors": {
			"version": "1.33.2",
			"resolved": "https://registry.npmjs.org/@cliqz/adblocker-extended-selectors/-/adblocker-extended-selectors-1.33.2.tgz",
			"integrity": "sha512-SPL8vZyniuQ1kBmwM0KZyNNHnS8Nd6N0eoGDzkPJqkAW+ntT/v7MBXmlhKmpYhsh773uLZUjF5bSlTQprXtcdw=="
		},
		"node_modules/@cliqz/adblocker-playwright": {
			"version": "1.33.2",
			"resolved": "https://registry.npmjs.org/@cliqz/adblocker-playwright/-/adblocker-playwright-1.33.2.tgz",
			"integrity": "sha512-VtLbFxINOASJNQ9bpl32vULgwQQ/EOmCdWHHM0LLmUDA5pCtj0T0gkXYIHyK/MFV4q5RAQPnv2PYCvmHXyLJlQ==",
			"dependencies": {
				"@cliqz/adblocker": "^1.33.2",
				"@cliqz/adblocker-content": "^1.33.2",
				"tldts-experimental": "^6.0.14"
			},
			"peerDependencies": {
				"playwright": "^1.x"
			}
		},
		"node_modules/@cspotcode/source-map-support": {
			"version": "0.8.1",
			"resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
			"integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
			"devOptional": true,
			"dependencies": {
				"@jridgewell/trace-mapping": "0.3.9"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
			"version": "0.3.9",
			"resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
			"integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
			"devOptional": true,
			"dependencies": {
				"@jridgewell/resolve-uri": "^3.0.3",
				"@jridgewell/sourcemap-codec": "^1.4.10"
			}
		},
		"node_modules/@emnapi/runtime": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.2.0.tgz",
			"integrity": "sha512-bV21/9LQmcQeCPEg3BDFtvwL6cwiTMksYNWQQ4KOxCZikEGalWtenoZ0wCiukJINlGCIi2KXx01g4FoH/LxpzQ==",
			"optional": true,
			"dependencies": {
				"tslib": "^2.4.0"
			}
		},
		"node_modules/@esbuild/aix-ppc64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
			"integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"aix"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/android-arm": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
			"integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/android-arm64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
			"integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/android-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
			"integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/darwin-arm64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
			"integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/darwin-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
			"integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/freebsd-arm64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
			"integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/freebsd-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
			"integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-arm": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
			"integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-arm64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
			"integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-ia32": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
			"integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-loong64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
			"integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
			"cpu": [
				"loong64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-mips64el": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
			"integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
			"cpu": [
				"mips64el"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-ppc64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
			"integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-riscv64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
			"integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-s390x": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
			"integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/linux-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
			"integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/netbsd-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
			"integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"netbsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/openbsd-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
			"integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"openbsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/sunos-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
			"integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"sunos"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/win32-arm64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
			"integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/win32-ia32": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
			"integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@esbuild/win32-x64": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
			"integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@eslint-community/eslint-utils": {
			"version": "4.4.0",
			"resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
			"integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
			"dev": true,
			"dependencies": {
				"eslint-visitor-keys": "^3.3.0"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"peerDependencies": {
				"eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
			}
		},
		"node_modules/@eslint-community/regexpp": {
			"version": "4.11.0",
			"resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.0.tgz",
			"integrity": "sha512-G/M/tIiMrTAxEWRfLfQJMmGNX28IxBg4PBz8XqQhqUHLFI6TL2htpIB1iQCj144V5ee/JaKyT9/WZ0MGZWfA7A==",
			"dev": true,
			"engines": {
				"node": "^12.0.0 || ^14.0.0 || >=16.0.0"
			}
		},
		"node_modules/@eslint/eslintrc": {
			"version": "2.1.4",
			"resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
			"integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
			"dev": true,
			"dependencies": {
				"ajv": "^6.12.4",
				"debug": "^4.3.2",
				"espree": "^9.6.0",
				"globals": "^13.19.0",
				"ignore": "^5.2.0",
				"import-fresh": "^3.2.1",
				"js-yaml": "^4.1.0",
				"minimatch": "^3.1.2",
				"strip-json-comments": "^3.1.1"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/eslint"
			}
		},
		"node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
			"version": "1.1.11",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			"integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			"dev": true,
			"dependencies": {
				"balanced-match": "^1.0.0",
				"concat-map": "0.0.1"
			}
		},
		"node_modules/@eslint/eslintrc/node_modules/minimatch": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			"integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			"dev": true,
			"dependencies": {
				"brace-expansion": "^1.1.7"
			},
			"engines": {
				"node": "*"
			}
		},
		"node_modules/@eslint/js": {
			"version": "8.57.0",
			"resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
			"integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
			"dev": true,
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			}
		},
		"node_modules/@faker-js/faker": {
			"version": "8.4.1",
			"resolved": "https://registry.npmjs.org/@faker-js/faker/-/faker-8.4.1.tgz",
			"integrity": "sha512-XQ3cU+Q8Uqmrbf2e0cIC/QN43sTBSC8KF12u29Mb47tWrt2hAgBXSgpZMj4Ao8Uk0iJcU99QsOCaIL8934obCg==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/fakerjs"
				}
			],
			"engines": {
				"node": "^14.17.0 || ^16.13.0 || >=18.0.0",
				"npm": ">=6.14.13"
			}
		},
		"node_modules/@fastify/busboy": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-2.1.1.tgz",
			"integrity": "sha512-vBZP4NlzfOlerQTnba4aqZoMhE/a9HY7HRqoOPaETQcSQuWEIyZMHGfVu6w9wGtGK5fED5qRs2DteVCjOH60sA==",
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/@google-cloud/vertexai": {
			"version": "1.7.0",
			"resolved": "https://registry.npmjs.org/@google-cloud/vertexai/-/vertexai-1.7.0.tgz",
			"integrity": "sha512-N4YcVzFQ+sPN9c3SeMhbpLfWVbeaLxPbICKsJ6yKthcr4G7tdu9pCs3HUw+Mip0M2xgiKZ8/WWvq6FXbPnlrUA==",
			"optional": true,
			"dependencies": {
				"google-auth-library": "^9.1.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/@google/generative-ai": {
			"version": "0.14.1",
			"resolved": "https://registry.npmjs.org/@google/generative-ai/-/generative-ai-0.14.1.tgz",
			"integrity": "sha512-pevEyZCb0Oc+dYNlSberW8oZBm4ofeTD5wN01TowQMhTwdAbGAnJMtQzoklh6Blq2AKsx8Ox6FWa44KioZLZiA==",
			"optional": true,
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/@gradio/client": {
			"version": "1.5.2",
			"resolved": "https://registry.npmjs.org/@gradio/client/-/client-1.5.2.tgz",
			"integrity": "sha512-PJbt8n3ROxDXrR55D8oPYPIIkdmG5ksyljtgNM6Kr/FgTMTwGqiiYDdoyUIGwQSBu6g+jan2zbHoniDZePw3pg==",
			"dependencies": {
				"@types/eventsource": "^1.1.15",
				"bufferutil": "^4.0.7",
				"eventsource": "^2.0.2",
				"fetch-event-stream": "^0.1.5",
				"msw": "^2.2.1",
				"semiver": "^1.1.0",
				"textlinestream": "^1.1.1",
				"typescript": "^5.0.0",
				"ws": "^8.13.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/@huggingface/hub": {
			"version": "0.5.1",
			"resolved": "https://registry.npmjs.org/@huggingface/hub/-/hub-0.5.1.tgz",
			"integrity": "sha512-ZaE2gY8NY+XwIOL7+gBhPq19PXG4gbGSSJ7zwWLoq6MKP+nsgkQk/c7fBFrxgBwR6lNd0AJMHPRCjwTndqsqWQ==",
			"dependencies": {
				"hash-wasm": "^4.9.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@huggingface/inference": {
			"version": "2.8.0",
			"resolved": "https://registry.npmjs.org/@huggingface/inference/-/inference-2.8.0.tgz",
			"integrity": "sha512-Ti681P1qckcCAqgzmL53jBnluPuZGelmMIuXNjgAwC5+RIjF4S0SDQu6oy44ZTwekwNp2ETaZ2sXsOk+45aC4w==",
			"dependencies": {
				"@huggingface/tasks": "^0.11.2"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@huggingface/jinja": {
			"version": "0.3.0",
			"resolved": "https://registry.npmjs.org/@huggingface/jinja/-/jinja-0.3.0.tgz",
			"integrity": "sha512-GLJzso0M07ZncFkrJMIXVU4os6GFbPocD4g8fMQPMGJubf48FtGOsUORH2rtFdXPIPelz8SLBMn8ZRmOTwXm9Q==",
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@huggingface/tasks": {
			"version": "0.11.13",
			"resolved": "https://registry.npmjs.org/@huggingface/tasks/-/tasks-0.11.13.tgz",
			"integrity": "sha512-TqFEyFtKYAYwDg9h4XQMzoSxN2NMpwSnerPBx7Y4RbM1nHLM+CTXAUHcDY+hydcA5CoDDaBGzkHw+mttY3AmFQ=="
		},
		"node_modules/@huggingface/transformers": {
			"version": "3.0.0-alpha.14",
			"resolved": "https://registry.npmjs.org/@huggingface/transformers/-/transformers-3.0.0-alpha.14.tgz",
			"integrity": "sha512-yRTKOP+xcZqHtlr7WiMWrV+E+XvqfiVLF4wZAlD1ozf0O5LPXKdkd8bfxFogd5d1kDxPlEdCLCJ3l8ZTNfqRyA==",
			"dependencies": {
				"@huggingface/jinja": "^0.3.0",
				"onnxruntime-node": "1.19.0",
				"onnxruntime-web": "1.20.0-dev.20240827-1d059b8702",
				"sharp": "^0.33.5"
			}
		},
		"node_modules/@humanwhocodes/config-array": {
			"version": "0.11.14",
			"resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
			"integrity": "sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==",
			"deprecated": "Use @eslint/config-array instead",
			"dev": true,
			"dependencies": {
				"@humanwhocodes/object-schema": "^2.0.2",
				"debug": "^4.3.1",
				"minimatch": "^3.0.5"
			},
			"engines": {
				"node": ">=10.10.0"
			}
		},
		"node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
			"version": "1.1.11",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			"integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			"dev": true,
			"dependencies": {
				"balanced-match": "^1.0.0",
				"concat-map": "0.0.1"
			}
		},
		"node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			"integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			"dev": true,
			"dependencies": {
				"brace-expansion": "^1.1.7"
			},
			"engines": {
				"node": "*"
			}
		},
		"node_modules/@humanwhocodes/module-importer": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
			"integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
			"dev": true,
			"engines": {
				"node": ">=12.22"
			},
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/nzakas"
			}
		},
		"node_modules/@humanwhocodes/object-schema": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
			"integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
			"deprecated": "Use @eslint/object-schema instead",
			"dev": true
		},
		"node_modules/@iconify-json/bi": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@iconify-json/bi/-/bi-1.2.0.tgz",
			"integrity": "sha512-kaBV87cQlyeMkBBiMqsf3b43Nsxdk/rYKvR29dnktht57WUyHCnBAuH+ca/bscX856CzRpVX+sYs7arjrJD0qA==",
			"dependencies": {
				"@iconify/types": "*"
			}
		},
		"node_modules/@iconify-json/carbon": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/@iconify-json/carbon/-/carbon-1.2.1.tgz",
			"integrity": "sha512-dIMY6OOY9LnwR3kOqAtfz4phGFG+KNfESEwSL6muCprBelSlSPpRXtdqvEEO/qWhkf5AJ9hWrOV3Egi5Z2IuKA==",
			"dev": true,
			"dependencies": {
				"@iconify/types": "*"
			}
		},
		"node_modules/@iconify-json/eos-icons": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@iconify-json/eos-icons/-/eos-icons-1.2.0.tgz",
			"integrity": "sha512-grdfoS20Z4gWAzNPza7ytguNBWeTOkx4Y6aZHs149t2Z6AhW7zG3VWkkq6M+YuL2G8ugHnBw7ZxgazZ6oiMnIQ==",
			"dev": true,
			"dependencies": {
				"@iconify/types": "*"
			}
		},
		"node_modules/@iconify/types": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/@iconify/types/-/types-2.0.0.tgz",
			"integrity": "sha512-+wluvCrRhXrhyOmRDJ3q8mux9JkKy5SJ/v8ol2tu4FVjyYvtEzkc/3pK15ET6RKg4b4w4BmTk1+gsCUhf21Ykg=="
		},
		"node_modules/@iconify/utils": {
			"version": "2.1.32",
			"resolved": "https://registry.npmjs.org/@iconify/utils/-/utils-2.1.32.tgz",
			"integrity": "sha512-LeifFZPPKu28O3AEDpYJNdEbvS4/ojAPyIW+pF/vUpJTYnbTiXUHkCh0bwgFRzKvdpb8H4Fbfd/742++MF4fPQ==",
			"dev": true,
			"dependencies": {
				"@antfu/install-pkg": "^0.4.0",
				"@antfu/utils": "^0.7.10",
				"@iconify/types": "^2.0.0",
				"debug": "^4.3.6",
				"kolorist": "^1.8.0",
				"local-pkg": "^0.5.0",
				"mlly": "^1.7.1"
			}
		},
		"node_modules/@iconify/utils/node_modules/@antfu/install-pkg": {
			"version": "0.4.1",
			"resolved": "https://registry.npmjs.org/@antfu/install-pkg/-/install-pkg-0.4.1.tgz",
			"integrity": "sha512-T7yB5QNG29afhWVkVq7XeIMBa5U/vs9mX69YqayXypPRmYzUmzwnYltplHmPtZ4HPCn+sQKeXW8I47wCbuBOjw==",
			"dev": true,
			"dependencies": {
				"package-manager-detector": "^0.2.0",
				"tinyexec": "^0.3.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/@iconify/utils/node_modules/local-pkg": {
			"version": "0.5.0",
			"resolved": "https://registry.npmjs.org/local-pkg/-/local-pkg-0.5.0.tgz",
			"integrity": "sha512-ok6z3qlYyCDS4ZEU27HaU6x/xZa9Whf8jD4ptH5UZTQYZVYeb9bnZ3ojVhiJNLiXK1Hfc0GNbLXcmZ5plLDDBg==",
			"dev": true,
			"dependencies": {
				"mlly": "^1.4.2",
				"pkg-types": "^1.0.3"
			},
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/@img/sharp-darwin-arm64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.33.5.tgz",
			"integrity": "sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-darwin-arm64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-darwin-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.33.5.tgz",
			"integrity": "sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-darwin-x64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-libvips-darwin-arm64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.0.4.tgz",
			"integrity": "sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"darwin"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-darwin-x64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.0.4.tgz",
			"integrity": "sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"darwin"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-arm": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.0.5.tgz",
			"integrity": "sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==",
			"cpu": [
				"arm"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-arm64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.0.4.tgz",
			"integrity": "sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-s390x": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.0.4.tgz",
			"integrity": "sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==",
			"cpu": [
				"s390x"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linux-x64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.0.4.tgz",
			"integrity": "sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linuxmusl-arm64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.0.4.tgz",
			"integrity": "sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-libvips-linuxmusl-x64": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.0.4.tgz",
			"integrity": "sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-linux-arm": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.33.5.tgz",
			"integrity": "sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==",
			"cpu": [
				"arm"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-arm": "1.0.5"
			}
		},
		"node_modules/@img/sharp-linux-arm64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.33.5.tgz",
			"integrity": "sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-arm64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linux-s390x": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.33.5.tgz",
			"integrity": "sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==",
			"cpu": [
				"s390x"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-s390x": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linux-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.33.5.tgz",
			"integrity": "sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linux-x64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linuxmusl-arm64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.33.5.tgz",
			"integrity": "sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linuxmusl-arm64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-linuxmusl-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.33.5.tgz",
			"integrity": "sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-libvips-linuxmusl-x64": "1.0.4"
			}
		},
		"node_modules/@img/sharp-wasm32": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.33.5.tgz",
			"integrity": "sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==",
			"cpu": [
				"wasm32"
			],
			"optional": true,
			"dependencies": {
				"@emnapi/runtime": "^1.2.0"
			},
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-win32-ia32": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.33.5.tgz",
			"integrity": "sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==",
			"cpu": [
				"ia32"
			],
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@img/sharp-win32-x64": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.33.5.tgz",
			"integrity": "sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			}
		},
		"node_modules/@inquirer/confirm": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-3.2.0.tgz",
			"integrity": "sha512-oOIwPs0Dvq5220Z8lGL/6LHRTEr9TgLHmiI99Rj1PJ1p1czTys+olrgBqZk4E2qC0YTzeHprxSQmoHioVdJ7Lw==",
			"dependencies": {
				"@inquirer/core": "^9.1.0",
				"@inquirer/type": "^1.5.3"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@inquirer/core": {
			"version": "9.1.0",
			"resolved": "https://registry.npmjs.org/@inquirer/core/-/core-9.1.0.tgz",
			"integrity": "sha512-RZVfH//2ytTjmaBIzeKT1zefcQZzuruwkpTwwbe/i2jTl4o9M+iML5ChULzz6iw1Ok8iUBBsRCjY2IEbD8Ft4w==",
			"dependencies": {
				"@inquirer/figures": "^1.0.5",
				"@inquirer/type": "^1.5.3",
				"@types/mute-stream": "^0.0.4",
				"@types/node": "^22.5.2",
				"@types/wrap-ansi": "^3.0.0",
				"ansi-escapes": "^4.3.2",
				"cli-spinners": "^2.9.2",
				"cli-width": "^4.1.0",
				"mute-stream": "^1.0.0",
				"signal-exit": "^4.1.0",
				"strip-ansi": "^6.0.1",
				"wrap-ansi": "^6.2.0",
				"yoctocolors-cjs": "^2.1.2"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@inquirer/core/node_modules/ansi-escapes": {
			"version": "4.3.2",
			"resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
			"integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
			"dependencies": {
				"type-fest": "^0.21.3"
			},
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@inquirer/core/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
		},
		"node_modules/@inquirer/core/node_modules/is-fullwidth-code-point": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/@inquirer/core/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/@inquirer/core/node_modules/type-fest": {
			"version": "0.21.3",
			"resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
			"integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@inquirer/core/node_modules/wrap-ansi": {
			"version": "6.2.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
			"integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
			"dependencies": {
				"ansi-styles": "^4.0.0",
				"string-width": "^4.1.0",
				"strip-ansi": "^6.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/@inquirer/figures": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.5.tgz",
			"integrity": "sha512-79hP/VWdZ2UVc9bFGJnoQ/lQMpL74mGgzSYX1xUqCVk7/v73vJCMw1VuyWN1jGkZ9B3z7THAbySqGbCNefcjfA==",
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@inquirer/type": {
			"version": "1.5.3",
			"resolved": "https://registry.npmjs.org/@inquirer/type/-/type-1.5.3.tgz",
			"integrity": "sha512-xUQ14WQGR/HK5ei+2CvgcwoH9fQ4PgPGmVFSN0pc1+fVyDL3MREhyAY7nxEErSu6CkllBM3D7e3e+kOvtu+eIg==",
			"dependencies": {
				"mute-stream": "^1.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@isaacs/cliui": {
			"version": "8.0.2",
			"resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
			"integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
			"dependencies": {
				"string-width": "^5.1.2",
				"string-width-cjs": "npm:string-width@^4.2.0",
				"strip-ansi": "^7.0.1",
				"strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
				"wrap-ansi": "^8.1.0",
				"wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/@isaacs/cliui/node_modules/ansi-regex": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
			"integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/@isaacs/cliui/node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/@isaacs/fs-minipass": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
			"integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
			"dependencies": {
				"minipass": "^7.0.4"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/@jridgewell/gen-mapping": {
			"version": "0.3.5",
			"resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
			"integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
			"dependencies": {
				"@jridgewell/set-array": "^1.2.1",
				"@jridgewell/sourcemap-codec": "^1.4.10",
				"@jridgewell/trace-mapping": "^0.3.24"
			},
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/resolve-uri": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
			"integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/set-array": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
			"integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/@jridgewell/sourcemap-codec": {
			"version": "1.5.0",
			"resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
			"integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ=="
		},
		"node_modules/@jridgewell/trace-mapping": {
			"version": "0.3.25",
			"resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
			"integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
			"dependencies": {
				"@jridgewell/resolve-uri": "^3.1.0",
				"@jridgewell/sourcemap-codec": "^1.4.14"
			}
		},
		"node_modules/@mongodb-js/saslprep": {
			"version": "1.1.9",
			"resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.1.9.tgz",
			"integrity": "sha512-tVkljjeEaAhCqTzajSdgbQ6gE6f3oneVwa3iXR6csiEwXXOFsiC6Uh9iAjAhXPtqa/XMDHWjjeNH/77m/Yq2dw==",
			"optional": true,
			"dependencies": {
				"sparse-bitfield": "^3.0.3"
			}
		},
		"node_modules/@mswjs/interceptors": {
			"version": "0.35.0",
			"resolved": "https://registry.npmjs.org/@mswjs/interceptors/-/interceptors-0.35.0.tgz",
			"integrity": "sha512-f5cHyIvm4m4g1I5x9EH1etGx0puaU0OaX2szqGRVBVgUC6aMASlOI5hbpe7tJ9l4/VWjCUu5OMraCazLZGI24A==",
			"dependencies": {
				"@open-draft/deferred-promise": "^2.2.0",
				"@open-draft/logger": "^0.3.0",
				"@open-draft/until": "^2.0.0",
				"is-node-process": "^1.2.0",
				"outvariant": "^1.4.3",
				"strict-event-emitter": "^0.5.1"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@nodelib/fs.scandir": {
			"version": "2.1.5",
			"resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
			"integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
			"dependencies": {
				"@nodelib/fs.stat": "2.0.5",
				"run-parallel": "^1.1.9"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/@nodelib/fs.stat": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
			"integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/@nodelib/fs.walk": {
			"version": "1.2.8",
			"resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
			"integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
			"dependencies": {
				"@nodelib/fs.scandir": "2.1.5",
				"fastq": "^1.6.0"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/@open-draft/deferred-promise": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/@open-draft/deferred-promise/-/deferred-promise-2.2.0.tgz",
			"integrity": "sha512-CecwLWx3rhxVQF6V4bAgPS5t+So2sTbPgAzafKkVizyi7tlwpcFpdFqq+wqF2OwNBmqFuu6tOyouTuxgpMfzmA=="
		},
		"node_modules/@open-draft/logger": {
			"version": "0.3.0",
			"resolved": "https://registry.npmjs.org/@open-draft/logger/-/logger-0.3.0.tgz",
			"integrity": "sha512-X2g45fzhxH238HKO4xbSr7+wBS8Fvw6ixhTDuvLd5mqh6bJJCFAPwU9mPDxbcrRtfxv4u5IHCEH77BmxvXmmxQ==",
			"dependencies": {
				"is-node-process": "^1.2.0",
				"outvariant": "^1.4.0"
			}
		},
		"node_modules/@open-draft/until": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/@open-draft/until/-/until-2.1.0.tgz",
			"integrity": "sha512-U69T3ItWHvLwGg5eJ0n3I62nWuE6ilHlmz7zM0npLBRvPRd7e6NYmg54vvRtP5mZG7kZqZCFVdsTWo7BPtBujg=="
		},
		"node_modules/@opentelemetry/api": {
			"version": "1.9.0",
			"resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
			"integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
			"dev": true,
			"engines": {
				"node": ">=8.0.0"
			}
		},
		"node_modules/@pkgjs/parseargs": {
			"version": "0.11.0",
			"resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
			"integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
			"optional": true,
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/@playwright/browser-chromium": {
			"version": "1.47.0",
			"resolved": "https://registry.npmjs.org/@playwright/browser-chromium/-/browser-chromium-1.47.0.tgz",
			"integrity": "sha512-uMsRSflfEX1zDYdghRhUaLMnyoKqcVquOjo4cbIlqCpgNulDbRF7k9lUAWgobgIbefFz96a4v9/Fae+ngOuBHQ==",
			"hasInstallScript": true,
			"dependencies": {
				"playwright-core": "1.47.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/@polka/url": {
			"version": "1.0.0-next.25",
			"resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.25.tgz",
			"integrity": "sha512-j7P6Rgr3mmtdkeDGTe0E/aYyWEWVtc5yFXtHCRHs28/jptDEWfaVOc5T7cblqy1XKPPfCxJc/8DwQ5YgLOZOVQ==",
			"dev": true
		},
		"node_modules/@protobufjs/aspromise": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
			"integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ=="
		},
		"node_modules/@protobufjs/base64": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
			"integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg=="
		},
		"node_modules/@protobufjs/codegen": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
			"integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg=="
		},
		"node_modules/@protobufjs/eventemitter": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
			"integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q=="
		},
		"node_modules/@protobufjs/fetch": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
			"integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
			"dependencies": {
				"@protobufjs/aspromise": "^1.1.1",
				"@protobufjs/inquire": "^1.1.0"
			}
		},
		"node_modules/@protobufjs/float": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
			"integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ=="
		},
		"node_modules/@protobufjs/inquire": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
			"integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q=="
		},
		"node_modules/@protobufjs/path": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
			"integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA=="
		},
		"node_modules/@protobufjs/pool": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
			"integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw=="
		},
		"node_modules/@protobufjs/utf8": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
			"integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw=="
		},
		"node_modules/@remusao/guess-url-type": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/@remusao/guess-url-type/-/guess-url-type-1.3.0.tgz",
			"integrity": "sha512-SNSJGxH5ckvxb3EUHj4DqlAm/bxNxNv2kx/AESZva/9VfcBokwKNS+C4D1lQdWIDM1R3d3UG+xmVzlkNG8CPTQ=="
		},
		"node_modules/@remusao/small": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/@remusao/small/-/small-1.3.0.tgz",
			"integrity": "sha512-bydAhJI+ywmg5xMUcbqoR8KahetcfkFywEZpsyFZ8EBofilvWxbXnMSe4vnjDI1Y+SWxnNhR4AL/2BAXkf4b8A=="
		},
		"node_modules/@remusao/smaz": {
			"version": "1.10.0",
			"resolved": "https://registry.npmjs.org/@remusao/smaz/-/smaz-1.10.0.tgz",
			"integrity": "sha512-GQzCxmmMpLkyZwcwNgz8TpuBEWl0RUQa8IcvKiYlPxuyYKqyqPkCr0hlHI15ckn3kDUPS68VmTVgyPnLNrdVmg==",
			"dependencies": {
				"@remusao/smaz-compress": "^1.10.0",
				"@remusao/smaz-decompress": "^1.10.0"
			}
		},
		"node_modules/@remusao/smaz-compress": {
			"version": "1.10.0",
			"resolved": "https://registry.npmjs.org/@remusao/smaz-compress/-/smaz-compress-1.10.0.tgz",
			"integrity": "sha512-E/lC8OSU+3bQrUl64vlLyPzIxo7dxF2RvNBe9KzcM4ax43J/d+YMinmMztHyCIHqRbz7rBCtkp3c0KfeIbHmEg==",
			"dependencies": {
				"@remusao/trie": "^1.5.0"
			}
		},
		"node_modules/@remusao/smaz-decompress": {
			"version": "1.10.0",
			"resolved": "https://registry.npmjs.org/@remusao/smaz-decompress/-/smaz-decompress-1.10.0.tgz",
			"integrity": "sha512-aA5ImUH480Pcs5/cOgToKmFnzi7osSNG6ft+7DdmQTaQEEst3nLq3JLlBEk+gwidURymjbx6DYs60LHaZ415VQ=="
		},
		"node_modules/@remusao/trie": {
			"version": "1.5.0",
			"resolved": "https://registry.npmjs.org/@remusao/trie/-/trie-1.5.0.tgz",
			"integrity": "sha512-UX+3utJKgwCsg6sUozjxd38gNMVRXrY4TNX9VvCdSrlZBS1nZjRPi98ON3QjRAdf6KCguJFyQARRsulTeqQiPg=="
		},
		"node_modules/@resvg/resvg-js": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js/-/resvg-js-2.6.2.tgz",
			"integrity": "sha512-xBaJish5OeGmniDj9cW5PRa/PtmuVU3ziqrbr5xJj901ZDN4TosrVaNZpEiLZAxdfnhAe7uQ7QFWfjPe9d9K2Q==",
			"engines": {
				"node": ">= 10"
			},
			"optionalDependencies": {
				"@resvg/resvg-js-android-arm-eabi": "2.6.2",
				"@resvg/resvg-js-android-arm64": "2.6.2",
				"@resvg/resvg-js-darwin-arm64": "2.6.2",
				"@resvg/resvg-js-darwin-x64": "2.6.2",
				"@resvg/resvg-js-linux-arm-gnueabihf": "2.6.2",
				"@resvg/resvg-js-linux-arm64-gnu": "2.6.2",
				"@resvg/resvg-js-linux-arm64-musl": "2.6.2",
				"@resvg/resvg-js-linux-x64-gnu": "2.6.2",
				"@resvg/resvg-js-linux-x64-musl": "2.6.2",
				"@resvg/resvg-js-win32-arm64-msvc": "2.6.2",
				"@resvg/resvg-js-win32-ia32-msvc": "2.6.2",
				"@resvg/resvg-js-win32-x64-msvc": "2.6.2"
			}
		},
		"node_modules/@resvg/resvg-js-android-arm-eabi": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-android-arm-eabi/-/resvg-js-android-arm-eabi-2.6.2.tgz",
			"integrity": "sha512-FrJibrAk6v29eabIPgcTUMPXiEz8ssrAk7TXxsiZzww9UTQ1Z5KAbFJs+Z0Ez+VZTYgnE5IQJqBcoSiMebtPHA==",
			"cpu": [
				"arm"
			],
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-android-arm64": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-android-arm64/-/resvg-js-android-arm64-2.6.2.tgz",
			"integrity": "sha512-VcOKezEhm2VqzXpcIJoITuvUS/fcjIw5NA/w3tjzWyzmvoCdd+QXIqy3FBGulWdClvp4g+IfUemigrkLThSjAQ==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-darwin-arm64": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-darwin-arm64/-/resvg-js-darwin-arm64-2.6.2.tgz",
			"integrity": "sha512-nmok2LnAd6nLUKI16aEB9ydMC6Lidiiq2m1nEBDR1LaaP7FGs4AJ90qDraxX+CWlVuRlvNjyYJTNv8qFjtL9+A==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-darwin-x64": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-darwin-x64/-/resvg-js-darwin-x64-2.6.2.tgz",
			"integrity": "sha512-GInyZLjgWDfsVT6+SHxQVRwNzV0AuA1uqGsOAW+0th56J7Nh6bHHKXHBWzUrihxMetcFDmQMAX1tZ1fZDYSRsw==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-linux-arm-gnueabihf": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-arm-gnueabihf/-/resvg-js-linux-arm-gnueabihf-2.6.2.tgz",
			"integrity": "sha512-YIV3u/R9zJbpqTTNwTZM5/ocWetDKGsro0SWp70eGEM9eV2MerWyBRZnQIgzU3YBnSBQ1RcxRZvY/UxwESfZIw==",
			"cpu": [
				"arm"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-linux-arm64-gnu": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-arm64-gnu/-/resvg-js-linux-arm64-gnu-2.6.2.tgz",
			"integrity": "sha512-zc2BlJSim7YR4FZDQ8OUoJg5holYzdiYMeobb9pJuGDidGL9KZUv7SbiD4E8oZogtYY42UZEap7dqkkYuA91pg==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-linux-arm64-musl": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-arm64-musl/-/resvg-js-linux-arm64-musl-2.6.2.tgz",
			"integrity": "sha512-3h3dLPWNgSsD4lQBJPb4f+kvdOSJHa5PjTYVsWHxLUzH4IFTJUAnmuWpw4KqyQ3NA5QCyhw4TWgxk3jRkQxEKg==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-linux-x64-gnu": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-x64-gnu/-/resvg-js-linux-x64-gnu-2.6.2.tgz",
			"integrity": "sha512-IVUe+ckIerA7xMZ50duAZzwf1U7khQe2E0QpUxu5MBJNao5RqC0zwV/Zm965vw6D3gGFUl7j4m+oJjubBVoftw==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-linux-x64-musl": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-linux-x64-musl/-/resvg-js-linux-x64-musl-2.6.2.tgz",
			"integrity": "sha512-UOf83vqTzoYQO9SZ0fPl2ZIFtNIz/Rr/y+7X8XRX1ZnBYsQ/tTb+cj9TE+KHOdmlTFBxhYzVkP2lRByCzqi4jQ==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-win32-arm64-msvc": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-win32-arm64-msvc/-/resvg-js-win32-arm64-msvc-2.6.2.tgz",
			"integrity": "sha512-7C/RSgCa+7vqZ7qAbItfiaAWhyRSoD4l4BQAbVDqRRsRgY+S+hgS3in0Rxr7IorKUpGE69X48q6/nOAuTJQxeQ==",
			"cpu": [
				"arm64"
			],
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-win32-ia32-msvc": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-win32-ia32-msvc/-/resvg-js-win32-ia32-msvc-2.6.2.tgz",
			"integrity": "sha512-har4aPAlvjnLcil40AC77YDIk6loMawuJwFINEM7n0pZviwMkMvjb2W5ZirsNOZY4aDbo5tLx0wNMREp5Brk+w==",
			"cpu": [
				"ia32"
			],
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@resvg/resvg-js-win32-x64-msvc": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/@resvg/resvg-js-win32-x64-msvc/-/resvg-js-win32-x64-msvc-2.6.2.tgz",
			"integrity": "sha512-ZXtYhtUr5SSaBrUDq7DiyjOFJqBVL/dOBN7N/qmi/pO0IgiWW/f/ue3nbvu9joWE5aAKDoIzy/CxsY0suwGosQ==",
			"cpu": [
				"x64"
			],
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@rollup/plugin-commonjs": {
			"version": "26.0.1",
			"resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-26.0.1.tgz",
			"integrity": "sha512-UnsKoZK6/aGIH6AdkptXhNvhaqftcjq3zZdT+LY5Ftms6JR06nADcDsYp5hTU9E2lbJUEOhdlY5J4DNTneM+jQ==",
			"dev": true,
			"dependencies": {
				"@rollup/pluginutils": "^5.0.1",
				"commondir": "^1.0.1",
				"estree-walker": "^2.0.2",
				"glob": "^10.4.1",
				"is-reference": "1.2.1",
				"magic-string": "^0.30.3"
			},
			"engines": {
				"node": ">=16.0.0 || 14 >= 14.17"
			},
			"peerDependencies": {
				"rollup": "^2.68.0||^3.0.0||^4.0.0"
			},
			"peerDependenciesMeta": {
				"rollup": {
					"optional": true
				}
			}
		},
		"node_modules/@rollup/plugin-json": {
			"version": "6.1.0",
			"resolved": "https://registry.npmjs.org/@rollup/plugin-json/-/plugin-json-6.1.0.tgz",
			"integrity": "sha512-EGI2te5ENk1coGeADSIwZ7G2Q8CJS2sF120T7jLw4xFw9n7wIOXHo+kIYRAoVpJAN+kmqZSoO3Fp4JtoNF4ReA==",
			"dev": true,
			"dependencies": {
				"@rollup/pluginutils": "^5.1.0"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
			},
			"peerDependenciesMeta": {
				"rollup": {
					"optional": true
				}
			}
		},
		"node_modules/@rollup/plugin-node-resolve": {
			"version": "15.2.3",
			"resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.3.tgz",
			"integrity": "sha512-j/lym8nf5E21LwBT4Df1VD6hRO2L2iwUeUmP7litikRsVp1H6NWx20NEp0Y7su+7XGc476GnXXc4kFeZNGmaSQ==",
			"dev": true,
			"dependencies": {
				"@rollup/pluginutils": "^5.0.1",
				"@types/resolve": "1.20.2",
				"deepmerge": "^4.2.2",
				"is-builtin-module": "^3.2.1",
				"is-module": "^1.0.0",
				"resolve": "^1.22.1"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"rollup": "^2.78.0||^3.0.0||^4.0.0"
			},
			"peerDependenciesMeta": {
				"rollup": {
					"optional": true
				}
			}
		},
		"node_modules/@rollup/pluginutils": {
			"version": "5.1.0",
			"resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.1.0.tgz",
			"integrity": "sha512-XTIWOPPcpvyKI6L1NHo0lFlCyznUEyPmPY1mc3KpPVDYulHSTvyeLNVW00QTLIAFNhR3kYnJTQHeGqU4M3n09g==",
			"dev": true,
			"dependencies": {
				"@types/estree": "^1.0.0",
				"estree-walker": "^2.0.2",
				"picomatch": "^2.3.1"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
			},
			"peerDependenciesMeta": {
				"rollup": {
					"optional": true
				}
			}
		},
		"node_modules/@rollup/rollup-android-arm-eabi": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.21.2.tgz",
			"integrity": "sha512-fSuPrt0ZO8uXeS+xP3b+yYTCBUd05MoSp2N/MFOgjhhUhMmchXlpTQrTpI8T+YAwAQuK7MafsCOxW7VrPMrJcg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			]
		},
		"node_modules/@rollup/rollup-android-arm64": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.21.2.tgz",
			"integrity": "sha512-xGU5ZQmPlsjQS6tzTTGwMsnKUtu0WVbl0hYpTPauvbRAnmIvpInhJtgjj3mcuJpEiuUw4v1s4BimkdfDWlh7gA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			]
		},
		"node_modules/@rollup/rollup-darwin-arm64": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.21.2.tgz",
			"integrity": "sha512-99AhQ3/ZMxU7jw34Sq8brzXqWH/bMnf7ZVhvLk9QU2cOepbQSVTns6qoErJmSiAvU3InRqC2RRZ5ovh1KN0d0Q==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"darwin"
			]
		},
		"node_modules/@rollup/rollup-darwin-x64": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.21.2.tgz",
			"integrity": "sha512-ZbRaUvw2iN/y37x6dY50D8m2BnDbBjlnMPotDi/qITMJ4sIxNY33HArjikDyakhSv0+ybdUxhWxE6kTI4oX26w==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"darwin"
			]
		},
		"node_modules/@rollup/rollup-linux-arm-gnueabihf": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.21.2.tgz",
			"integrity": "sha512-ztRJJMiE8nnU1YFcdbd9BcH6bGWG1z+jP+IPW2oDUAPxPjo9dverIOyXz76m6IPA6udEL12reYeLojzW2cYL7w==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-arm-musleabihf": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.21.2.tgz",
			"integrity": "sha512-flOcGHDZajGKYpLV0JNc0VFH361M7rnV1ee+NTeC/BQQ1/0pllYcFmxpagltANYt8FYf9+kL6RSk80Ziwyhr7w==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-arm64-gnu": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.21.2.tgz",
			"integrity": "sha512-69CF19Kp3TdMopyteO/LJbWufOzqqXzkrv4L2sP8kfMaAQ6iwky7NoXTp7bD6/irKgknDKM0P9E/1l5XxVQAhw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-arm64-musl": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.21.2.tgz",
			"integrity": "sha512-48pD/fJkTiHAZTnZwR0VzHrao70/4MlzJrq0ZsILjLW/Ab/1XlVUStYyGt7tdyIiVSlGZbnliqmult/QGA2O2w==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.21.2.tgz",
			"integrity": "sha512-cZdyuInj0ofc7mAQpKcPR2a2iu4YM4FQfuUzCVA2u4HI95lCwzjoPtdWjdpDKyHxI0UO82bLDoOaLfpZ/wviyQ==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-riscv64-gnu": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.21.2.tgz",
			"integrity": "sha512-RL56JMT6NwQ0lXIQmMIWr1SW28z4E4pOhRRNqwWZeXpRlykRIlEpSWdsgNWJbYBEWD84eocjSGDu/XxbYeCmwg==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-s390x-gnu": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.21.2.tgz",
			"integrity": "sha512-PMxkrWS9z38bCr3rWvDFVGD6sFeZJw4iQlhrup7ReGmfn7Oukrr/zweLhYX6v2/8J6Cep9IEA/SmjXjCmSbrMQ==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-x64-gnu": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.21.2.tgz",
			"integrity": "sha512-B90tYAUoLhU22olrafY3JQCFLnT3NglazdwkHyxNDYF/zAxJt5fJUB/yBoWFoIQ7SQj+KLe3iL4BhOMa9fzgpw==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-linux-x64-musl": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.21.2.tgz",
			"integrity": "sha512-7twFizNXudESmC9oneLGIUmoHiiLppz/Xs5uJQ4ShvE6234K0VB1/aJYU3f/4g7PhssLGKBVCC37uRkkOi8wjg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			]
		},
		"node_modules/@rollup/rollup-win32-arm64-msvc": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.21.2.tgz",
			"integrity": "sha512-9rRero0E7qTeYf6+rFh3AErTNU1VCQg2mn7CQcI44vNUWM9Ze7MSRS/9RFuSsox+vstRt97+x3sOhEey024FRQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			]
		},
		"node_modules/@rollup/rollup-win32-ia32-msvc": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.21.2.tgz",
			"integrity": "sha512-5rA4vjlqgrpbFVVHX3qkrCo/fZTj1q0Xxpg+Z7yIo3J2AilW7t2+n6Q8Jrx+4MrYpAnjttTYF8rr7bP46BPzRw==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			]
		},
		"node_modules/@rollup/rollup-win32-x64-msvc": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.21.2.tgz",
			"integrity": "sha512-6UUxd0+SKomjdzuAcp+HAmxw1FlGBnl1v2yEPSabtx4lBfdXHDVsW7+lQkgz9cNFJGY3AWR7+V8P5BqkD9L9nA==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			]
		},
		"node_modules/@sec-ant/readable-stream": {
			"version": "0.4.1",
			"resolved": "https://registry.npmjs.org/@sec-ant/readable-stream/-/readable-stream-0.4.1.tgz",
			"integrity": "sha512-831qok9r2t8AlxLko40y2ebgSDhenenCatLVeW/uBtnHPyhHOvG0C7TvfgecV+wHzIm5KUICgzmVpWS+IMEAeg=="
		},
		"node_modules/@shuding/opentype.js": {
			"version": "1.4.0-beta.0",
			"resolved": "https://registry.npmjs.org/@shuding/opentype.js/-/opentype.js-1.4.0-beta.0.tgz",
			"integrity": "sha512-3NgmNyH3l/Hv6EvsWJbsvpcpUba6R8IREQ83nH83cyakCw7uM1arZKNfHwv1Wz6jgqrF/j4x5ELvR6PnK9nTcA==",
			"dependencies": {
				"fflate": "^0.7.3",
				"string.prototype.codepointat": "^0.2.1"
			},
			"bin": {
				"ot": "bin/ot"
			},
			"engines": {
				"node": ">= 8.0.0"
			}
		},
		"node_modules/@smithy/abort-controller": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/@smithy/abort-controller/-/abort-controller-3.1.1.tgz",
			"integrity": "sha512-MBJBiidoe+0cTFhyxT8g+9g7CeVccLM0IOKKUMCNQ1CNMJ/eIfoo0RTfVrXOONEI1UCN1W+zkiHSbzUNE9dZtQ==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/config-resolver": {
			"version": "3.0.5",
			"resolved": "https://registry.npmjs.org/@smithy/config-resolver/-/config-resolver-3.0.5.tgz",
			"integrity": "sha512-SkW5LxfkSI1bUC74OtfBbdz+grQXYiPYolyu8VfpLIjEoN/sHVBlLeGXMQ1vX4ejkgfv6sxVbQJ32yF2cl1veA==",
			"dependencies": {
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"@smithy/util-config-provider": "^3.0.0",
				"@smithy/util-middleware": "^3.0.3",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/core": {
			"version": "2.4.0",
			"resolved": "https://registry.npmjs.org/@smithy/core/-/core-2.4.0.tgz",
			"integrity": "sha512-cHXq+FneIF/KJbt4q4pjN186+Jf4ZB0ZOqEaZMBhT79srEyGDDBV31NqBRBjazz8ppQ1bJbDJMY9ba5wKFV36w==",
			"dependencies": {
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-retry": "^3.0.15",
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-body-length-browser": "^3.0.0",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/credential-provider-imds": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/credential-provider-imds/-/credential-provider-imds-3.2.0.tgz",
			"integrity": "sha512-0SCIzgd8LYZ9EJxUjLXBmEKSZR/P/w6l7Rz/pab9culE/RWuqelAKGJvn5qUOl8BgX8Yj5HWM50A5hiB/RzsgA==",
			"dependencies": {
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/eventstream-codec": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@smithy/eventstream-codec/-/eventstream-codec-3.1.2.tgz",
			"integrity": "sha512-0mBcu49JWt4MXhrhRAlxASNy0IjDRFU+aWNDRal9OtUJvJNiwDuyKMUONSOjLjSCeGwZaE0wOErdqULer8r7yw==",
			"optional": true,
			"dependencies": {
				"@aws-crypto/crc32": "5.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-hex-encoding": "^3.0.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@smithy/eventstream-serde-browser": {
			"version": "3.0.6",
			"resolved": "https://registry.npmjs.org/@smithy/eventstream-serde-browser/-/eventstream-serde-browser-3.0.6.tgz",
			"integrity": "sha512-2hM54UWQUOrki4BtsUI1WzmD13/SeaqT/AB3EUJKbcver/WgKNaiJ5y5F5XXuVe6UekffVzuUDrBZVAA3AWRpQ==",
			"optional": true,
			"dependencies": {
				"@smithy/eventstream-serde-universal": "^3.0.5",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/eventstream-serde-config-resolver": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/eventstream-serde-config-resolver/-/eventstream-serde-config-resolver-3.0.3.tgz",
			"integrity": "sha512-NVTYjOuYpGfrN/VbRQgn31x73KDLfCXCsFdad8DiIc3IcdxL+dYA9zEQPyOP7Fy2QL8CPy2WE4WCUD+ZsLNfaQ==",
			"optional": true,
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/eventstream-serde-node": {
			"version": "3.0.5",
			"resolved": "https://registry.npmjs.org/@smithy/eventstream-serde-node/-/eventstream-serde-node-3.0.5.tgz",
			"integrity": "sha512-+upXvnHNyZP095s11jF5dhGw/Ihzqwl5G+/KtMnoQOpdfC3B5HYCcDVG9EmgkhJMXJlM64PyN5gjJl0uXFQehQ==",
			"optional": true,
			"dependencies": {
				"@smithy/eventstream-serde-universal": "^3.0.5",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/eventstream-serde-universal": {
			"version": "3.0.5",
			"resolved": "https://registry.npmjs.org/@smithy/eventstream-serde-universal/-/eventstream-serde-universal-3.0.5.tgz",
			"integrity": "sha512-5u/nXbyoh1s4QxrvNre9V6vfyoLWuiVvvd5TlZjGThIikc3G+uNiG9uOTCWweSRjv1asdDIWK7nOmN7le4RYHQ==",
			"optional": true,
			"dependencies": {
				"@smithy/eventstream-codec": "^3.1.2",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/fetch-http-handler": {
			"version": "3.2.4",
			"resolved": "https://registry.npmjs.org/@smithy/fetch-http-handler/-/fetch-http-handler-3.2.4.tgz",
			"integrity": "sha512-kBprh5Gs5h7ug4nBWZi1FZthdqSM+T7zMmsZxx0IBvWUn7dK3diz2SHn7Bs4dQGFDk8plDv375gzenDoNwrXjg==",
			"dependencies": {
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/querystring-builder": "^3.0.3",
				"@smithy/types": "^3.3.0",
				"@smithy/util-base64": "^3.0.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@smithy/hash-node": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/hash-node/-/hash-node-3.0.3.tgz",
			"integrity": "sha512-2ctBXpPMG+B3BtWSGNnKELJ7SH9e4TNefJS0cd2eSkOOROeBnnVBnAy9LtJ8tY4vUEoe55N4CNPxzbWvR39iBw==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"@smithy/util-buffer-from": "^3.0.0",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/invalid-dependency": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/invalid-dependency/-/invalid-dependency-3.0.3.tgz",
			"integrity": "sha512-ID1eL/zpDULmHJbflb864k72/SNOZCADRc9i7Exq3RUNJw6raWUSlFEQ+3PX3EYs++bTxZB2dE9mEHTQLv61tw==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@smithy/is-array-buffer": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/is-array-buffer/-/is-array-buffer-3.0.0.tgz",
			"integrity": "sha512-+Fsu6Q6C4RSJiy81Y8eApjEB5gVtM+oFKTffg+jSuwtvomJJrhUJBu2zS8wjXSgH/g1MKEWrzyChTBe6clb5FQ==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/middleware-content-length": {
			"version": "3.0.5",
			"resolved": "https://registry.npmjs.org/@smithy/middleware-content-length/-/middleware-content-length-3.0.5.tgz",
			"integrity": "sha512-ILEzC2eyxx6ncej3zZSwMpB5RJ0zuqH7eMptxC4KN3f+v9bqT8ohssKbhNR78k/2tWW+KS5Spw+tbPF4Ejyqvw==",
			"dependencies": {
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/middleware-endpoint": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/middleware-endpoint/-/middleware-endpoint-3.1.0.tgz",
			"integrity": "sha512-5y5aiKCEwg9TDPB4yFE7H6tYvGFf1OJHNczeY10/EFF8Ir8jZbNntQJxMWNfeQjC1mxPsaQ6mR9cvQbf+0YeMw==",
			"dependencies": {
				"@smithy/middleware-serde": "^3.0.3",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"@smithy/url-parser": "^3.0.3",
				"@smithy/util-middleware": "^3.0.3",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/middleware-retry": {
			"version": "3.0.15",
			"resolved": "https://registry.npmjs.org/@smithy/middleware-retry/-/middleware-retry-3.0.15.tgz",
			"integrity": "sha512-iTMedvNt1ApdvkaoE8aSDuwaoc+BhvHqttbA/FO4Ty+y/S5hW6Ci/CTScG7vam4RYJWZxdTElc3MEfHRVH6cgQ==",
			"dependencies": {
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/service-error-classification": "^3.0.3",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-retry": "^3.0.3",
				"tslib": "^2.6.2",
				"uuid": "^9.0.1"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/middleware-retry/node_modules/uuid": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
			"integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/@smithy/middleware-serde": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/middleware-serde/-/middleware-serde-3.0.3.tgz",
			"integrity": "sha512-puUbyJQBcg9eSErFXjKNiGILJGtiqmuuNKEYNYfUD57fUl4i9+mfmThtQhvFXU0hCVG0iEJhvQUipUf+/SsFdA==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/middleware-stack": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/middleware-stack/-/middleware-stack-3.0.3.tgz",
			"integrity": "sha512-r4klY9nFudB0r9UdSMaGSyjyQK5adUyPnQN/ZM6M75phTxOdnc/AhpvGD1fQUvgmqjQEBGCwpnPbDm8pH5PapA==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/node-config-provider": {
			"version": "3.1.4",
			"resolved": "https://registry.npmjs.org/@smithy/node-config-provider/-/node-config-provider-3.1.4.tgz",
			"integrity": "sha512-YvnElQy8HR4vDcAjoy7Xkx9YT8xZP4cBXcbJSgm/kxmiQu08DwUwj8rkGnyoJTpfl/3xYHH+d8zE+eHqoDCSdQ==",
			"dependencies": {
				"@smithy/property-provider": "^3.1.3",
				"@smithy/shared-ini-file-loader": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/node-http-handler": {
			"version": "3.1.4",
			"resolved": "https://registry.npmjs.org/@smithy/node-http-handler/-/node-http-handler-3.1.4.tgz",
			"integrity": "sha512-+UmxgixgOr/yLsUxcEKGH0fMNVteJFGkmRltYFHnBMlogyFdpzn2CwqWmxOrfJELhV34v0WSlaqG1UtE1uXlJg==",
			"dependencies": {
				"@smithy/abort-controller": "^3.1.1",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/querystring-builder": "^3.0.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/property-provider": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/@smithy/property-provider/-/property-provider-3.1.3.tgz",
			"integrity": "sha512-zahyOVR9Q4PEoguJ/NrFP4O7SMAfYO1HLhB18M+q+Z4KFd4V2obiMnlVoUFzFLSPeVt1POyNWneHHrZaTMoc/g==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/protocol-http": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/protocol-http/-/protocol-http-4.1.0.tgz",
			"integrity": "sha512-dPVoHYQ2wcHooGXg3LQisa1hH0e4y0pAddPMeeUPipI1tEOqL6A4N0/G7abeq+K8wrwSgjk4C0wnD1XZpJm5aA==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/querystring-builder": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/querystring-builder/-/querystring-builder-3.0.3.tgz",
			"integrity": "sha512-vyWckeUeesFKzCDaRwWLUA1Xym9McaA6XpFfAK5qI9DKJ4M33ooQGqvM4J+LalH4u/Dq9nFiC8U6Qn1qi0+9zw==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"@smithy/util-uri-escape": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/querystring-parser": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/querystring-parser/-/querystring-parser-3.0.3.tgz",
			"integrity": "sha512-zahM1lQv2YjmznnfQsWbYojFe55l0SLG/988brlLv1i8z3dubloLF+75ATRsqPBboUXsW6I9CPGE5rQgLfY0vQ==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/service-error-classification": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/service-error-classification/-/service-error-classification-3.0.3.tgz",
			"integrity": "sha512-Jn39sSl8cim/VlkLsUhRFq/dKDnRUFlfRkvhOJaUbLBXUsLRLNf9WaxDv/z9BjuQ3A6k/qE8af1lsqcwm7+DaQ==",
			"dependencies": {
				"@smithy/types": "^3.3.0"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/shared-ini-file-loader": {
			"version": "3.1.4",
			"resolved": "https://registry.npmjs.org/@smithy/shared-ini-file-loader/-/shared-ini-file-loader-3.1.4.tgz",
			"integrity": "sha512-qMxS4hBGB8FY2GQqshcRUy1K6k8aBWP5vwm8qKkCT3A9K2dawUwOIJfqh9Yste/Bl0J2lzosVyrXDj68kLcHXQ==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/signature-v4": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/@smithy/signature-v4/-/signature-v4-4.1.0.tgz",
			"integrity": "sha512-aRryp2XNZeRcOtuJoxjydO6QTaVhxx/vjaR+gx7ZjaFgrgPRyZ3HCTbfwqYj6ZWEBHkCSUfcaymKPURaByukag==",
			"dependencies": {
				"@smithy/is-array-buffer": "^3.0.0",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-hex-encoding": "^3.0.0",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-uri-escape": "^3.0.0",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/smithy-client": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/@smithy/smithy-client/-/smithy-client-3.2.0.tgz",
			"integrity": "sha512-pDbtxs8WOhJLJSeaF/eAbPgXg4VVYFlRcL/zoNYA5WbG3wBL06CHtBSg53ppkttDpAJ/hdiede+xApip1CwSLw==",
			"dependencies": {
				"@smithy/middleware-endpoint": "^3.1.0",
				"@smithy/middleware-stack": "^3.0.3",
				"@smithy/protocol-http": "^4.1.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-stream": "^3.1.3",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/types": {
			"version": "3.3.0",
			"resolved": "https://registry.npmjs.org/@smithy/types/-/types-3.3.0.tgz",
			"integrity": "sha512-IxvBBCTFDHbVoK7zIxqA1ZOdc4QfM5HM7rGleCuHi7L1wnKv5Pn69xXJQ9hgxH60ZVygH9/JG0jRgtUncE3QUA==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/url-parser": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/url-parser/-/url-parser-3.0.3.tgz",
			"integrity": "sha512-pw3VtZtX2rg+s6HMs6/+u9+hu6oY6U7IohGhVNnjbgKy86wcIsSZwgHrFR+t67Uyxvp4Xz3p3kGXXIpTNisq8A==",
			"dependencies": {
				"@smithy/querystring-parser": "^3.0.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@smithy/util-base64": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-base64/-/util-base64-3.0.0.tgz",
			"integrity": "sha512-Kxvoh5Qtt0CDsfajiZOCpJxgtPHXOKwmM+Zy4waD43UoEMA+qPxxa98aE/7ZhdnBFZFXMOiBR5xbcaMhLtznQQ==",
			"dependencies": {
				"@smithy/util-buffer-from": "^3.0.0",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-body-length-browser": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-body-length-browser/-/util-body-length-browser-3.0.0.tgz",
			"integrity": "sha512-cbjJs2A1mLYmqmyVl80uoLTJhAcfzMOyPgjwAYusWKMdLeNtzmMz9YxNl3/jRLoxSS3wkqkf0jwNdtXWtyEBaQ==",
			"dependencies": {
				"tslib": "^2.6.2"
			}
		},
		"node_modules/@smithy/util-body-length-node": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-body-length-node/-/util-body-length-node-3.0.0.tgz",
			"integrity": "sha512-Tj7pZ4bUloNUP6PzwhN7K386tmSmEET9QtQg0TgdNOnxhZvCssHji+oZTUIuzxECRfG8rdm2PMw2WCFs6eIYkA==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-buffer-from": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-buffer-from/-/util-buffer-from-3.0.0.tgz",
			"integrity": "sha512-aEOHCgq5RWFbP+UDPvPot26EJHjOC+bRgse5A8V3FSShqd5E5UN4qc7zkwsvJPPAVsf73QwYcHN1/gt/rtLwQA==",
			"dependencies": {
				"@smithy/is-array-buffer": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-config-provider": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-config-provider/-/util-config-provider-3.0.0.tgz",
			"integrity": "sha512-pbjk4s0fwq3Di/ANL+rCvJMKM5bzAQdE5S/6RL5NXgMExFAi6UgQMPOm5yPaIWPpr+EOXKXRonJ3FoxKf4mCJQ==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-defaults-mode-browser": {
			"version": "3.0.15",
			"resolved": "https://registry.npmjs.org/@smithy/util-defaults-mode-browser/-/util-defaults-mode-browser-3.0.15.tgz",
			"integrity": "sha512-FZ4Psa3vjp8kOXcd3HJOiDPBCWtiilLl57r0cnNtq/Ga9RSDrM5ERL6xt+tO43+2af6Pn5Yp92x2n5vPuduNfg==",
			"dependencies": {
				"@smithy/property-provider": "^3.1.3",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"bowser": "^2.11.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">= 10.0.0"
			}
		},
		"node_modules/@smithy/util-defaults-mode-node": {
			"version": "3.0.15",
			"resolved": "https://registry.npmjs.org/@smithy/util-defaults-mode-node/-/util-defaults-mode-node-3.0.15.tgz",
			"integrity": "sha512-KSyAAx2q6d0t6f/S4XB2+3+6aQacm3aLMhs9aLMqn18uYGUepbdssfogW5JQZpc6lXNBnp0tEnR5e9CEKmEd7A==",
			"dependencies": {
				"@smithy/config-resolver": "^3.0.5",
				"@smithy/credential-provider-imds": "^3.2.0",
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/property-provider": "^3.1.3",
				"@smithy/smithy-client": "^3.2.0",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">= 10.0.0"
			}
		},
		"node_modules/@smithy/util-endpoints": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/@smithy/util-endpoints/-/util-endpoints-2.0.5.tgz",
			"integrity": "sha512-ReQP0BWihIE68OAblC/WQmDD40Gx+QY1Ez8mTdFMXpmjfxSyz2fVQu3A4zXRfQU9sZXtewk3GmhfOHswvX+eNg==",
			"dependencies": {
				"@smithy/node-config-provider": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-hex-encoding": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-hex-encoding/-/util-hex-encoding-3.0.0.tgz",
			"integrity": "sha512-eFndh1WEK5YMUYvy3lPlVmYY/fZcQE1D8oSf41Id2vCeIkKJXPcYDCZD+4+xViI6b1XSd7tE+s5AmXzz5ilabQ==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-middleware": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/util-middleware/-/util-middleware-3.0.3.tgz",
			"integrity": "sha512-l+StyYYK/eO3DlVPbU+4Bi06Jjal+PFLSMmlWM1BEwyLxZ3aKkf1ROnoIakfaA7mC6uw3ny7JBkau4Yc+5zfWw==",
			"dependencies": {
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-retry": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/@smithy/util-retry/-/util-retry-3.0.3.tgz",
			"integrity": "sha512-AFw+hjpbtVApzpNDhbjNG5NA3kyoMs7vx0gsgmlJF4s+yz1Zlepde7J58zpIRIsdjc+emhpAITxA88qLkPF26w==",
			"dependencies": {
				"@smithy/service-error-classification": "^3.0.3",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-stream": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/@smithy/util-stream/-/util-stream-3.1.3.tgz",
			"integrity": "sha512-FIv/bRhIlAxC0U7xM1BCnF2aDRPq0UaelqBHkM2lsCp26mcBbgI0tCVTv+jGdsQLUmAMybua/bjDsSu8RQHbmw==",
			"dependencies": {
				"@smithy/fetch-http-handler": "^3.2.4",
				"@smithy/node-http-handler": "^3.1.4",
				"@smithy/types": "^3.3.0",
				"@smithy/util-base64": "^3.0.0",
				"@smithy/util-buffer-from": "^3.0.0",
				"@smithy/util-hex-encoding": "^3.0.0",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-uri-escape": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-uri-escape/-/util-uri-escape-3.0.0.tgz",
			"integrity": "sha512-LqR7qYLgZTD7nWLBecUi4aqolw8Mhza9ArpNEQ881MJJIU2sE5iHCK6TdyqqzcDLy0OPe10IY4T8ctVdtynubg==",
			"dependencies": {
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-utf8": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@smithy/util-utf8/-/util-utf8-3.0.0.tgz",
			"integrity": "sha512-rUeT12bxFnplYDe815GXbq/oixEGHfRFFtcTF3YdDi/JaENIM6aSYYLJydG83UNzLXeRI5K8abYd/8Sp/QM0kA==",
			"dependencies": {
				"@smithy/util-buffer-from": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@smithy/util-waiter": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@smithy/util-waiter/-/util-waiter-3.1.2.tgz",
			"integrity": "sha512-4pP0EV3iTsexDx+8PPGAKCQpd/6hsQBaQhqWzU4hqKPHN5epPsxKbvUTIiYIHTxaKt6/kEaqPBpu/ufvfbrRzw==",
			"optional": true,
			"dependencies": {
				"@smithy/abort-controller": "^3.1.1",
				"@smithy/types": "^3.3.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/@sveltejs/adapter-node": {
			"version": "5.2.2",
			"resolved": "https://registry.npmjs.org/@sveltejs/adapter-node/-/adapter-node-5.2.2.tgz",
			"integrity": "sha512-BCX4zP0cf86TXpmvLQTnnT/tp7P12UMezf+5LwljP1MJC1fFzn9XOXpAHQCyP+pyHGy2K7p5gY0LyLcZFAL02w==",
			"dev": true,
			"dependencies": {
				"@rollup/plugin-commonjs": "^26.0.1",
				"@rollup/plugin-json": "^6.1.0",
				"@rollup/plugin-node-resolve": "^15.2.3",
				"rollup": "^4.9.5"
			},
			"peerDependencies": {
				"@sveltejs/kit": "^2.4.0"
			}
		},
		"node_modules/@sveltejs/kit": {
			"version": "2.5.26",
			"resolved": "https://registry.npmjs.org/@sveltejs/kit/-/kit-2.5.26.tgz",
			"integrity": "sha512-8l1JTIM2L+bS8ebq1E+nGjv/YSKSnD9Q19bYIUkc41vaEG2JjVUx6ikvPIJv2hkQAuqJLzoPrXlKk4KcyWOv3Q==",
			"dev": true,
			"hasInstallScript": true,
			"dependencies": {
				"@types/cookie": "^0.6.0",
				"cookie": "^0.6.0",
				"devalue": "^5.0.0",
				"esm-env": "^1.0.0",
				"import-meta-resolve": "^4.1.0",
				"kleur": "^4.1.5",
				"magic-string": "^0.30.5",
				"mrmime": "^2.0.0",
				"sade": "^1.8.1",
				"set-cookie-parser": "^2.6.0",
				"sirv": "^2.0.4",
				"tiny-glob": "^0.2.9"
			},
			"bin": {
				"svelte-kit": "svelte-kit.js"
			},
			"engines": {
				"node": ">=18.13"
			},
			"peerDependencies": {
				"@sveltejs/vite-plugin-svelte": "^3.0.0 || ^4.0.0-next.1",
				"svelte": "^4.0.0 || ^5.0.0-next.0",
				"vite": "^5.0.3"
			}
		},
		"node_modules/@sveltejs/vite-plugin-svelte": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte/-/vite-plugin-svelte-3.1.2.tgz",
			"integrity": "sha512-Txsm1tJvtiYeLUVRNqxZGKR/mI+CzuIQuc2gn+YCs9rMTowpNZ2Nqt53JdL8KF9bLhAf2ruR/dr9eZCwdTriRA==",
			"dev": true,
			"peer": true,
			"dependencies": {
				"@sveltejs/vite-plugin-svelte-inspector": "^2.1.0",
				"debug": "^4.3.4",
				"deepmerge": "^4.3.1",
				"kleur": "^4.1.5",
				"magic-string": "^0.30.10",
				"svelte-hmr": "^0.16.0",
				"vitefu": "^0.2.5"
			},
			"engines": {
				"node": "^18.0.0 || >=20"
			},
			"peerDependencies": {
				"svelte": "^4.0.0 || ^5.0.0-next.0",
				"vite": "^5.0.0"
			}
		},
		"node_modules/@sveltejs/vite-plugin-svelte-inspector": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte-inspector/-/vite-plugin-svelte-inspector-2.1.0.tgz",
			"integrity": "sha512-9QX28IymvBlSCqsCll5t0kQVxipsfhFFL+L2t3nTWfXnddYwxBuAEtTtlaVQpRz9c37BhJjltSeY4AJSC03SSg==",
			"dev": true,
			"peer": true,
			"dependencies": {
				"debug": "^4.3.4"
			},
			"engines": {
				"node": "^18.0.0 || >=20"
			},
			"peerDependencies": {
				"@sveltejs/vite-plugin-svelte": "^3.0.0",
				"svelte": "^4.0.0 || ^5.0.0-next.0",
				"vite": "^5.0.0"
			}
		},
		"node_modules/@tailwindcss/typography": {
			"version": "0.5.15",
			"resolved": "https://registry.npmjs.org/@tailwindcss/typography/-/typography-0.5.15.tgz",
			"integrity": "sha512-AqhlCXl+8grUz8uqExv5OTtgpjuVIwFTSXTrh8y9/pw6q2ek7fJ+Y8ZEVw7EB2DCcuCOtEjf9w3+J3rzts01uA==",
			"dev": true,
			"dependencies": {
				"lodash.castarray": "^4.4.0",
				"lodash.isplainobject": "^4.0.6",
				"lodash.merge": "^4.6.2",
				"postcss-selector-parser": "6.0.10"
			},
			"peerDependencies": {
				"tailwindcss": ">=3.0.0 || insiders || >=4.0.0-alpha.20"
			}
		},
		"node_modules/@tokenizer/token": {
			"version": "0.3.0",
			"resolved": "https://registry.npmjs.org/@tokenizer/token/-/token-0.3.0.tgz",
			"integrity": "sha512-OvjF+z51L3ov0OyAU0duzsYuvO01PH7x4t6DJx+guahgTnBHkhJdG7soQeTSFLWN3efnHyibZ4Z8l2EuWwJN3A=="
		},
		"node_modules/@tootallnate/once": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
			"integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/@tsconfig/node10": {
			"version": "1.0.11",
			"resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
			"integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
			"devOptional": true
		},
		"node_modules/@tsconfig/node12": {
			"version": "1.0.11",
			"resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
			"integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
			"devOptional": true
		},
		"node_modules/@tsconfig/node14": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
			"integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
			"devOptional": true
		},
		"node_modules/@tsconfig/node16": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
			"integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
			"devOptional": true
		},
		"node_modules/@types/body-parser": {
			"version": "1.19.5",
			"resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
			"integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
			"dev": true,
			"dependencies": {
				"@types/connect": "*",
				"@types/node": "*"
			}
		},
		"node_modules/@types/chai": {
			"version": "4.3.19",
			"resolved": "https://registry.npmjs.org/@types/chai/-/chai-4.3.19.tgz",
			"integrity": "sha512-2hHHvQBVE2FiSK4eN0Br6snX9MtolHaTo/batnLjlGRhoQzlCL61iVpxoqO7SfFyOw+P/pwv+0zNHzKoGWz9Cw==",
			"dev": true
		},
		"node_modules/@types/chai-subset": {
			"version": "1.3.5",
			"resolved": "https://registry.npmjs.org/@types/chai-subset/-/chai-subset-1.3.5.tgz",
			"integrity": "sha512-c2mPnw+xHtXDoHmdtcCXGwyLMiauiAyxWMzhGpqHC4nqI/Y5G2XhTampslK2rb59kpcuHon03UH8W6iYUzw88A==",
			"dev": true,
			"dependencies": {
				"@types/chai": "*"
			}
		},
		"node_modules/@types/chrome": {
			"version": "0.0.270",
			"resolved": "https://registry.npmjs.org/@types/chrome/-/chrome-0.0.270.tgz",
			"integrity": "sha512-ADvkowV7YnJfycZZxL2brluZ6STGW+9oKG37B422UePf2PCXuFA/XdERI0T18wtuWPx0tmFeZqq6MOXVk1IC+Q==",
			"dependencies": {
				"@types/filesystem": "*",
				"@types/har-format": "*"
			}
		},
		"node_modules/@types/connect": {
			"version": "3.4.38",
			"resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
			"integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
			"dev": true,
			"dependencies": {
				"@types/node": "*"
			}
		},
		"node_modules/@types/cookie": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.6.0.tgz",
			"integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA=="
		},
		"node_modules/@types/dompurify": {
			"version": "3.0.5",
			"resolved": "https://registry.npmjs.org/@types/dompurify/-/dompurify-3.0.5.tgz",
			"integrity": "sha512-1Wg0g3BtQF7sSb27fJQAKck1HECM6zV1EB66j8JH9i3LCjYabJa0FSdiSgsD5K/RbrsR0SiraKacLB+T8ZVYAg==",
			"dev": true,
			"dependencies": {
				"@types/trusted-types": "*"
			}
		},
		"node_modules/@types/estree": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.5.tgz",
			"integrity": "sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==",
			"dev": true
		},
		"node_modules/@types/eventsource": {
			"version": "1.1.15",
			"resolved": "https://registry.npmjs.org/@types/eventsource/-/eventsource-1.1.15.tgz",
			"integrity": "sha512-XQmGcbnxUNa06HR3VBVkc9+A2Vpi9ZyLJcdS5dwaQQ/4ZMWFO+5c90FnMUpbtMZwB/FChoYHwuVg8TvkECacTA=="
		},
		"node_modules/@types/express": {
			"version": "4.17.21",
			"resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
			"integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
			"dev": true,
			"dependencies": {
				"@types/body-parser": "*",
				"@types/express-serve-static-core": "^4.17.33",
				"@types/qs": "*",
				"@types/serve-static": "*"
			}
		},
		"node_modules/@types/express-serve-static-core": {
			"version": "4.19.5",
			"resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.5.tgz",
			"integrity": "sha512-y6W03tvrACO72aijJ5uF02FRq5cgDR9lUxddQ8vyF+GvmjJQqbzDcJngEjURc+ZsG31VI3hODNZJ2URj86pzmg==",
			"dev": true,
			"dependencies": {
				"@types/node": "*",
				"@types/qs": "*",
				"@types/range-parser": "*",
				"@types/send": "*"
			}
		},
		"node_modules/@types/filesystem": {
			"version": "0.0.36",
			"resolved": "https://registry.npmjs.org/@types/filesystem/-/filesystem-0.0.36.tgz",
			"integrity": "sha512-vPDXOZuannb9FZdxgHnqSwAG/jvdGM8Wq+6N4D/d80z+D4HWH+bItqsZaVRQykAn6WEVeEkLm2oQigyHtgb0RA==",
			"dependencies": {
				"@types/filewriter": "*"
			}
		},
		"node_modules/@types/filewriter": {
			"version": "0.0.33",
			"resolved": "https://registry.npmjs.org/@types/filewriter/-/filewriter-0.0.33.tgz",
			"integrity": "sha512-xFU8ZXTw4gd358lb2jw25nxY9QAgqn2+bKKjKOYfNCzN4DKCFetK7sPtrlpg66Ywe3vWY9FNxprZawAh9wfJ3g=="
		},
		"node_modules/@types/firefox-webext-browser": {
			"version": "120.0.4",
			"resolved": "https://registry.npmjs.org/@types/firefox-webext-browser/-/firefox-webext-browser-120.0.4.tgz",
			"integrity": "sha512-lBrpf08xhiZBigrtdQfUaqX1UauwZ+skbFiL8u2Tdra/rklkKadYmIzTwkNZSWtuZ7OKpFqbE2HHfDoFqvZf6w=="
		},
		"node_modules/@types/har-format": {
			"version": "1.2.15",
			"resolved": "https://registry.npmjs.org/@types/har-format/-/har-format-1.2.15.tgz",
			"integrity": "sha512-RpQH4rXLuvTXKR0zqHq3go0RVXYv/YVqv4TnPH95VbwUxZdQlK1EtcMvQvMpDngHbt13Csh9Z4qT9AbkiQH5BA=="
		},
		"node_modules/@types/http-errors": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
			"integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
			"dev": true
		},
		"node_modules/@types/js-yaml": {
			"version": "4.0.9",
			"resolved": "https://registry.npmjs.org/@types/js-yaml/-/js-yaml-4.0.9.tgz",
			"integrity": "sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==",
			"dev": true
		},
		"node_modules/@types/jsdom": {
			"version": "21.1.7",
			"resolved": "https://registry.npmjs.org/@types/jsdom/-/jsdom-21.1.7.tgz",
			"integrity": "sha512-yOriVnggzrnQ3a9OKOCxaVuSug3w3/SbOj5i7VwXWZEyUNl3bLF9V3MfxGbZKuwqJOQyRfqXyROBB1CoZLFWzA==",
			"dev": true,
			"dependencies": {
				"@types/node": "*",
				"@types/tough-cookie": "*",
				"parse5": "^7.0.0"
			}
		},
		"node_modules/@types/json-schema": {
			"version": "7.0.15",
			"resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
			"integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
			"dev": true
		},
		"node_modules/@types/jsonpath": {
			"version": "0.2.4",
			"resolved": "https://registry.npmjs.org/@types/jsonpath/-/jsonpath-0.2.4.tgz",
			"integrity": "sha512-K3hxB8Blw0qgW6ExKgMbXQv2UPZBoE2GqLpVY+yr7nMD2Pq86lsuIzyAaiQ7eMqFL5B6di6pxSkogLJEyEHoGA==",
			"dev": true
		},
		"node_modules/@types/katex": {
			"version": "0.16.7",
			"resolved": "https://registry.npmjs.org/@types/katex/-/katex-0.16.7.tgz",
			"integrity": "sha512-HMwFiRujE5PjrgwHQ25+bsLJgowjGjm5Z8FVSf0N6PwgJrwxH0QxzHYDcKsTfV3wva0vzrpqMTJS2jXPr5BMEQ=="
		},
		"node_modules/@types/mime": {
			"version": "1.3.5",
			"resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
			"integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
			"dev": true
		},
		"node_modules/@types/minimist": {
			"version": "1.2.5",
			"resolved": "https://registry.npmjs.org/@types/minimist/-/minimist-1.2.5.tgz",
			"integrity": "sha512-hov8bUuiLiyFPGyFPE1lwWhmzYbirOXQNNo40+y3zow8aFVTeyn3VWL0VFFfdNddA8S4Vf0Tc062rzyNr7Paag==",
			"dev": true
		},
		"node_modules/@types/mute-stream": {
			"version": "0.0.4",
			"resolved": "https://registry.npmjs.org/@types/mute-stream/-/mute-stream-0.0.4.tgz",
			"integrity": "sha512-CPM9nzrCPPJHQNA9keH9CVkVI+WR5kMa+7XEs5jcGQ0VoAGnLv242w8lIVgwAEfmE4oufJRaTc9PNLQl0ioAow==",
			"dependencies": {
				"@types/node": "*"
			}
		},
		"node_modules/@types/node": {
			"version": "22.5.4",
			"resolved": "https://registry.npmjs.org/@types/node/-/node-22.5.4.tgz",
			"integrity": "sha512-FDuKUJQm/ju9fT/SeX/6+gBzoPzlVCzfzmGkwKvRHQVxi4BntVbyIwf6a4Xn62mrvndLiml6z/UBXIdEVjQLXg==",
			"dependencies": {
				"undici-types": "~6.19.2"
			}
		},
		"node_modules/@types/node-fetch": {
			"version": "2.6.11",
			"resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.11.tgz",
			"integrity": "sha512-24xFj9R5+rfQJLRyM56qh+wnVSYhyXC2tkoBndtY0U+vubqNsYXGjufB2nn8Q6gt0LrARwL6UBtMCSVCwl4B1g==",
			"optional": true,
			"dependencies": {
				"@types/node": "*",
				"form-data": "^4.0.0"
			}
		},
		"node_modules/@types/node-int64": {
			"version": "0.4.32",
			"resolved": "https://registry.npmjs.org/@types/node-int64/-/node-int64-0.4.32.tgz",
			"integrity": "sha512-xf/JsSlnXQ+mzvc0IpXemcrO4BrCfpgNpMco+GLcXkFk01k/gW9lGJu+Vof0ZSvHK6DsHJDPSbjFPs36QkWXqw==",
			"dev": true,
			"dependencies": {
				"@types/node": "*"
			}
		},
		"node_modules/@types/parquetjs": {
			"version": "0.10.6",
			"resolved": "https://registry.npmjs.org/@types/parquetjs/-/parquetjs-0.10.6.tgz",
			"integrity": "sha512-ZCsD6j97YD0mGU8/VnVs3NjORXa7zeHvqlpJpCqy4jU8a1O21dalL+MFn9QNbdEfy8rszR1N7NHeT7/LdtHf+A==",
			"dev": true,
			"dependencies": {
				"@types/node-int64": "*"
			}
		},
		"node_modules/@types/pug": {
			"version": "2.0.10",
			"resolved": "https://registry.npmjs.org/@types/pug/-/pug-2.0.10.tgz",
			"integrity": "sha512-Sk/uYFOBAB7mb74XcpizmH0KOR2Pv3D2Hmrh1Dmy5BmK3MpdSa5kqZcg6EKBdklU0bFXX9gCfzvpnyUehrPIuA==",
			"dev": true
		},
		"node_modules/@types/qs": {
			"version": "6.9.15",
			"resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.15.tgz",
			"integrity": "sha512-uXHQKES6DQKKCLh441Xv/dwxOq1TVS3JPUMlEqoEglvlhR6Mxnlew/Xq/LRVHpLyk7iK3zODe1qYHIMltO7XGg==",
			"devOptional": true
		},
		"node_modules/@types/range-parser": {
			"version": "1.2.7",
			"resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
			"integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
			"dev": true
		},
		"node_modules/@types/resolve": {
			"version": "1.20.2",
			"resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.20.2.tgz",
			"integrity": "sha512-60BCwRFOZCQhDncwQdxxeOEEkbc5dIMccYLwbxsS4TUNeVECQ/pBJ0j09mrHOl/JJvpRPGwO9SvE4nR2Nb/a4Q==",
			"dev": true
		},
		"node_modules/@types/sbd": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/@types/sbd/-/sbd-1.0.5.tgz",
			"integrity": "sha512-60PxBBWhg0C3yb5bTP+wwWYGTKMcuB0S6mTEa1sedMC79tYY0Ei7YjU4qsWzGn++lWscLQde16SnElJrf5/aTw==",
			"dev": true
		},
		"node_modules/@types/semver": {
			"version": "7.5.8",
			"resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.5.8.tgz",
			"integrity": "sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==",
			"dev": true
		},
		"node_modules/@types/send": {
			"version": "0.17.4",
			"resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
			"integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
			"dev": true,
			"dependencies": {
				"@types/mime": "^1",
				"@types/node": "*"
			}
		},
		"node_modules/@types/serve-static": {
			"version": "1.15.7",
			"resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
			"integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
			"dev": true,
			"dependencies": {
				"@types/http-errors": "*",
				"@types/node": "*",
				"@types/send": "*"
			}
		},
		"node_modules/@types/statuses": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/@types/statuses/-/statuses-2.0.5.tgz",
			"integrity": "sha512-jmIUGWrAiwu3dZpxntxieC+1n/5c3mjrImkmOSQ2NC5uP6cYO4aAZDdSmRcI5C1oiTmqlZGHC+/NmJrKogbP5A=="
		},
		"node_modules/@types/tough-cookie": {
			"version": "4.0.5",
			"resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
			"integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA=="
		},
		"node_modules/@types/trusted-types": {
			"version": "2.0.7",
			"resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
			"integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
			"dev": true
		},
		"node_modules/@types/uuid": {
			"version": "9.0.8",
			"resolved": "https://registry.npmjs.org/@types/uuid/-/uuid-9.0.8.tgz",
			"integrity": "sha512-jg+97EGIcY9AGHJJRaaPVgetKDsrTgbRjQ5Msgjh/DQKEFl0DtyRr/VCOyD1T2R1MNeWPK/u7JoGhlDZnKBAfA==",
			"dev": true
		},
		"node_modules/@types/webidl-conversions": {
			"version": "7.0.3",
			"resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
			"integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA=="
		},
		"node_modules/@types/whatwg-url": {
			"version": "8.2.2",
			"resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-8.2.2.tgz",
			"integrity": "sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==",
			"dependencies": {
				"@types/node": "*",
				"@types/webidl-conversions": "*"
			}
		},
		"node_modules/@types/wrap-ansi": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/@types/wrap-ansi/-/wrap-ansi-3.0.0.tgz",
			"integrity": "sha512-ltIpx+kM7g/MLRZfkbL7EsCEjfzCcScLpkg37eXEtx5kmrAKBkTJwd1GIAjDSL8wTpM6Hzn5YO4pSb91BEwu1g=="
		},
		"node_modules/@typescript-eslint/eslint-plugin": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-6.21.0.tgz",
			"integrity": "sha512-oy9+hTPCUFpngkEZUSzbf9MxI65wbKFoQYsgPdILTfbUldp5ovUuphZVe4i30emU9M/kP+T64Di0mxl7dSw3MA==",
			"dev": true,
			"dependencies": {
				"@eslint-community/regexpp": "^4.5.1",
				"@typescript-eslint/scope-manager": "6.21.0",
				"@typescript-eslint/type-utils": "6.21.0",
				"@typescript-eslint/utils": "6.21.0",
				"@typescript-eslint/visitor-keys": "6.21.0",
				"debug": "^4.3.4",
				"graphemer": "^1.4.0",
				"ignore": "^5.2.4",
				"natural-compare": "^1.4.0",
				"semver": "^7.5.4",
				"ts-api-utils": "^1.0.1"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			},
			"peerDependencies": {
				"@typescript-eslint/parser": "^6.0.0 || ^6.0.0-alpha",
				"eslint": "^7.0.0 || ^8.0.0"
			},
			"peerDependenciesMeta": {
				"typescript": {
					"optional": true
				}
			}
		},
		"node_modules/@typescript-eslint/parser": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-6.21.0.tgz",
			"integrity": "sha512-tbsV1jPne5CkFQCgPBcDOt30ItF7aJoZL997JSF7MhGQqOeT3svWRYxiqlfA5RUdlHN6Fi+EI9bxqbdyAUZjYQ==",
			"dev": true,
			"dependencies": {
				"@typescript-eslint/scope-manager": "6.21.0",
				"@typescript-eslint/types": "6.21.0",
				"@typescript-eslint/typescript-estree": "6.21.0",
				"@typescript-eslint/visitor-keys": "6.21.0",
				"debug": "^4.3.4"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			},
			"peerDependencies": {
				"eslint": "^7.0.0 || ^8.0.0"
			},
			"peerDependenciesMeta": {
				"typescript": {
					"optional": true
				}
			}
		},
		"node_modules/@typescript-eslint/scope-manager": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-6.21.0.tgz",
			"integrity": "sha512-OwLUIWZJry80O99zvqXVEioyniJMa+d2GrqpUTqi5/v5D5rOrppJVBPa0yKCblcigC0/aYAzxxqQ1B+DS2RYsg==",
			"dev": true,
			"dependencies": {
				"@typescript-eslint/types": "6.21.0",
				"@typescript-eslint/visitor-keys": "6.21.0"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			}
		},
		"node_modules/@typescript-eslint/type-utils": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-6.21.0.tgz",
			"integrity": "sha512-rZQI7wHfao8qMX3Rd3xqeYSMCL3SoiSQLBATSiVKARdFGCYSRvmViieZjqc58jKgs8Y8i9YvVVhRbHSTA4VBag==",
			"dev": true,
			"dependencies": {
				"@typescript-eslint/typescript-estree": "6.21.0",
				"@typescript-eslint/utils": "6.21.0",
				"debug": "^4.3.4",
				"ts-api-utils": "^1.0.1"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			},
			"peerDependencies": {
				"eslint": "^7.0.0 || ^8.0.0"
			},
			"peerDependenciesMeta": {
				"typescript": {
					"optional": true
				}
			}
		},
		"node_modules/@typescript-eslint/types": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-6.21.0.tgz",
			"integrity": "sha512-1kFmZ1rOm5epu9NZEZm1kckCDGj5UJEf7P1kliH4LKu/RkwpsfqqGmY2OOcUs18lSlQBKLDYBOGxRVtrMN5lpg==",
			"dev": true,
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			}
		},
		"node_modules/@typescript-eslint/typescript-estree": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.21.0.tgz",
			"integrity": "sha512-6npJTkZcO+y2/kr+z0hc4HwNfrrP4kNYh57ek7yCNlrBjWQ1Y0OS7jiZTkgumrvkX5HkEKXFZkkdFNkaW2wmUQ==",
			"dev": true,
			"dependencies": {
				"@typescript-eslint/types": "6.21.0",
				"@typescript-eslint/visitor-keys": "6.21.0",
				"debug": "^4.3.4",
				"globby": "^11.1.0",
				"is-glob": "^4.0.3",
				"minimatch": "9.0.3",
				"semver": "^7.5.4",
				"ts-api-utils": "^1.0.1"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			},
			"peerDependenciesMeta": {
				"typescript": {
					"optional": true
				}
			}
		},
		"node_modules/@typescript-eslint/utils": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-6.21.0.tgz",
			"integrity": "sha512-NfWVaC8HP9T8cbKQxHcsJBY5YE1O33+jpMwN45qzWWaPDZgLIbo12toGMWnmhvCpd3sIxkpDw3Wv1B3dYrbDQQ==",
			"dev": true,
			"dependencies": {
				"@eslint-community/eslint-utils": "^4.4.0",
				"@types/json-schema": "^7.0.12",
				"@types/semver": "^7.5.0",
				"@typescript-eslint/scope-manager": "6.21.0",
				"@typescript-eslint/types": "6.21.0",
				"@typescript-eslint/typescript-estree": "6.21.0",
				"semver": "^7.5.4"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			},
			"peerDependencies": {
				"eslint": "^7.0.0 || ^8.0.0"
			}
		},
		"node_modules/@typescript-eslint/visitor-keys": {
			"version": "6.21.0",
			"resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-6.21.0.tgz",
			"integrity": "sha512-JJtkDduxLi9bivAB+cYOVMtbkqdPOhZ+ZI5LC47MIRrDV4Yn2o+ZnW10Nkmr28xRpSpdJ6Sm42Hjf2+REYXm0A==",
			"dev": true,
			"dependencies": {
				"@typescript-eslint/types": "6.21.0",
				"eslint-visitor-keys": "^3.4.1"
			},
			"engines": {
				"node": "^16.0.0 || >=18.0.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/typescript-eslint"
			}
		},
		"node_modules/@ungap/structured-clone": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.2.0.tgz",
			"integrity": "sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==",
			"dev": true
		},
		"node_modules/@vitest/expect": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-0.31.4.tgz",
			"integrity": "sha512-tibyx8o7GUyGHZGyPgzwiaPaLDQ9MMuCOrc03BYT0nryUuhLbL7NV2r/q98iv5STlwMgaKuFJkgBW/8iPKwlSg==",
			"dev": true,
			"dependencies": {
				"@vitest/spy": "0.31.4",
				"@vitest/utils": "0.31.4",
				"chai": "^4.3.7"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/runner": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-0.31.4.tgz",
			"integrity": "sha512-Wgm6UER+gwq6zkyrm5/wbpXGF+g+UBB78asJlFkIOwyse0pz8lZoiC6SW5i4gPnls/zUcPLWS7Zog0LVepXnpg==",
			"dev": true,
			"dependencies": {
				"@vitest/utils": "0.31.4",
				"concordance": "^5.0.4",
				"p-limit": "^4.0.0",
				"pathe": "^1.1.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/runner/node_modules/p-limit": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
			"integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
			"dev": true,
			"dependencies": {
				"yocto-queue": "^1.0.0"
			},
			"engines": {
				"node": "^12.20.0 || ^14.13.1 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@vitest/runner/node_modules/yocto-queue": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.1.1.tgz",
			"integrity": "sha512-b4JR1PFR10y1mKjhHY9LaGo6tmrgjit7hxVIeAmyMw3jegXR4dhYqLaQF5zMXZxY7tLpMyJeLjr1C4rLmkVe8g==",
			"dev": true,
			"engines": {
				"node": ">=12.20"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/@vitest/snapshot": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-0.31.4.tgz",
			"integrity": "sha512-LemvNumL3NdWSmfVAMpXILGyaXPkZbG5tyl6+RQSdcHnTj6hvA49UAI8jzez9oQyE/FWLKRSNqTGzsHuk89LRA==",
			"dev": true,
			"dependencies": {
				"magic-string": "^0.30.0",
				"pathe": "^1.1.0",
				"pretty-format": "^27.5.1"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/spy": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-0.31.4.tgz",
			"integrity": "sha512-3ei5ZH1s3aqbEyftPAzSuunGICRuhE+IXOmpURFdkm5ybUADk+viyQfejNk6q8M5QGX8/EVKw+QWMEP3DTJDag==",
			"dev": true,
			"dependencies": {
				"tinyspy": "^2.1.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/@vitest/utils": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-0.31.4.tgz",
			"integrity": "sha512-DobZbHacWznoGUfYU8XDPY78UubJxXfMNY1+SUdOp1NsI34eopSA6aZMeaGu10waSOeYwE8lxrd/pLfT0RMxjQ==",
			"dev": true,
			"dependencies": {
				"concordance": "^5.0.4",
				"loupe": "^2.3.6",
				"pretty-format": "^27.5.1"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/abab": {
			"version": "2.0.6",
			"resolved": "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz",
			"integrity": "sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
			"deprecated": "Use your platform's native atob() and btoa() methods instead"
		},
		"node_modules/abort-controller": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
			"integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
			"dependencies": {
				"event-target-shim": "^5.0.0"
			},
			"engines": {
				"node": ">=6.5"
			}
		},
		"node_modules/accepts": {
			"version": "1.3.8",
			"resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
			"integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
			"dependencies": {
				"mime-types": "~2.1.34",
				"negotiator": "0.6.3"
			},
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/acorn": {
			"version": "8.12.1",
			"resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
			"integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
			"devOptional": true,
			"bin": {
				"acorn": "bin/acorn"
			},
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/acorn-jsx": {
			"version": "5.3.2",
			"resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
			"integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
			"dev": true,
			"peerDependencies": {
				"acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
			}
		},
		"node_modules/acorn-walk": {
			"version": "8.3.3",
			"resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.3.tgz",
			"integrity": "sha512-MxXdReSRhGO7VlFe1bRG/oI7/mdLV9B9JJT0N8vZOhF7gFRR5l3M8W9G8JxmKV+JC5mGqJ0QvqfSOLsCPa4nUw==",
			"devOptional": true,
			"dependencies": {
				"acorn": "^8.11.0"
			},
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/agent-base": {
			"version": "7.1.1",
			"resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.1.tgz",
			"integrity": "sha512-H0TSyFNDMomMNJQBn8wFV5YC/2eJ+VXECwOadZJT554xP6cODZHPX3H9QMQECxvrgiSOP1pHjy1sMWQVYJOUOA==",
			"dependencies": {
				"debug": "^4.3.4"
			},
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/agentkeepalive": {
			"version": "4.5.0",
			"resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
			"integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
			"optional": true,
			"dependencies": {
				"humanize-ms": "^1.2.1"
			},
			"engines": {
				"node": ">= 8.0.0"
			}
		},
		"node_modules/ajv": {
			"version": "6.12.6",
			"resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
			"integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
			"dev": true,
			"dependencies": {
				"fast-deep-equal": "^3.1.1",
				"fast-json-stable-stringify": "^2.0.0",
				"json-schema-traverse": "^0.4.1",
				"uri-js": "^4.2.2"
			},
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/epoberezkin"
			}
		},
		"node_modules/ansi-escapes": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-7.0.0.tgz",
			"integrity": "sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==",
			"dependencies": {
				"environment": "^1.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/ansi-regex": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/ansi-styles": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
			"integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
			"dependencies": {
				"color-convert": "^2.0.1"
			},
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/any-promise": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
			"integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A=="
		},
		"node_modules/anymatch": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
			"integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
			"dependencies": {
				"normalize-path": "^3.0.0",
				"picomatch": "^2.0.4"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/arg": {
			"version": "5.0.2",
			"resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
			"integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg=="
		},
		"node_modules/argparse": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
			"integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
			"dev": true
		},
		"node_modules/aria-query": {
			"version": "5.3.0",
			"resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.0.tgz",
			"integrity": "sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==",
			"dev": true,
			"dependencies": {
				"dequal": "^2.0.3"
			}
		},
		"node_modules/array-flatten": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
			"integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
		},
		"node_modules/array-union": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
			"integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/assertion-error": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-1.1.0.tgz",
			"integrity": "sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==",
			"dev": true,
			"engines": {
				"node": "*"
			}
		},
		"node_modules/asynckit": {
			"version": "0.4.0",
			"resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
			"integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
		},
		"node_modules/atomic-sleep": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/atomic-sleep/-/atomic-sleep-1.0.0.tgz",
			"integrity": "sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==",
			"engines": {
				"node": ">=8.0.0"
			}
		},
		"node_modules/autoprefixer": {
			"version": "10.4.20",
			"resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
			"integrity": "sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/autoprefixer"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"dependencies": {
				"browserslist": "^4.23.3",
				"caniuse-lite": "^1.0.30001646",
				"fraction.js": "^4.3.7",
				"normalize-range": "^0.1.2",
				"picocolors": "^1.0.1",
				"postcss-value-parser": "^4.2.0"
			},
			"bin": {
				"autoprefixer": "bin/autoprefixer"
			},
			"engines": {
				"node": "^10 || ^12 || >=14"
			},
			"peerDependencies": {
				"postcss": "^8.1.0"
			}
		},
		"node_modules/aws-sigv4-fetch": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/aws-sigv4-fetch/-/aws-sigv4-fetch-4.0.1.tgz",
			"integrity": "sha512-sd5TbxbOB82Y3mFoux6XbRn/QbNR9hTO7Dv+y8Y0G4+xlS6rP8OJCJwtgANnB4yYAshVqvLbTo6aqTrQUpthvA==",
			"dependencies": {
				"@aws-crypto/sha256-js": "^5.2.0",
				"@aws-sdk/credential-provider-node": "^3.609.0",
				"@aws-sdk/types": "^3.609.0",
				"@smithy/protocol-http": "^4.0.3",
				"@smithy/signature-v4": "^3.1.2"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/aws-sigv4-fetch/node_modules/@smithy/signature-v4": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/@smithy/signature-v4/-/signature-v4-3.1.2.tgz",
			"integrity": "sha512-3BcPylEsYtD0esM4Hoyml/+s7WP2LFhcM3J2AGdcL2vx9O60TtfpDOL72gjb4lU8NeRPeKAwR77YNyyGvMbuEA==",
			"dependencies": {
				"@smithy/is-array-buffer": "^3.0.0",
				"@smithy/types": "^3.3.0",
				"@smithy/util-hex-encoding": "^3.0.0",
				"@smithy/util-middleware": "^3.0.3",
				"@smithy/util-uri-escape": "^3.0.0",
				"@smithy/util-utf8": "^3.0.0",
				"tslib": "^2.6.2"
			},
			"engines": {
				"node": ">=16.0.0"
			}
		},
		"node_modules/aws4": {
			"version": "1.13.2",
			"resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.2.tgz",
			"integrity": "sha512-lHe62zvbTB5eEABUVi/AwVh0ZKY9rMMDhmm+eeyuuUQbQ3+J+fONVQOZyj+DdrvD4BY33uYniyRJ4UJIaSKAfw=="
		},
		"node_modules/aws4fetch": {
			"version": "1.0.20",
			"resolved": "https://registry.npmjs.org/aws4fetch/-/aws4fetch-1.0.20.tgz",
			"integrity": "sha512-/djoAN709iY65ETD6LKCtyyEI04XIBP5xVvfmNxsEP0uJB5tyaGBztSryRr4HqMStr9R06PisQE7m9zDTXKu6g==",
			"optional": true
		},
		"node_modules/axobject-query": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
			"integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
			"dev": true,
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/balanced-match": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
			"integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
		},
		"node_modules/base64-js": {
			"version": "1.5.1",
			"resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
			"integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			]
		},
		"node_modules/bignumber.js": {
			"version": "9.1.2",
			"resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
			"integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==",
			"engines": {
				"node": "*"
			}
		},
		"node_modules/binary-extensions": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
			"integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/bindings": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/bindings/-/bindings-1.2.1.tgz",
			"integrity": "sha512-u4cBQNepWxYA55FunZSM7wMi55yQaN0otnhhilNoWHq0MfOfJeQx0v0mRRpolGOExPjZcl6FtB0BB8Xkb88F0g==",
			"optional": true
		},
		"node_modules/bintrees": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/bintrees/-/bintrees-1.0.2.tgz",
			"integrity": "sha512-VOMgTMwjAaUG580SXn3LacVgjurrbMme7ZZNYGSSV7mmtY6QQRh0Eg3pwIcntQ77DErK1L0NxkbetjcoXzVwKw==",
			"dev": true
		},
		"node_modules/blueimp-md5": {
			"version": "2.19.0",
			"resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
			"integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w==",
			"dev": true
		},
		"node_modules/body-parser": {
			"version": "1.20.2",
			"resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
			"integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
			"dependencies": {
				"bytes": "3.1.2",
				"content-type": "~1.0.5",
				"debug": "2.6.9",
				"depd": "2.0.0",
				"destroy": "1.2.0",
				"http-errors": "2.0.0",
				"iconv-lite": "0.4.24",
				"on-finished": "2.4.1",
				"qs": "6.11.0",
				"raw-body": "2.5.2",
				"type-is": "~1.6.18",
				"unpipe": "1.0.0"
			},
			"engines": {
				"node": ">= 0.8",
				"npm": "1.2.8000 || >= 1.4.16"
			}
		},
		"node_modules/body-parser/node_modules/debug": {
			"version": "2.6.9",
			"resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
			"integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
			"dependencies": {
				"ms": "2.0.0"
			}
		},
		"node_modules/body-parser/node_modules/ms": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
			"integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
		},
		"node_modules/body-parser/node_modules/qs": {
			"version": "6.11.0",
			"resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
			"integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
			"dependencies": {
				"side-channel": "^1.0.4"
			},
			"engines": {
				"node": ">=0.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/bowser": {
			"version": "2.11.0",
			"resolved": "https://registry.npmjs.org/bowser/-/bowser-2.11.0.tgz",
			"integrity": "sha512-AlcaJBi/pqqJBIQ8U9Mcpc9i8Aqxn88Skv5d+xBX006BY5u8N3mGLHa5Lgppa7L/HfwgwLgZ6NYs+Ag6uUmJRA=="
		},
		"node_modules/brace-expansion": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
			"integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
			"dependencies": {
				"balanced-match": "^1.0.0"
			}
		},
		"node_modules/braces": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
			"integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
			"dependencies": {
				"fill-range": "^7.1.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/brotli": {
			"version": "1.3.3",
			"resolved": "https://registry.npmjs.org/brotli/-/brotli-1.3.3.tgz",
			"integrity": "sha512-oTKjJdShmDuGW94SyyaoQvAjf30dZaHnjJ8uAF+u2/vGJkJbJPJAT1gDiOJP5v1Zb6f9KEyW/1HpuaWIXtGHPg==",
			"dependencies": {
				"base64-js": "^1.1.2"
			}
		},
		"node_modules/browser-image-resizer": {
			"version": "2.4.1",
			"resolved": "https://registry.npmjs.org/browser-image-resizer/-/browser-image-resizer-2.4.1.tgz",
			"integrity": "sha512-gqrmr7+NTI9FgZVVyw/GIqwJE3MhNWaBn1R5ptu75r+/M5ncyntSMQYuYhOPonm44qQNnkGN9cnghlpd9h1Hug=="
		},
		"node_modules/browserslist": {
			"version": "4.23.3",
			"resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.23.3.tgz",
			"integrity": "sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/browserslist"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/browserslist"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"dependencies": {
				"caniuse-lite": "^1.0.30001646",
				"electron-to-chromium": "^1.5.4",
				"node-releases": "^2.0.18",
				"update-browserslist-db": "^1.1.0"
			},
			"bin": {
				"browserslist": "cli.js"
			},
			"engines": {
				"node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
			}
		},
		"node_modules/bson": {
			"version": "5.5.1",
			"resolved": "https://registry.npmjs.org/bson/-/bson-5.5.1.tgz",
			"integrity": "sha512-ix0EwukN2EpC0SRWIj/7B5+A6uQMQy6KMREI9qQqvgpkV2frH63T0UDVd1SYedL6dNCmDBYB3QtXi4ISk9YT+g==",
			"engines": {
				"node": ">=14.20.1"
			}
		},
		"node_modules/buffer": {
			"version": "6.0.3",
			"resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
			"integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			],
			"dependencies": {
				"base64-js": "^1.3.1",
				"ieee754": "^1.2.1"
			}
		},
		"node_modules/buffer-crc32": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-1.0.0.tgz",
			"integrity": "sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w==",
			"dev": true,
			"engines": {
				"node": ">=8.0.0"
			}
		},
		"node_modules/buffer-equal-constant-time": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
			"integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
		},
		"node_modules/bufferutil": {
			"version": "4.0.8",
			"resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.8.tgz",
			"integrity": "sha512-4T53u4PdgsXqKaIctwF8ifXlRTTmEPJ8iEPWFdGZvcf7sbwYo6FKFEX9eNNAnzFZ7EzJAQ3CJeOtCRA4rDp7Pw==",
			"hasInstallScript": true,
			"dependencies": {
				"node-gyp-build": "^4.3.0"
			},
			"engines": {
				"node": ">=6.14.2"
			}
		},
		"node_modules/builtin-modules": {
			"version": "3.3.0",
			"resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
			"integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
			"dev": true,
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/bytes": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
			"integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/cac": {
			"version": "6.7.14",
			"resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
			"integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/call-bind": {
			"version": "1.0.7",
			"resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
			"integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
			"dependencies": {
				"es-define-property": "^1.0.0",
				"es-errors": "^1.3.0",
				"function-bind": "^1.1.2",
				"get-intrinsic": "^1.2.4",
				"set-function-length": "^1.2.1"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/callsites": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
			"integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/camelcase-css": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
			"integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/camelize": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
			"integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/caniuse-lite": {
			"version": "1.0.30001659",
			"resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001659.tgz",
			"integrity": "sha512-Qxxyfv3RdHAfJcXelgf0hU4DFUVXBGTjqrBUZLUh8AtlGnsDo+CnncYtTd95+ZKfnANUOzxyIQCuU/UeBZBYoA==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/browserslist"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/caniuse-lite"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			]
		},
		"node_modules/chai": {
			"version": "4.5.0",
			"resolved": "https://registry.npmjs.org/chai/-/chai-4.5.0.tgz",
			"integrity": "sha512-RITGBfijLkBddZvnn8jdqoTypxvqbOLYQkGGxXzeFjVHvudaPw0HNFD9x928/eUwYWd2dPCugVqspGALTZZQKw==",
			"dev": true,
			"dependencies": {
				"assertion-error": "^1.1.0",
				"check-error": "^1.0.3",
				"deep-eql": "^4.1.3",
				"get-func-name": "^2.0.2",
				"loupe": "^2.3.6",
				"pathval": "^1.1.1",
				"type-detect": "^4.1.0"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/chalk": {
			"version": "4.1.2",
			"resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
			"integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
			"dependencies": {
				"ansi-styles": "^4.1.0",
				"supports-color": "^7.1.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/chalk/chalk?sponsor=1"
			}
		},
		"node_modules/check-error": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/check-error/-/check-error-1.0.3.tgz",
			"integrity": "sha512-iKEoDYaRmd1mxM90a2OEfWhjsjPpYPuQ+lMYsoxB126+t8fw7ySEO48nmDg5COTjxDI65/Y2OWpeEHk3ZOe8zg==",
			"dev": true,
			"dependencies": {
				"get-func-name": "^2.0.2"
			},
			"engines": {
				"node": "*"
			}
		},
		"node_modules/chokidar": {
			"version": "3.6.0",
			"resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
			"integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
			"dependencies": {
				"anymatch": "~3.1.2",
				"braces": "~3.0.2",
				"glob-parent": "~5.1.2",
				"is-binary-path": "~2.1.0",
				"is-glob": "~4.0.1",
				"normalize-path": "~3.0.0",
				"readdirp": "~3.6.0"
			},
			"engines": {
				"node": ">= 8.10.0"
			},
			"funding": {
				"url": "https://paulmillr.com/funding/"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.2"
			}
		},
		"node_modules/chokidar/node_modules/glob-parent": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
			"dependencies": {
				"is-glob": "^4.0.1"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/chownr": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
			"integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/cli-cursor": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz",
			"integrity": "sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==",
			"dependencies": {
				"restore-cursor": "^5.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/cli-spinners": {
			"version": "2.9.2",
			"resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
			"integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/cli-truncate": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-4.0.0.tgz",
			"integrity": "sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==",
			"dependencies": {
				"slice-ansi": "^5.0.0",
				"string-width": "^7.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/cli-truncate/node_modules/ansi-regex": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
			"integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/cli-truncate/node_modules/string-width": {
			"version": "7.2.0",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
			"integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
			"dependencies": {
				"emoji-regex": "^10.3.0",
				"get-east-asian-width": "^1.0.0",
				"strip-ansi": "^7.1.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/cli-truncate/node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/cli-width": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
			"integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
			"engines": {
				"node": ">= 12"
			}
		},
		"node_modules/cliui": {
			"version": "8.0.1",
			"resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
			"integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
			"dependencies": {
				"string-width": "^4.2.0",
				"strip-ansi": "^6.0.1",
				"wrap-ansi": "^7.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/cliui/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
		},
		"node_modules/cliui/node_modules/is-fullwidth-code-point": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/cliui/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/cliui/node_modules/wrap-ansi": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
			"integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
			"dependencies": {
				"ansi-styles": "^4.0.0",
				"string-width": "^4.1.0",
				"strip-ansi": "^6.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/code-red": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/code-red/-/code-red-1.0.4.tgz",
			"integrity": "sha512-7qJWqItLA8/VPVlKJlFXU+NBlo/qyfs39aJcuMT/2ere32ZqvF5OSxgdM5xOfJJ7O429gg2HM47y8v9P+9wrNw==",
			"dev": true,
			"dependencies": {
				"@jridgewell/sourcemap-codec": "^1.4.15",
				"@types/estree": "^1.0.1",
				"acorn": "^8.10.0",
				"estree-walker": "^3.0.3",
				"periscopic": "^3.1.0"
			}
		},
		"node_modules/code-red/node_modules/estree-walker": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
			"integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
			"dev": true,
			"dependencies": {
				"@types/estree": "^1.0.0"
			}
		},
		"node_modules/cohere-ai": {
			"version": "7.13.0",
			"resolved": "https://registry.npmjs.org/cohere-ai/-/cohere-ai-7.13.0.tgz",
			"integrity": "sha512-/VTqq2dW7YkQEfeBwEmckAHorQuw1exnfrO3orsixVXASr71oF3TL0w/xi9ZVN9xsoYpXZyVaiD8GBxLEiGJ7Q==",
			"optional": true,
			"dependencies": {
				"@aws-sdk/client-sagemaker": "^3.583.0",
				"@aws-sdk/credential-providers": "^3.583.0",
				"@aws-sdk/protocol-http": "^3.374.0",
				"@aws-sdk/signature-v4": "^3.374.0",
				"form-data": "^4.0.0",
				"form-data-encoder": "^4.0.2",
				"formdata-node": "^6.0.3",
				"js-base64": "3.7.2",
				"node-fetch": "2.7.0",
				"qs": "6.11.2",
				"readable-stream": "^4.5.2",
				"url-join": "4.0.1"
			}
		},
		"node_modules/cohere-ai/node_modules/form-data-encoder": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-4.0.2.tgz",
			"integrity": "sha512-KQVhvhK8ZkWzxKxOr56CPulAhH3dobtuQ4+hNQ+HekH/Wp5gSOafqRAeTphQUJAIk0GBvHZgJ2ZGRWd5kphMuw==",
			"optional": true,
			"engines": {
				"node": ">= 18"
			}
		},
		"node_modules/cohere-ai/node_modules/formdata-node": {
			"version": "6.0.3",
			"resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-6.0.3.tgz",
			"integrity": "sha512-8e1++BCiTzUno9v5IZ2J6bv4RU+3UKDmqWUQD0MIMVCd9AdhWkO1gw57oo1mNEX1dMq2EGI+FbWz4B92pscSQg==",
			"optional": true,
			"engines": {
				"node": ">= 18"
			}
		},
		"node_modules/color": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
			"integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
			"dependencies": {
				"color-convert": "^2.0.1",
				"color-string": "^1.9.0"
			},
			"engines": {
				"node": ">=12.5.0"
			}
		},
		"node_modules/color-convert": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
			"integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
			"dependencies": {
				"color-name": "~1.1.4"
			},
			"engines": {
				"node": ">=7.0.0"
			}
		},
		"node_modules/color-name": {
			"version": "1.1.4",
			"resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
			"integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
		},
		"node_modules/color-string": {
			"version": "1.9.1",
			"resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
			"integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
			"dependencies": {
				"color-name": "^1.0.0",
				"simple-swizzle": "^0.2.2"
			}
		},
		"node_modules/colorette": {
			"version": "2.0.20",
			"resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
			"integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w=="
		},
		"node_modules/combined-stream": {
			"version": "1.0.8",
			"resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
			"integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
			"dependencies": {
				"delayed-stream": "~1.0.0"
			},
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/commander": {
			"version": "8.3.0",
			"resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
			"integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
			"peer": true,
			"engines": {
				"node": ">= 12"
			}
		},
		"node_modules/commondir": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
			"integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
			"dev": true
		},
		"node_modules/concat-map": {
			"version": "0.0.1",
			"resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
			"integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
			"dev": true
		},
		"node_modules/concordance": {
			"version": "5.0.4",
			"resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
			"integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
			"dev": true,
			"dependencies": {
				"date-time": "^3.1.0",
				"esutils": "^2.0.3",
				"fast-diff": "^1.2.0",
				"js-string-escape": "^1.0.1",
				"lodash": "^4.17.15",
				"md5-hex": "^3.0.1",
				"semver": "^7.3.2",
				"well-known-symbols": "^2.0.0"
			},
			"engines": {
				"node": ">=10.18.0 <11 || >=12.14.0 <13 || >=14"
			}
		},
		"node_modules/confbox": {
			"version": "0.1.7",
			"resolved": "https://registry.npmjs.org/confbox/-/confbox-0.1.7.tgz",
			"integrity": "sha512-uJcB/FKZtBMCJpK8MQji6bJHgu1tixKPxRLeGkNzBoOZzpnZUJm0jm2/sBDWcuBx1dYgxV4JU+g5hmNxCyAmdA==",
			"dev": true
		},
		"node_modules/content-disposition": {
			"version": "0.5.4",
			"resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
			"integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
			"dependencies": {
				"safe-buffer": "5.2.1"
			},
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/content-type": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
			"integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/cookie": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
			"integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/cookie-signature": {
			"version": "1.0.6",
			"resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
			"integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
		},
		"node_modules/create-require": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
			"integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
			"devOptional": true
		},
		"node_modules/cross-spawn": {
			"version": "7.0.3",
			"resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
			"integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
			"dependencies": {
				"path-key": "^3.1.0",
				"shebang-command": "^2.0.0",
				"which": "^2.0.1"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/css-background-parser": {
			"version": "0.1.0",
			"resolved": "https://registry.npmjs.org/css-background-parser/-/css-background-parser-0.1.0.tgz",
			"integrity": "sha512-2EZLisiZQ+7m4wwur/qiYJRniHX4K5Tc9w93MT3AS0WS1u5kaZ4FKXlOTBhOjc+CgEgPiGY+fX1yWD8UwpEqUA=="
		},
		"node_modules/css-box-shadow": {
			"version": "1.0.0-3",
			"resolved": "https://registry.npmjs.org/css-box-shadow/-/css-box-shadow-1.0.0-3.tgz",
			"integrity": "sha512-9jaqR6e7Ohds+aWwmhe6wILJ99xYQbfmK9QQB9CcMjDbTxPZjwEmUQpU91OG05Xgm8BahT5fW+svbsQGjS/zPg=="
		},
		"node_modules/css-color-keywords": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
			"integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/css-to-react-native": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
			"integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
			"dependencies": {
				"camelize": "^1.0.0",
				"css-color-keywords": "^1.0.0",
				"postcss-value-parser": "^4.0.2"
			}
		},
		"node_modules/css-tree": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/css-tree/-/css-tree-2.3.1.tgz",
			"integrity": "sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==",
			"dev": true,
			"dependencies": {
				"mdn-data": "2.0.30",
				"source-map-js": "^1.0.1"
			},
			"engines": {
				"node": "^10 || ^12.20.0 || ^14.13.0 || >=15.0.0"
			}
		},
		"node_modules/cssesc": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
			"integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
			"bin": {
				"cssesc": "bin/cssesc"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/cssstyle": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-3.0.0.tgz",
			"integrity": "sha512-N4u2ABATi3Qplzf0hWbVCdjenim8F3ojEXpBDF5hBpjzW182MjNGLqfmQ0SkSPeQ+V86ZXgeH8aXj6kayd4jgg==",
			"dependencies": {
				"rrweb-cssom": "^0.6.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/data-urls": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/data-urls/-/data-urls-4.0.0.tgz",
			"integrity": "sha512-/mMTei/JXPqvFqQtfyTowxmJVwr2PVAeCcDxyFf6LhoOu/09TX2OX3kb2wzi4DMXcfj4OItwDOnhl5oziPnT6g==",
			"dependencies": {
				"abab": "^2.0.6",
				"whatwg-mimetype": "^3.0.0",
				"whatwg-url": "^12.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/date-fns": {
			"version": "2.30.0",
			"resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.30.0.tgz",
			"integrity": "sha512-fnULvOpxnC5/Vg3NCiWelDsLiUc9bRwAPs/+LfTLNvetFCtCTN+yQz15C/fs4AwX1R9K5GLtLfn8QW+dWisaAw==",
			"dependencies": {
				"@babel/runtime": "^7.21.0"
			},
			"engines": {
				"node": ">=0.11"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/date-fns"
			}
		},
		"node_modules/date-time": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
			"integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
			"dev": true,
			"dependencies": {
				"time-zone": "^1.0.0"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/dateformat": {
			"version": "4.6.3",
			"resolved": "https://registry.npmjs.org/dateformat/-/dateformat-4.6.3.tgz",
			"integrity": "sha512-2P0p0pFGzHS5EMnhdxQi7aJN+iMheud0UhG4dlE1DLAlvL8JHjJJTX/CSm4JXwV0Ka5nGk3zC5mcb5bUQUxxMA==",
			"engines": {
				"node": "*"
			}
		},
		"node_modules/debug": {
			"version": "4.3.7",
			"resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
			"integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
			"dependencies": {
				"ms": "^2.1.3"
			},
			"engines": {
				"node": ">=6.0"
			},
			"peerDependenciesMeta": {
				"supports-color": {
					"optional": true
				}
			}
		},
		"node_modules/decimal.js": {
			"version": "10.4.3",
			"resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
			"integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA=="
		},
		"node_modules/deep-eql": {
			"version": "4.1.4",
			"resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-4.1.4.tgz",
			"integrity": "sha512-SUwdGfqdKOwxCPeVYjwSyRpJ7Z+fhpwIAtmCUdZIWZ/YP5R9WAsyuSgpLVDi9bjWoN2LXHNss/dk3urXtdQxGg==",
			"dev": true,
			"dependencies": {
				"type-detect": "^4.0.0"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/deep-is": {
			"version": "0.1.4",
			"resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
			"integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ=="
		},
		"node_modules/deepmerge": {
			"version": "4.3.1",
			"resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
			"integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/define-data-property": {
			"version": "1.1.4",
			"resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
			"integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
			"dependencies": {
				"es-define-property": "^1.0.0",
				"es-errors": "^1.3.0",
				"gopd": "^1.0.1"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/delayed-stream": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
			"integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/depd": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
			"integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/dequal": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
			"integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/destroy": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
			"integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
			"engines": {
				"node": ">= 0.8",
				"npm": "1.2.8000 || >= 1.4.16"
			}
		},
		"node_modules/detect-indent": {
			"version": "6.1.0",
			"resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-6.1.0.tgz",
			"integrity": "sha512-reYkTUJAZb9gUuZ2RvVCNhVHdg62RHnJ7WJl8ftMi4diZ6NWlciOzQN88pUhSELEwflJht4oQDv0F0BMlwaYtA==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/detect-libc": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
			"integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/devalue": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/devalue/-/devalue-5.0.0.tgz",
			"integrity": "sha512-gO+/OMXF7488D+u3ue+G7Y4AA3ZmUnB3eHJXmBTgNHvr4ZNzl36A0ZtG+XCRNYCkYx/bFmw4qtkoFLa+wSrwAA==",
			"dev": true
		},
		"node_modules/didyoumean": {
			"version": "1.2.2",
			"resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
			"integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw=="
		},
		"node_modules/diff": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
			"integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
			"devOptional": true,
			"engines": {
				"node": ">=0.3.1"
			}
		},
		"node_modules/dir-glob": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
			"integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
			"dev": true,
			"dependencies": {
				"path-type": "^4.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/dlv": {
			"version": "1.1.3",
			"resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
			"integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA=="
		},
		"node_modules/doctrine": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
			"integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
			"dev": true,
			"dependencies": {
				"esutils": "^2.0.2"
			},
			"engines": {
				"node": ">=6.0.0"
			}
		},
		"node_modules/dom-serializer": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
			"integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
			"dependencies": {
				"domelementtype": "^2.3.0",
				"domhandler": "^5.0.2",
				"entities": "^4.2.0"
			},
			"funding": {
				"url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
			}
		},
		"node_modules/domelementtype": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
			"integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/fb55"
				}
			]
		},
		"node_modules/domexception": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/domexception/-/domexception-4.0.0.tgz",
			"integrity": "sha512-A2is4PLG+eeSfoTMA95/s4pvAoSo2mKtiM5jlHkAVewmiO8ISFTFKZjH7UAM1Atli/OT/7JHOrJRJiMKUZKYBw==",
			"deprecated": "Use your platform's native DOMException instead",
			"dependencies": {
				"webidl-conversions": "^7.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/domhandler": {
			"version": "5.0.3",
			"resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz",
			"integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==",
			"dependencies": {
				"domelementtype": "^2.3.0"
			},
			"engines": {
				"node": ">= 4"
			},
			"funding": {
				"url": "https://github.com/fb55/domhandler?sponsor=1"
			}
		},
		"node_modules/dompurify": {
			"version": "3.1.6",
			"resolved": "https://registry.npmjs.org/dompurify/-/dompurify-3.1.6.tgz",
			"integrity": "sha512-cTOAhc36AalkjtBpfG6O8JimdTMWNXjiePT2xQH/ppBGi/4uIpmj8eKyIkMJErXWARyINV/sB38yf8JCLF5pbQ==",
			"dev": true
		},
		"node_modules/domutils": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/domutils/-/domutils-3.1.0.tgz",
			"integrity": "sha512-H78uMmQtI2AhgDJjWeQmHwJJ2bLPD3GMmO7Zja/ZZh84wkm+4ut+IUnUdRa8uCGX88DiVx1j6FRe1XfxEgjEZA==",
			"dependencies": {
				"dom-serializer": "^2.0.0",
				"domelementtype": "^2.3.0",
				"domhandler": "^5.0.3"
			},
			"funding": {
				"url": "https://github.com/fb55/domutils?sponsor=1"
			}
		},
		"node_modules/dotenv": {
			"version": "16.4.5",
			"resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.5.tgz",
			"integrity": "sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://dotenvx.com"
			}
		},
		"node_modules/eastasianwidth": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
			"integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
		},
		"node_modules/ecdsa-sig-formatter": {
			"version": "1.0.11",
			"resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
			"integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
			"dependencies": {
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/ee-first": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
			"integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
		},
		"node_modules/electron-to-chromium": {
			"version": "1.5.18",
			"resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.18.tgz",
			"integrity": "sha512-1OfuVACu+zKlmjsNdcJuVQuVE61sZOLbNM4JAQ1Rvh6EOj0/EUKhMJjRH73InPlXSh8HIJk1cVZ8pyOV/FMdUQ=="
		},
		"node_modules/emoji-regex": {
			"version": "10.4.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
			"integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw=="
		},
		"node_modules/encodeurl": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
			"integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/end-of-stream": {
			"version": "1.4.4",
			"resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
			"integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
			"dependencies": {
				"once": "^1.4.0"
			}
		},
		"node_modules/entities": {
			"version": "4.5.0",
			"resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
			"integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
			"engines": {
				"node": ">=0.12"
			},
			"funding": {
				"url": "https://github.com/fb55/entities?sponsor=1"
			}
		},
		"node_modules/environment": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/environment/-/environment-1.1.0.tgz",
			"integrity": "sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/es-define-property": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
			"integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
			"dependencies": {
				"get-intrinsic": "^1.2.4"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/es-errors": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
			"integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/es6-promise": {
			"version": "3.3.1",
			"resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-3.3.1.tgz",
			"integrity": "sha512-SOp9Phqvqn7jtEUxPWdWfWoLmyt2VaJ6MpvP9Comy1MceMXqE6bxvaTu4iaxpYYPzhny28Lc+M87/c2cPK6lDg==",
			"dev": true
		},
		"node_modules/esbuild": {
			"version": "0.21.5",
			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
			"integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
			"dev": true,
			"hasInstallScript": true,
			"bin": {
				"esbuild": "bin/esbuild"
			},
			"engines": {
				"node": ">=12"
			},
			"optionalDependencies": {
				"@esbuild/aix-ppc64": "0.21.5",
				"@esbuild/android-arm": "0.21.5",
				"@esbuild/android-arm64": "0.21.5",
				"@esbuild/android-x64": "0.21.5",
				"@esbuild/darwin-arm64": "0.21.5",
				"@esbuild/darwin-x64": "0.21.5",
				"@esbuild/freebsd-arm64": "0.21.5",
				"@esbuild/freebsd-x64": "0.21.5",
				"@esbuild/linux-arm": "0.21.5",
				"@esbuild/linux-arm64": "0.21.5",
				"@esbuild/linux-ia32": "0.21.5",
				"@esbuild/linux-loong64": "0.21.5",
				"@esbuild/linux-mips64el": "0.21.5",
				"@esbuild/linux-ppc64": "0.21.5",
				"@esbuild/linux-riscv64": "0.21.5",
				"@esbuild/linux-s390x": "0.21.5",
				"@esbuild/linux-x64": "0.21.5",
				"@esbuild/netbsd-x64": "0.21.5",
				"@esbuild/openbsd-x64": "0.21.5",
				"@esbuild/sunos-x64": "0.21.5",
				"@esbuild/win32-arm64": "0.21.5",
				"@esbuild/win32-ia32": "0.21.5",
				"@esbuild/win32-x64": "0.21.5"
			}
		},
		"node_modules/escalade": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
			"integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/escape-html": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
			"integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
		},
		"node_modules/escape-string-regexp": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
			"integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/escodegen": {
			"version": "1.14.3",
			"resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.14.3.tgz",
			"integrity": "sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==",
			"dependencies": {
				"esprima": "^4.0.1",
				"estraverse": "^4.2.0",
				"esutils": "^2.0.2",
				"optionator": "^0.8.1"
			},
			"bin": {
				"escodegen": "bin/escodegen.js",
				"esgenerate": "bin/esgenerate.js"
			},
			"engines": {
				"node": ">=4.0"
			},
			"optionalDependencies": {
				"source-map": "~0.6.1"
			}
		},
		"node_modules/escodegen/node_modules/esprima": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
			"integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
			"bin": {
				"esparse": "bin/esparse.js",
				"esvalidate": "bin/esvalidate.js"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/escodegen/node_modules/estraverse": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
			"integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
			"engines": {
				"node": ">=4.0"
			}
		},
		"node_modules/escodegen/node_modules/levn": {
			"version": "0.3.0",
			"resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
			"integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
			"dependencies": {
				"prelude-ls": "~1.1.2",
				"type-check": "~0.3.2"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/escodegen/node_modules/optionator": {
			"version": "0.8.3",
			"resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
			"integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
			"dependencies": {
				"deep-is": "~0.1.3",
				"fast-levenshtein": "~2.0.6",
				"levn": "~0.3.0",
				"prelude-ls": "~1.1.2",
				"type-check": "~0.3.2",
				"word-wrap": "~1.2.3"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/escodegen/node_modules/prelude-ls": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
			"integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/escodegen/node_modules/type-check": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
			"integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
			"dependencies": {
				"prelude-ls": "~1.1.2"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/eslint": {
			"version": "8.57.0",
			"resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.0.tgz",
			"integrity": "sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==",
			"dev": true,
			"dependencies": {
				"@eslint-community/eslint-utils": "^4.2.0",
				"@eslint-community/regexpp": "^4.6.1",
				"@eslint/eslintrc": "^2.1.4",
				"@eslint/js": "8.57.0",
				"@humanwhocodes/config-array": "^0.11.14",
				"@humanwhocodes/module-importer": "^1.0.1",
				"@nodelib/fs.walk": "^1.2.8",
				"@ungap/structured-clone": "^1.2.0",
				"ajv": "^6.12.4",
				"chalk": "^4.0.0",
				"cross-spawn": "^7.0.2",
				"debug": "^4.3.2",
				"doctrine": "^3.0.0",
				"escape-string-regexp": "^4.0.0",
				"eslint-scope": "^7.2.2",
				"eslint-visitor-keys": "^3.4.3",
				"espree": "^9.6.1",
				"esquery": "^1.4.2",
				"esutils": "^2.0.2",
				"fast-deep-equal": "^3.1.3",
				"file-entry-cache": "^6.0.1",
				"find-up": "^5.0.0",
				"glob-parent": "^6.0.2",
				"globals": "^13.19.0",
				"graphemer": "^1.4.0",
				"ignore": "^5.2.0",
				"imurmurhash": "^0.1.4",
				"is-glob": "^4.0.0",
				"is-path-inside": "^3.0.3",
				"js-yaml": "^4.1.0",
				"json-stable-stringify-without-jsonify": "^1.0.1",
				"levn": "^0.4.1",
				"lodash.merge": "^4.6.2",
				"minimatch": "^3.1.2",
				"natural-compare": "^1.4.0",
				"optionator": "^0.9.3",
				"strip-ansi": "^6.0.1",
				"text-table": "^0.2.0"
			},
			"bin": {
				"eslint": "bin/eslint.js"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/eslint"
			}
		},
		"node_modules/eslint-compat-utils": {
			"version": "0.5.1",
			"resolved": "https://registry.npmjs.org/eslint-compat-utils/-/eslint-compat-utils-0.5.1.tgz",
			"integrity": "sha512-3z3vFexKIEnjHE3zCMRo6fn/e44U7T1khUjg+Hp0ZQMCigh28rALD0nPFBcGZuiLC5rLZa2ubQHDRln09JfU2Q==",
			"dev": true,
			"dependencies": {
				"semver": "^7.5.4"
			},
			"engines": {
				"node": ">=12"
			},
			"peerDependencies": {
				"eslint": ">=6.0.0"
			}
		},
		"node_modules/eslint-config-prettier": {
			"version": "8.10.0",
			"resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-8.10.0.tgz",
			"integrity": "sha512-SM8AMJdeQqRYT9O9zguiruQZaN7+z+E4eAP9oiLNGKMtomwaB1E9dcgUD6ZAn/eQAb52USbvezbiljfZUhbJcg==",
			"dev": true,
			"bin": {
				"eslint-config-prettier": "bin/cli.js"
			},
			"peerDependencies": {
				"eslint": ">=7.0.0"
			}
		},
		"node_modules/eslint-plugin-svelte": {
			"version": "2.43.0",
			"resolved": "https://registry.npmjs.org/eslint-plugin-svelte/-/eslint-plugin-svelte-2.43.0.tgz",
			"integrity": "sha512-REkxQWvg2pp7QVLxQNa+dJ97xUqRe7Y2JJbSWkHSuszu0VcblZtXkPBPckkivk99y5CdLw4slqfPylL2d/X4jQ==",
			"dev": true,
			"dependencies": {
				"@eslint-community/eslint-utils": "^4.4.0",
				"@jridgewell/sourcemap-codec": "^1.4.15",
				"eslint-compat-utils": "^0.5.1",
				"esutils": "^2.0.3",
				"known-css-properties": "^0.34.0",
				"postcss": "^8.4.38",
				"postcss-load-config": "^3.1.4",
				"postcss-safe-parser": "^6.0.0",
				"postcss-selector-parser": "^6.1.0",
				"semver": "^7.6.2",
				"svelte-eslint-parser": "^0.41.0"
			},
			"engines": {
				"node": "^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/ota-meshi"
			},
			"peerDependencies": {
				"eslint": "^7.0.0 || ^8.0.0-0 || ^9.0.0-0",
				"svelte": "^3.37.0 || ^4.0.0 || ^5.0.0-next.191"
			},
			"peerDependenciesMeta": {
				"svelte": {
					"optional": true
				}
			}
		},
		"node_modules/eslint-plugin-svelte/node_modules/postcss-selector-parser": {
			"version": "6.1.2",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
			"dev": true,
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/eslint-scope": {
			"version": "7.2.2",
			"resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
			"integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
			"dev": true,
			"dependencies": {
				"esrecurse": "^4.3.0",
				"estraverse": "^5.2.0"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/eslint"
			}
		},
		"node_modules/eslint-visitor-keys": {
			"version": "3.4.3",
			"resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
			"integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
			"dev": true,
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/eslint"
			}
		},
		"node_modules/eslint/node_modules/brace-expansion": {
			"version": "1.1.11",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			"integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			"dev": true,
			"dependencies": {
				"balanced-match": "^1.0.0",
				"concat-map": "0.0.1"
			}
		},
		"node_modules/eslint/node_modules/minimatch": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			"integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			"dev": true,
			"dependencies": {
				"brace-expansion": "^1.1.7"
			},
			"engines": {
				"node": "*"
			}
		},
		"node_modules/esm-env": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/esm-env/-/esm-env-1.0.0.tgz",
			"integrity": "sha512-Cf6VksWPsTuW01vU9Mk/3vRue91Zevka5SjyNf3nEpokFRuqt/KjUQoGAwq9qMmhpLTHmXzSIrFRw8zxWzmFBA==",
			"dev": true
		},
		"node_modules/espree": {
			"version": "9.6.1",
			"resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
			"integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
			"dev": true,
			"dependencies": {
				"acorn": "^8.9.0",
				"acorn-jsx": "^5.3.2",
				"eslint-visitor-keys": "^3.4.1"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/eslint"
			}
		},
		"node_modules/esprima": {
			"version": "1.2.2",
			"resolved": "https://registry.npmjs.org/esprima/-/esprima-1.2.2.tgz",
			"integrity": "sha512-+JpPZam9w5DuJ3Q67SqsMGtiHKENSMRVoxvArfJZK01/BfLEObtZ6orJa/MtoGNR/rfMgp5837T41PAmTwAv/A==",
			"bin": {
				"esparse": "bin/esparse.js",
				"esvalidate": "bin/esvalidate.js"
			},
			"engines": {
				"node": ">=0.4.0"
			}
		},
		"node_modules/esquery": {
			"version": "1.6.0",
			"resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
			"integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
			"dev": true,
			"dependencies": {
				"estraverse": "^5.1.0"
			},
			"engines": {
				"node": ">=0.10"
			}
		},
		"node_modules/esrecurse": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
			"integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
			"dev": true,
			"dependencies": {
				"estraverse": "^5.2.0"
			},
			"engines": {
				"node": ">=4.0"
			}
		},
		"node_modules/estraverse": {
			"version": "5.3.0",
			"resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
			"integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
			"dev": true,
			"engines": {
				"node": ">=4.0"
			}
		},
		"node_modules/estree-walker": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
			"integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
			"dev": true
		},
		"node_modules/esutils": {
			"version": "2.0.3",
			"resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
			"integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/etag": {
			"version": "1.8.1",
			"resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
			"integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/event-target-shim": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
			"integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/eventemitter3": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
			"integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA=="
		},
		"node_modules/events": {
			"version": "3.3.0",
			"resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
			"integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
			"engines": {
				"node": ">=0.8.x"
			}
		},
		"node_modules/eventsource": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/eventsource/-/eventsource-2.0.2.tgz",
			"integrity": "sha512-IzUmBGPR3+oUG9dUeXynyNmf91/3zUSJg1lCktzKw47OXuhco54U3r9B7O4XX+Rb1Itm9OZ2b0RkTs10bICOxA==",
			"engines": {
				"node": ">=12.0.0"
			}
		},
		"node_modules/execa": {
			"version": "8.0.1",
			"resolved": "https://registry.npmjs.org/execa/-/execa-8.0.1.tgz",
			"integrity": "sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==",
			"dependencies": {
				"cross-spawn": "^7.0.3",
				"get-stream": "^8.0.1",
				"human-signals": "^5.0.0",
				"is-stream": "^3.0.0",
				"merge-stream": "^2.0.0",
				"npm-run-path": "^5.1.0",
				"onetime": "^6.0.0",
				"signal-exit": "^4.1.0",
				"strip-final-newline": "^3.0.0"
			},
			"engines": {
				"node": ">=16.17"
			},
			"funding": {
				"url": "https://github.com/sindresorhus/execa?sponsor=1"
			}
		},
		"node_modules/execa/node_modules/get-stream": {
			"version": "8.0.1",
			"resolved": "https://registry.npmjs.org/get-stream/-/get-stream-8.0.1.tgz",
			"integrity": "sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==",
			"engines": {
				"node": ">=16"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/execa/node_modules/is-stream": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz",
			"integrity": "sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==",
			"engines": {
				"node": "^12.20.0 || ^14.13.1 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/express": {
			"version": "4.19.2",
			"resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
			"integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
			"dependencies": {
				"accepts": "~1.3.8",
				"array-flatten": "1.1.1",
				"body-parser": "1.20.2",
				"content-disposition": "0.5.4",
				"content-type": "~1.0.4",
				"cookie": "0.6.0",
				"cookie-signature": "1.0.6",
				"debug": "2.6.9",
				"depd": "2.0.0",
				"encodeurl": "~1.0.2",
				"escape-html": "~1.0.3",
				"etag": "~1.8.1",
				"finalhandler": "1.2.0",
				"fresh": "0.5.2",
				"http-errors": "2.0.0",
				"merge-descriptors": "1.0.1",
				"methods": "~1.1.2",
				"on-finished": "2.4.1",
				"parseurl": "~1.3.3",
				"path-to-regexp": "0.1.7",
				"proxy-addr": "~2.0.7",
				"qs": "6.11.0",
				"range-parser": "~1.2.1",
				"safe-buffer": "5.2.1",
				"send": "0.18.0",
				"serve-static": "1.15.0",
				"setprototypeof": "1.2.0",
				"statuses": "2.0.1",
				"type-is": "~1.6.18",
				"utils-merge": "1.0.1",
				"vary": "~1.1.2"
			},
			"engines": {
				"node": ">= 0.10.0"
			}
		},
		"node_modules/express/node_modules/debug": {
			"version": "2.6.9",
			"resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
			"integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
			"dependencies": {
				"ms": "2.0.0"
			}
		},
		"node_modules/express/node_modules/ms": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
			"integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
		},
		"node_modules/express/node_modules/qs": {
			"version": "6.11.0",
			"resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
			"integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
			"dependencies": {
				"side-channel": "^1.0.4"
			},
			"engines": {
				"node": ">=0.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/extend": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
			"integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
		},
		"node_modules/fast-copy": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/fast-copy/-/fast-copy-3.0.2.tgz",
			"integrity": "sha512-dl0O9Vhju8IrcLndv2eU4ldt1ftXMqqfgN4H1cpmGV7P6jeB9FwpN9a2c8DPGE1Ys88rNUJVYDHq73CGAGOPfQ=="
		},
		"node_modules/fast-deep-equal": {
			"version": "3.1.3",
			"resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
			"integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
			"dev": true
		},
		"node_modules/fast-diff": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.3.0.tgz",
			"integrity": "sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==",
			"dev": true
		},
		"node_modules/fast-glob": {
			"version": "3.3.2",
			"resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
			"integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
			"dependencies": {
				"@nodelib/fs.stat": "^2.0.2",
				"@nodelib/fs.walk": "^1.2.3",
				"glob-parent": "^5.1.2",
				"merge2": "^1.3.0",
				"micromatch": "^4.0.4"
			},
			"engines": {
				"node": ">=8.6.0"
			}
		},
		"node_modules/fast-glob/node_modules/glob-parent": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
			"dependencies": {
				"is-glob": "^4.0.1"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/fast-json-stable-stringify": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
			"integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
			"dev": true
		},
		"node_modules/fast-levenshtein": {
			"version": "2.0.6",
			"resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
			"integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw=="
		},
		"node_modules/fast-redact": {
			"version": "3.5.0",
			"resolved": "https://registry.npmjs.org/fast-redact/-/fast-redact-3.5.0.tgz",
			"integrity": "sha512-dwsoQlS7h9hMeYUq1W++23NDcBLV4KqONnITDV9DjfS3q1SgDGVrBdvvTLUotWtPSD7asWDV9/CmsZPy8Hf70A==",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/fast-safe-stringify": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
			"integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA=="
		},
		"node_modules/fast-xml-parser": {
			"version": "4.4.1",
			"resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.4.1.tgz",
			"integrity": "sha512-xkjOecfnKGkSsOwtZ5Pz7Us/T6mrbPQrq0nh+aCO5V9nk5NLWmasAHumTKjiPJPWANe+kAZ84Jc8ooJkzZ88Sw==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/NaturalIntelligence"
				},
				{
					"type": "paypal",
					"url": "https://paypal.me/naturalintelligence"
				}
			],
			"dependencies": {
				"strnum": "^1.0.5"
			},
			"bin": {
				"fxparser": "src/cli/cli.js"
			}
		},
		"node_modules/fastq": {
			"version": "1.17.1",
			"resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
			"integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
			"dependencies": {
				"reusify": "^1.0.4"
			}
		},
		"node_modules/fetch-event-stream": {
			"version": "0.1.5",
			"resolved": "https://registry.npmjs.org/fetch-event-stream/-/fetch-event-stream-0.1.5.tgz",
			"integrity": "sha512-V1PWovkspxQfssq/NnxoEyQo1DV+MRK/laPuPblIZmSjMN8P5u46OhlFQznSr9p/t0Sp8Uc6SbM3yCMfr0KU8g=="
		},
		"node_modules/fflate": {
			"version": "0.7.4",
			"resolved": "https://registry.npmjs.org/fflate/-/fflate-0.7.4.tgz",
			"integrity": "sha512-5u2V/CDW15QM1XbbgS+0DfPxVB+jUKhWEKuuFuHncbk3tEEqzmoXL+2KyOFuKGqOnmdIy0/davWF1CkuwtibCw=="
		},
		"node_modules/file-entry-cache": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
			"integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
			"dev": true,
			"dependencies": {
				"flat-cache": "^3.0.4"
			},
			"engines": {
				"node": "^10.12.0 || >=12.0.0"
			}
		},
		"node_modules/file-type": {
			"version": "19.5.0",
			"resolved": "https://registry.npmjs.org/file-type/-/file-type-19.5.0.tgz",
			"integrity": "sha512-dMuq6WWnP6BpQY0zYJNpTtQWgeCImSMG0BTIzUBXvxbwc1HWP/E7AE4UWU9XSCOPGJuOHda0HpDnwM2FW+d90A==",
			"dependencies": {
				"get-stream": "^9.0.1",
				"strtok3": "^8.1.0",
				"token-types": "^6.0.0",
				"uint8array-extras": "^1.3.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sindresorhus/file-type?sponsor=1"
			}
		},
		"node_modules/fill-range": {
			"version": "7.1.1",
			"resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
			"integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
			"dependencies": {
				"to-regex-range": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/finalhandler": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
			"integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
			"dependencies": {
				"debug": "2.6.9",
				"encodeurl": "~1.0.2",
				"escape-html": "~1.0.3",
				"on-finished": "2.4.1",
				"parseurl": "~1.3.3",
				"statuses": "2.0.1",
				"unpipe": "~1.0.0"
			},
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/finalhandler/node_modules/debug": {
			"version": "2.6.9",
			"resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
			"integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
			"dependencies": {
				"ms": "2.0.0"
			}
		},
		"node_modules/finalhandler/node_modules/ms": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
			"integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
		},
		"node_modules/find-up": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
			"integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
			"dev": true,
			"dependencies": {
				"locate-path": "^6.0.0",
				"path-exists": "^4.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/flat-cache": {
			"version": "3.2.0",
			"resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
			"integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
			"dev": true,
			"dependencies": {
				"flatted": "^3.2.9",
				"keyv": "^4.5.3",
				"rimraf": "^3.0.2"
			},
			"engines": {
				"node": "^10.12.0 || >=12.0.0"
			}
		},
		"node_modules/flatbuffers": {
			"version": "1.12.0",
			"resolved": "https://registry.npmjs.org/flatbuffers/-/flatbuffers-1.12.0.tgz",
			"integrity": "sha512-c7CZADjRcl6j0PlvFy0ZqXQ67qSEZfrVPynmnL+2zPc+NtMvrF8Y0QceMo7QqnSPc7+uWjUIAbvCQ5WIKlMVdQ=="
		},
		"node_modules/flatted": {
			"version": "3.3.1",
			"resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
			"integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
			"dev": true
		},
		"node_modules/foreground-child": {
			"version": "3.3.0",
			"resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
			"integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
			"dependencies": {
				"cross-spawn": "^7.0.0",
				"signal-exit": "^4.0.1"
			},
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/form-data": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
			"integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
			"dependencies": {
				"asynckit": "^0.4.0",
				"combined-stream": "^1.0.8",
				"mime-types": "^2.1.12"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/form-data-encoder": {
			"version": "1.7.2",
			"resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
			"integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==",
			"optional": true
		},
		"node_modules/formdata-node": {
			"version": "4.4.1",
			"resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
			"integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
			"optional": true,
			"dependencies": {
				"node-domexception": "1.0.0",
				"web-streams-polyfill": "4.0.0-beta.3"
			},
			"engines": {
				"node": ">= 12.20"
			}
		},
		"node_modules/forwarded": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
			"integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/fraction.js": {
			"version": "4.3.7",
			"resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
			"integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
			"engines": {
				"node": "*"
			},
			"funding": {
				"type": "patreon",
				"url": "https://github.com/sponsors/rawify"
			}
		},
		"node_modules/fresh": {
			"version": "0.5.2",
			"resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
			"integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/fs.realpath": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
			"integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
			"dev": true
		},
		"node_modules/fsevents": {
			"version": "2.3.2",
			"resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
			"integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
			"hasInstallScript": true,
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^8.16.0 || ^10.6.0 || >=11.0.0"
			}
		},
		"node_modules/function-bind": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
			"integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/gaxios": {
			"version": "6.7.1",
			"resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
			"integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
			"dependencies": {
				"extend": "^3.0.2",
				"https-proxy-agent": "^7.0.1",
				"is-stream": "^2.0.0",
				"node-fetch": "^2.6.9",
				"uuid": "^9.0.1"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/gaxios/node_modules/is-stream": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
			"integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/gaxios/node_modules/uuid": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
			"integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/gcp-metadata": {
			"version": "6.1.0",
			"resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.0.tgz",
			"integrity": "sha512-Jh/AIwwgaxan+7ZUUmRLCjtchyDiqh4KjBJ5tW3plBZb5iL/BPcso8A5DlzeD9qlw0duCamnNdpFjxwaT0KyKg==",
			"dependencies": {
				"gaxios": "^6.0.0",
				"json-bigint": "^1.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/get-caller-file": {
			"version": "2.0.5",
			"resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
			"integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
			"engines": {
				"node": "6.* || 8.* || >= 10.*"
			}
		},
		"node_modules/get-east-asian-width": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.2.0.tgz",
			"integrity": "sha512-2nk+7SIVb14QrgXFHcm84tD4bKQz0RxPuMT8Ag5KPOq7J5fEmAg0UbXdTOSHqNuHSU28k55qnceesxXRZGzKWA==",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/get-func-name": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/get-func-name/-/get-func-name-2.0.2.tgz",
			"integrity": "sha512-8vXOvuE167CtIc3OyItco7N/dpRtBbYOsPsXCz7X/PMnlGjYjSGuZJgM1Y7mmew7BKf9BqvLX2tnOVy1BBUsxQ==",
			"dev": true,
			"engines": {
				"node": "*"
			}
		},
		"node_modules/get-intrinsic": {
			"version": "1.2.4",
			"resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
			"integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
			"dependencies": {
				"es-errors": "^1.3.0",
				"function-bind": "^1.1.2",
				"has-proto": "^1.0.1",
				"has-symbols": "^1.0.3",
				"hasown": "^2.0.0"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/get-stream": {
			"version": "9.0.1",
			"resolved": "https://registry.npmjs.org/get-stream/-/get-stream-9.0.1.tgz",
			"integrity": "sha512-kVCxPF3vQM/N0B1PmoqVUqgHP+EeVjmZSQn+1oCRPxd2P21P2F19lIgbR3HBosbB1PUhOAoctJnfEn2GbN2eZA==",
			"dependencies": {
				"@sec-ant/readable-stream": "^0.4.1",
				"is-stream": "^4.0.1"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/glob": {
			"version": "10.4.5",
			"resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
			"integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
			"dependencies": {
				"foreground-child": "^3.1.0",
				"jackspeak": "^3.1.2",
				"minimatch": "^9.0.4",
				"minipass": "^7.1.2",
				"package-json-from-dist": "^1.0.0",
				"path-scurry": "^1.11.1"
			},
			"bin": {
				"glob": "dist/esm/bin.mjs"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/glob-parent": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
			"integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
			"dependencies": {
				"is-glob": "^4.0.3"
			},
			"engines": {
				"node": ">=10.13.0"
			}
		},
		"node_modules/glob/node_modules/minimatch": {
			"version": "9.0.5",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
			"integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
			"dependencies": {
				"brace-expansion": "^2.0.1"
			},
			"engines": {
				"node": ">=16 || 14 >=14.17"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/globals": {
			"version": "13.24.0",
			"resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
			"integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
			"dev": true,
			"dependencies": {
				"type-fest": "^0.20.2"
			},
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/globalyzer": {
			"version": "0.1.0",
			"resolved": "https://registry.npmjs.org/globalyzer/-/globalyzer-0.1.0.tgz",
			"integrity": "sha512-40oNTM9UfG6aBmuKxk/giHn5nQ8RVz/SS4Ir6zgzOv9/qC3kKZ9v4etGTcJbEl/NyVQH7FGU7d+X1egr57Md2Q==",
			"dev": true
		},
		"node_modules/globby": {
			"version": "11.1.0",
			"resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
			"integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
			"dev": true,
			"dependencies": {
				"array-union": "^2.1.0",
				"dir-glob": "^3.0.1",
				"fast-glob": "^3.2.9",
				"ignore": "^5.2.0",
				"merge2": "^1.4.1",
				"slash": "^3.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/globrex": {
			"version": "0.1.2",
			"resolved": "https://registry.npmjs.org/globrex/-/globrex-0.1.2.tgz",
			"integrity": "sha512-uHJgbwAMwNFf5mLst7IWLNg14x1CkeqglJb/K3doi4dw6q2IvAAmM/Y81kevy83wP+Sst+nutFTYOGg3d1lsxg==",
			"dev": true
		},
		"node_modules/google-auth-library": {
			"version": "9.14.1",
			"resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.14.1.tgz",
			"integrity": "sha512-Rj+PMjoNFGFTmtItH7gHfbHpGVSb3vmnGK3nwNBqxQF9NoBpttSZI/rc0WiM63ma2uGDQtYEkMHkK9U6937NiA==",
			"dependencies": {
				"base64-js": "^1.3.0",
				"ecdsa-sig-formatter": "^1.0.11",
				"gaxios": "^6.1.1",
				"gcp-metadata": "^6.1.0",
				"gtoken": "^7.0.0",
				"jws": "^4.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/gopd": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
			"integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
			"dependencies": {
				"get-intrinsic": "^1.1.3"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/graceful-fs": {
			"version": "4.2.11",
			"resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
			"integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
			"dev": true
		},
		"node_modules/graphemer": {
			"version": "1.4.0",
			"resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
			"integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
			"dev": true
		},
		"node_modules/graphql": {
			"version": "16.9.0",
			"resolved": "https://registry.npmjs.org/graphql/-/graphql-16.9.0.tgz",
			"integrity": "sha512-GGTKBX4SD7Wdb8mqeDLni2oaRGYQWjWHGKPQ24ZMnUtKfcsVoiv4uX8+LJr1K6U5VW2Lu1BwJnj7uiori0YtRw==",
			"engines": {
				"node": "^12.22.0 || ^14.16.0 || ^16.0.0 || >=17.0.0"
			}
		},
		"node_modules/gtoken": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
			"integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
			"dependencies": {
				"gaxios": "^6.0.0",
				"jws": "^4.0.0"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/guid-typescript": {
			"version": "1.0.9",
			"resolved": "https://registry.npmjs.org/guid-typescript/-/guid-typescript-1.0.9.tgz",
			"integrity": "sha512-Y8T4vYhEfwJOTbouREvG+3XDsjr8E3kIr7uf+JZ0BYloFsttiHU0WfvANVsR7TxNUJa/WpCnw/Ino/p+DeBhBQ=="
		},
		"node_modules/handlebars": {
			"version": "4.7.8",
			"resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.7.8.tgz",
			"integrity": "sha512-vafaFqs8MZkRrSX7sFVUdo3ap/eNiLnb4IakshzvP56X5Nr1iGKAIqdX6tMlm6HcNRIkr6AxO5jFEoJzzpT8aQ==",
			"dependencies": {
				"minimist": "^1.2.5",
				"neo-async": "^2.6.2",
				"source-map": "^0.6.1",
				"wordwrap": "^1.0.0"
			},
			"bin": {
				"handlebars": "bin/handlebars"
			},
			"engines": {
				"node": ">=0.4.7"
			},
			"optionalDependencies": {
				"uglify-js": "^3.1.4"
			}
		},
		"node_modules/has-flag": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
			"integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/has-property-descriptors": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
			"integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
			"dependencies": {
				"es-define-property": "^1.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/has-proto": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
			"integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/has-symbols": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
			"integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/hash-wasm": {
			"version": "4.11.0",
			"resolved": "https://registry.npmjs.org/hash-wasm/-/hash-wasm-4.11.0.tgz",
			"integrity": "sha512-HVusNXlVqHe0fzIzdQOGolnFN6mX/fqcrSAOcTBXdvzrXVHwTz11vXeKRmkR5gTuwVpvHZEIyKoePDvuAR+XwQ=="
		},
		"node_modules/hasown": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
			"integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
			"dependencies": {
				"function-bind": "^1.1.2"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/headers-polyfill": {
			"version": "4.0.3",
			"resolved": "https://registry.npmjs.org/headers-polyfill/-/headers-polyfill-4.0.3.tgz",
			"integrity": "sha512-IScLbePpkvO846sIwOtOTDjutRMWdXdJmXdMvk6gCBHxFO8d+QKOQedyZSxFTTFYRSmlgSTDtXqqq4pcenBXLQ=="
		},
		"node_modules/help-me": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/help-me/-/help-me-5.0.0.tgz",
			"integrity": "sha512-7xgomUX6ADmcYzFik0HzAxh/73YlKR9bmFzf51CZwR+b6YtzU2m0u49hQCqV6SvlqIqsaxovfwdvbnsw3b/zpg=="
		},
		"node_modules/hex-rgb": {
			"version": "4.3.0",
			"resolved": "https://registry.npmjs.org/hex-rgb/-/hex-rgb-4.3.0.tgz",
			"integrity": "sha512-Ox1pJVrDCyGHMG9CFg1tmrRUMRPRsAWYc/PinY0XzJU4K7y7vjNoLKIQ7BR5UJMCxNN8EM1MNDmHWA/B3aZUuw==",
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/highlight.js": {
			"version": "11.10.0",
			"resolved": "https://registry.npmjs.org/highlight.js/-/highlight.js-11.10.0.tgz",
			"integrity": "sha512-SYVnVFswQER+zu1laSya563s+F8VDGt7o35d4utbamowvUNLLMovFqwCLSocpZTz3MgaSRA1IbqRWZv97dtErQ==",
			"engines": {
				"node": ">=12.0.0"
			}
		},
		"node_modules/html-encoding-sniffer": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-3.0.0.tgz",
			"integrity": "sha512-oWv4T4yJ52iKrufjnyZPkrN0CH3QnrUqdB6In1g5Fe1mia8GmF36gnfNySxoZtxD5+NmYw1EElVXiBk93UeskA==",
			"dependencies": {
				"whatwg-encoding": "^2.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/htmlparser2": {
			"version": "8.0.2",
			"resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-8.0.2.tgz",
			"integrity": "sha512-GYdjWKDkbRLkZ5geuHs5NY1puJ+PXwP7+fHPRz06Eirsb9ugf6d8kkXav6ADhcODhFFPMIXyxkxSuMf3D6NCFA==",
			"funding": [
				"https://github.com/fb55/htmlparser2?sponsor=1",
				{
					"type": "github",
					"url": "https://github.com/sponsors/fb55"
				}
			],
			"dependencies": {
				"domelementtype": "^2.3.0",
				"domhandler": "^5.0.3",
				"domutils": "^3.0.1",
				"entities": "^4.4.0"
			}
		},
		"node_modules/http-errors": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
			"integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
			"dependencies": {
				"depd": "2.0.0",
				"inherits": "2.0.4",
				"setprototypeof": "1.2.0",
				"statuses": "2.0.1",
				"toidentifier": "1.0.1"
			},
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/http-proxy-agent": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
			"integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
			"dependencies": {
				"@tootallnate/once": "2",
				"agent-base": "6",
				"debug": "4"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/http-proxy-agent/node_modules/agent-base": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
			"integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
			"dependencies": {
				"debug": "4"
			},
			"engines": {
				"node": ">= 6.0.0"
			}
		},
		"node_modules/https-proxy-agent": {
			"version": "7.0.5",
			"resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.5.tgz",
			"integrity": "sha512-1e4Wqeblerz+tMKPIq2EMGiiWW1dIjZOksyHWSUm1rmuvw/how9hBHZ38lAGj5ID4Ik6EdkOw7NmWPy6LAwalw==",
			"dependencies": {
				"agent-base": "^7.0.2",
				"debug": "4"
			},
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/human-signals": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/human-signals/-/human-signals-5.0.0.tgz",
			"integrity": "sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==",
			"engines": {
				"node": ">=16.17.0"
			}
		},
		"node_modules/humanize-ms": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
			"integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
			"optional": true,
			"dependencies": {
				"ms": "^2.0.0"
			}
		},
		"node_modules/husky": {
			"version": "9.1.5",
			"resolved": "https://registry.npmjs.org/husky/-/husky-9.1.5.tgz",
			"integrity": "sha512-rowAVRUBfI0b4+niA4SJMhfQwc107VLkBUgEYYAOQAbqDCnra1nYh83hF/MDmhYs9t9n1E3DuKOrs2LYNC+0Ag==",
			"bin": {
				"husky": "bin.js"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/typicode"
			}
		},
		"node_modules/iconv-lite": {
			"version": "0.4.24",
			"resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
			"integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
			"dependencies": {
				"safer-buffer": ">= 2.1.2 < 3"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/ieee754": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
			"integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			]
		},
		"node_modules/ignore": {
			"version": "5.3.2",
			"resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
			"integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
			"dev": true,
			"engines": {
				"node": ">= 4"
			}
		},
		"node_modules/image-size": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/image-size/-/image-size-1.1.1.tgz",
			"integrity": "sha512-541xKlUw6jr/6gGuk92F+mYM5zaFAc5ahphvkqvNe2bQ6gVBkd6bfrmVJ2t4KDAfikAYZyIqTnktX3i6/aQDrQ==",
			"dependencies": {
				"queue": "6.0.2"
			},
			"bin": {
				"image-size": "bin/image-size.js"
			},
			"engines": {
				"node": ">=16.x"
			}
		},
		"node_modules/import-fresh": {
			"version": "3.3.0",
			"resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
			"integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
			"dev": true,
			"dependencies": {
				"parent-module": "^1.0.0",
				"resolve-from": "^4.0.0"
			},
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/import-meta-resolve": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/import-meta-resolve/-/import-meta-resolve-4.1.0.tgz",
			"integrity": "sha512-I6fiaX09Xivtk+THaMfAwnA3MVA5Big1WHF1Dfx9hFuvNIWpXnorlkzhcQf6ehrqQiiZECRt1poOAkPmer3ruw==",
			"dev": true,
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/wooorm"
			}
		},
		"node_modules/imurmurhash": {
			"version": "0.1.4",
			"resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
			"integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
			"dev": true,
			"engines": {
				"node": ">=0.8.19"
			}
		},
		"node_modules/inflight": {
			"version": "1.0.6",
			"resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
			"integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
			"deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
			"dev": true,
			"dependencies": {
				"once": "^1.3.0",
				"wrappy": "1"
			}
		},
		"node_modules/inherits": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
			"integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
		},
		"node_modules/int53": {
			"version": "0.2.4",
			"resolved": "https://registry.npmjs.org/int53/-/int53-0.2.4.tgz",
			"integrity": "sha512-a5jlKftS7HUOhkUyYD7j2sJ/ZnvWiNlZS1ldR+g1ifQ+/UuZXIE+YTc/lK1qGj/GwAU5F8Z0e1eVq2t1J5Ob2g=="
		},
		"node_modules/ip-address": {
			"version": "9.0.5",
			"resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
			"integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
			"dependencies": {
				"jsbn": "1.1.0",
				"sprintf-js": "^1.1.3"
			},
			"engines": {
				"node": ">= 12"
			}
		},
		"node_modules/ipaddr.js": {
			"version": "1.9.1",
			"resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
			"integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
			"engines": {
				"node": ">= 0.10"
			}
		},
		"node_modules/is-arrayish": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
			"integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ=="
		},
		"node_modules/is-binary-path": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
			"integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
			"dependencies": {
				"binary-extensions": "^2.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/is-builtin-module": {
			"version": "3.2.1",
			"resolved": "https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-3.2.1.tgz",
			"integrity": "sha512-BSLE3HnV2syZ0FK0iMA/yUGplUeMmNz4AW5fnTunbCIqZi4vG3WjJT9FHMy5D69xmAYBHXQhJdALdpwVxV501A==",
			"dev": true,
			"dependencies": {
				"builtin-modules": "^3.3.0"
			},
			"engines": {
				"node": ">=6"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/is-core-module": {
			"version": "2.15.1",
			"resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz",
			"integrity": "sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==",
			"dependencies": {
				"hasown": "^2.0.2"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/is-extglob": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
			"integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/is-fullwidth-code-point": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
			"integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/is-glob": {
			"version": "4.0.3",
			"resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
			"integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
			"dependencies": {
				"is-extglob": "^2.1.1"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/is-module": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
			"integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
			"dev": true
		},
		"node_modules/is-node-process": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/is-node-process/-/is-node-process-1.2.0.tgz",
			"integrity": "sha512-Vg4o6/fqPxIjtxgUH5QLJhwZ7gW5diGCVlXpuUfELC62CuxM1iHcRe51f2W1FDy04Ai4KJkagKjx3XaqyfRKXw=="
		},
		"node_modules/is-number": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
			"integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
			"engines": {
				"node": ">=0.12.0"
			}
		},
		"node_modules/is-path-inside": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
			"integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/is-plain-object": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
			"integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/is-potential-custom-element-name": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
			"integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ=="
		},
		"node_modules/is-reference": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-1.2.1.tgz",
			"integrity": "sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==",
			"dev": true,
			"dependencies": {
				"@types/estree": "*"
			}
		},
		"node_modules/is-stream": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/is-stream/-/is-stream-4.0.1.tgz",
			"integrity": "sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/isexe": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
			"integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
		},
		"node_modules/isomorphic-dompurify": {
			"version": "2.15.0",
			"resolved": "https://registry.npmjs.org/isomorphic-dompurify/-/isomorphic-dompurify-2.15.0.tgz",
			"integrity": "sha512-RDHlyeVmwEDAPZuX1VaaBzSn9RrsfvswxH7faEQK9cTHC1dXeNuK6ElUeSr7locFyeLguut8ASfhQWxHB4Ttug==",
			"dev": true,
			"dependencies": {
				"@types/dompurify": "^3.0.5",
				"dompurify": "^3.1.6",
				"jsdom": "^25.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/cssstyle": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-4.1.0.tgz",
			"integrity": "sha512-h66W1URKpBS5YMI/V8PyXvTMFT8SupJ1IzoIV8IeBC/ji8WVmrO8dGlTi+2dh6whmdk6BiKJLD/ZBkhWbcg6nA==",
			"dev": true,
			"dependencies": {
				"rrweb-cssom": "^0.7.1"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/data-urls": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/data-urls/-/data-urls-5.0.0.tgz",
			"integrity": "sha512-ZYP5VBHshaDAiVZxjbRVcFJpc+4xGgT0bK3vzy1HLN8jTO975HEbuYzZJcHoQEY5K1a0z8YayJkyVETa08eNTg==",
			"dev": true,
			"dependencies": {
				"whatwg-mimetype": "^4.0.0",
				"whatwg-url": "^14.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/html-encoding-sniffer": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-4.0.0.tgz",
			"integrity": "sha512-Y22oTqIU4uuPgEemfz7NDJz6OeKf12Lsu+QC+s3BVpda64lTiMYCyGwg5ki4vFxkMwQdeZDl2adZoqUgdFuTgQ==",
			"dev": true,
			"dependencies": {
				"whatwg-encoding": "^3.1.1"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/http-proxy-agent": {
			"version": "7.0.2",
			"resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
			"integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
			"dev": true,
			"dependencies": {
				"agent-base": "^7.1.0",
				"debug": "^4.3.4"
			},
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/iconv-lite": {
			"version": "0.6.3",
			"resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
			"integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
			"dev": true,
			"dependencies": {
				"safer-buffer": ">= 2.1.2 < 3.0.0"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/jsdom": {
			"version": "25.0.0",
			"resolved": "https://registry.npmjs.org/jsdom/-/jsdom-25.0.0.tgz",
			"integrity": "sha512-OhoFVT59T7aEq75TVw9xxEfkXgacpqAhQaYgP9y/fDqWQCMB/b1H66RfmPm/MaeaAIU9nDwMOVTlPN51+ao6CQ==",
			"dev": true,
			"dependencies": {
				"cssstyle": "^4.0.1",
				"data-urls": "^5.0.0",
				"decimal.js": "^10.4.3",
				"form-data": "^4.0.0",
				"html-encoding-sniffer": "^4.0.0",
				"http-proxy-agent": "^7.0.2",
				"https-proxy-agent": "^7.0.5",
				"is-potential-custom-element-name": "^1.0.1",
				"nwsapi": "^2.2.12",
				"parse5": "^7.1.2",
				"rrweb-cssom": "^0.7.1",
				"saxes": "^6.0.0",
				"symbol-tree": "^3.2.4",
				"tough-cookie": "^4.1.4",
				"w3c-xmlserializer": "^5.0.0",
				"webidl-conversions": "^7.0.0",
				"whatwg-encoding": "^3.1.1",
				"whatwg-mimetype": "^4.0.0",
				"whatwg-url": "^14.0.0",
				"ws": "^8.18.0",
				"xml-name-validator": "^5.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"peerDependencies": {
				"canvas": "^2.11.2"
			},
			"peerDependenciesMeta": {
				"canvas": {
					"optional": true
				}
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/rrweb-cssom": {
			"version": "0.7.1",
			"resolved": "https://registry.npmjs.org/rrweb-cssom/-/rrweb-cssom-0.7.1.tgz",
			"integrity": "sha512-TrEMa7JGdVm0UThDJSx7ddw5nVm3UJS9o9CCIZ72B1vSyEZoziDqBYP3XIoi/12lKrJR8rE3jeFHMok2F/Mnsg==",
			"dev": true
		},
		"node_modules/isomorphic-dompurify/node_modules/tr46": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/tr46/-/tr46-5.0.0.tgz",
			"integrity": "sha512-tk2G5R2KRwBd+ZN0zaEXpmzdKyOYksXwywulIX95MBODjSzMIuQnQ3m8JxgbhnL1LeVo7lqQKsYa1O3Htl7K5g==",
			"dev": true,
			"dependencies": {
				"punycode": "^2.3.1"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/w3c-xmlserializer": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-5.0.0.tgz",
			"integrity": "sha512-o8qghlI8NZHU1lLPrpi2+Uq7abh4GGPpYANlalzWxyWteJOCsr/P+oPBA49TOLu5FTZO4d3F9MnWJfiMo4BkmA==",
			"dev": true,
			"dependencies": {
				"xml-name-validator": "^5.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/whatwg-encoding": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
			"integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
			"dev": true,
			"dependencies": {
				"iconv-lite": "0.6.3"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/whatwg-mimetype": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
			"integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
			"dev": true,
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/whatwg-url": {
			"version": "14.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-14.0.0.tgz",
			"integrity": "sha512-1lfMEm2IEr7RIV+f4lUNPOqfFL+pO+Xw3fJSqmjX9AbXcXcYOkCe1P6+9VBZB6n94af16NfZf+sSk0JCBZC9aw==",
			"dev": true,
			"dependencies": {
				"tr46": "^5.0.0",
				"webidl-conversions": "^7.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/isomorphic-dompurify/node_modules/xml-name-validator": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-5.0.0.tgz",
			"integrity": "sha512-EvGK8EJ3DhaHfbRlETOWAS5pO9MZITeauHKJyb8wyajUfQUenkIg2MvLDTZ4T/TgIcm3HU0TFBgWWboAZ30UHg==",
			"dev": true,
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/jackspeak": {
			"version": "3.4.3",
			"resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
			"integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
			"dependencies": {
				"@isaacs/cliui": "^8.0.2"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			},
			"optionalDependencies": {
				"@pkgjs/parseargs": "^0.11.0"
			}
		},
		"node_modules/jiti": {
			"version": "1.21.6",
			"resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.6.tgz",
			"integrity": "sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==",
			"bin": {
				"jiti": "bin/jiti.js"
			}
		},
		"node_modules/jose": {
			"version": "5.8.0",
			"resolved": "https://registry.npmjs.org/jose/-/jose-5.8.0.tgz",
			"integrity": "sha512-E7CqYpL/t7MMnfGnK/eg416OsFCVUrU/Y3Vwe7QjKhu/BkS1Ms455+2xsqZQVN57/U2MHMBvEb5SrmAZWAIntA==",
			"funding": {
				"url": "https://github.com/sponsors/panva"
			}
		},
		"node_modules/joycon": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/joycon/-/joycon-3.1.1.tgz",
			"integrity": "sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==",
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/js-base64": {
			"version": "3.7.2",
			"resolved": "https://registry.npmjs.org/js-base64/-/js-base64-3.7.2.tgz",
			"integrity": "sha512-NnRs6dsyqUXejqk/yv2aiXlAvOs56sLkX6nUdeaNezI5LFFLlsZjOThmwnrcwh5ZZRwZlCMnVAY3CvhIhoVEKQ==",
			"optional": true
		},
		"node_modules/js-string-escape": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
			"integrity": "sha512-Smw4xcfIQ5LVjAOuJCvN/zIodzA/BBSsluuoSykP+lUvScIi4U6RJLfwHet5cxFnCswUjISV8oAXaqaJDY3chg==",
			"dev": true,
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/js-yaml": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
			"integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
			"dev": true,
			"dependencies": {
				"argparse": "^2.0.1"
			},
			"bin": {
				"js-yaml": "bin/js-yaml.js"
			}
		},
		"node_modules/jsbn": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
			"integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A=="
		},
		"node_modules/jsdom": {
			"version": "22.1.0",
			"resolved": "https://registry.npmjs.org/jsdom/-/jsdom-22.1.0.tgz",
			"integrity": "sha512-/9AVW7xNbsBv6GfWho4TTNjEo9fe6Zhf9O7s0Fhhr3u+awPwAJMKwAMXnkk5vBxflqLW9hTHX/0cs+P3gW+cQw==",
			"dependencies": {
				"abab": "^2.0.6",
				"cssstyle": "^3.0.0",
				"data-urls": "^4.0.0",
				"decimal.js": "^10.4.3",
				"domexception": "^4.0.0",
				"form-data": "^4.0.0",
				"html-encoding-sniffer": "^3.0.0",
				"http-proxy-agent": "^5.0.0",
				"https-proxy-agent": "^5.0.1",
				"is-potential-custom-element-name": "^1.0.1",
				"nwsapi": "^2.2.4",
				"parse5": "^7.1.2",
				"rrweb-cssom": "^0.6.0",
				"saxes": "^6.0.0",
				"symbol-tree": "^3.2.4",
				"tough-cookie": "^4.1.2",
				"w3c-xmlserializer": "^4.0.0",
				"webidl-conversions": "^7.0.0",
				"whatwg-encoding": "^2.0.0",
				"whatwg-mimetype": "^3.0.0",
				"whatwg-url": "^12.0.1",
				"ws": "^8.13.0",
				"xml-name-validator": "^4.0.0"
			},
			"engines": {
				"node": ">=16"
			},
			"peerDependencies": {
				"canvas": "^2.5.0"
			},
			"peerDependenciesMeta": {
				"canvas": {
					"optional": true
				}
			}
		},
		"node_modules/jsdom/node_modules/agent-base": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
			"integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
			"dependencies": {
				"debug": "4"
			},
			"engines": {
				"node": ">= 6.0.0"
			}
		},
		"node_modules/jsdom/node_modules/https-proxy-agent": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
			"integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
			"dependencies": {
				"agent-base": "6",
				"debug": "4"
			},
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/json-bigint": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
			"integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
			"dependencies": {
				"bignumber.js": "^9.0.0"
			}
		},
		"node_modules/json-buffer": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
			"integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
			"dev": true
		},
		"node_modules/json-schema-traverse": {
			"version": "0.4.1",
			"resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
			"integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
			"dev": true
		},
		"node_modules/json-stable-stringify-without-jsonify": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
			"integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
			"dev": true
		},
		"node_modules/json5": {
			"version": "2.2.3",
			"resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
			"integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
			"bin": {
				"json5": "lib/cli.js"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/jsonpath": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/jsonpath/-/jsonpath-1.1.1.tgz",
			"integrity": "sha512-l6Cg7jRpixfbgoWgkrl77dgEj8RPvND0wMH6TwQmi9Qs4TFfS9u5cUFnbeKTwj5ga5Y3BTGGNI28k117LJ009w==",
			"dependencies": {
				"esprima": "1.2.2",
				"static-eval": "2.0.2",
				"underscore": "1.12.1"
			}
		},
		"node_modules/jwa": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
			"integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
			"dependencies": {
				"buffer-equal-constant-time": "1.0.1",
				"ecdsa-sig-formatter": "1.0.11",
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/jws": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
			"integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
			"dependencies": {
				"jwa": "^2.0.0",
				"safe-buffer": "^5.0.1"
			}
		},
		"node_modules/katex": {
			"version": "0.16.11",
			"resolved": "https://registry.npmjs.org/katex/-/katex-0.16.11.tgz",
			"integrity": "sha512-RQrI8rlHY92OLf3rho/Ts8i/XvjgguEjOkO1BEXcU3N8BqPpSzBNwV/G0Ukr+P/l3ivvJUE/Fa/CwbS6HesGNQ==",
			"funding": [
				"https://opencollective.com/katex",
				"https://github.com/sponsors/katex"
			],
			"peer": true,
			"dependencies": {
				"commander": "^8.3.0"
			},
			"bin": {
				"katex": "cli.js"
			}
		},
		"node_modules/keyv": {
			"version": "4.5.4",
			"resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
			"integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
			"dev": true,
			"dependencies": {
				"json-buffer": "3.0.1"
			}
		},
		"node_modules/kleur": {
			"version": "4.1.5",
			"resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
			"integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/known-css-properties": {
			"version": "0.34.0",
			"resolved": "https://registry.npmjs.org/known-css-properties/-/known-css-properties-0.34.0.tgz",
			"integrity": "sha512-tBECoUqNFbyAY4RrbqsBQqDFpGXAEbdD5QKr8kACx3+rnArmuuR22nKQWKazvp07N9yjTyDZaw/20UIH8tL9DQ==",
			"dev": true
		},
		"node_modules/kolorist": {
			"version": "1.8.0",
			"resolved": "https://registry.npmjs.org/kolorist/-/kolorist-1.8.0.tgz",
			"integrity": "sha512-Y+60/zizpJ3HRH8DCss+q95yr6145JXZo46OTpFvDZWLfRCE4qChOyk1b26nMaNpfHHgxagk9dXT5OP0Tfe+dQ==",
			"dev": true
		},
		"node_modules/levn": {
			"version": "0.4.1",
			"resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
			"integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
			"dev": true,
			"dependencies": {
				"prelude-ls": "^1.2.1",
				"type-check": "~0.4.0"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/lilconfig": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.2.tgz",
			"integrity": "sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==",
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/antonk52"
			}
		},
		"node_modules/linebreak": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/linebreak/-/linebreak-1.1.0.tgz",
			"integrity": "sha512-MHp03UImeVhB7XZtjd0E4n6+3xr5Dq/9xI/5FptGk5FrbDR3zagPa2DS6U8ks/3HjbKWG9Q1M2ufOzxV2qLYSQ==",
			"dependencies": {
				"base64-js": "0.0.8",
				"unicode-trie": "^2.0.0"
			}
		},
		"node_modules/linebreak/node_modules/base64-js": {
			"version": "0.0.8",
			"resolved": "https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz",
			"integrity": "sha512-3XSA2cR/h/73EzlXXdU6YNycmYI7+kicTxks4eJg2g39biHR84slg2+des+p7iHYhbRg/udIS4TD53WabcOUkw==",
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/lines-and-columns": {
			"version": "1.2.4",
			"resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg=="
		},
		"node_modules/lint-staged": {
			"version": "15.2.10",
			"resolved": "https://registry.npmjs.org/lint-staged/-/lint-staged-15.2.10.tgz",
			"integrity": "sha512-5dY5t743e1byO19P9I4b3x8HJwalIznL5E1FWYnU6OWw33KxNBSLAc6Cy7F2PsFEO8FKnLwjwm5hx7aMF0jzZg==",
			"dependencies": {
				"chalk": "~5.3.0",
				"commander": "~12.1.0",
				"debug": "~4.3.6",
				"execa": "~8.0.1",
				"lilconfig": "~3.1.2",
				"listr2": "~8.2.4",
				"micromatch": "~4.0.8",
				"pidtree": "~0.6.0",
				"string-argv": "~0.3.2",
				"yaml": "~2.5.0"
			},
			"bin": {
				"lint-staged": "bin/lint-staged.js"
			},
			"engines": {
				"node": ">=18.12.0"
			},
			"funding": {
				"url": "https://opencollective.com/lint-staged"
			}
		},
		"node_modules/lint-staged/node_modules/chalk": {
			"version": "5.3.0",
			"resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
			"integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
			"engines": {
				"node": "^12.17.0 || ^14.13 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/chalk/chalk?sponsor=1"
			}
		},
		"node_modules/lint-staged/node_modules/commander": {
			"version": "12.1.0",
			"resolved": "https://registry.npmjs.org/commander/-/commander-12.1.0.tgz",
			"integrity": "sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==",
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/listr2": {
			"version": "8.2.4",
			"resolved": "https://registry.npmjs.org/listr2/-/listr2-8.2.4.tgz",
			"integrity": "sha512-opevsywziHd3zHCVQGAj8zu+Z3yHNkkoYhWIGnq54RrCVwLz0MozotJEDnKsIBLvkfLGN6BLOyAeRrYI0pKA4g==",
			"dependencies": {
				"cli-truncate": "^4.0.0",
				"colorette": "^2.0.20",
				"eventemitter3": "^5.0.1",
				"log-update": "^6.1.0",
				"rfdc": "^1.4.1",
				"wrap-ansi": "^9.0.0"
			},
			"engines": {
				"node": ">=18.0.0"
			}
		},
		"node_modules/listr2/node_modules/ansi-regex": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
			"integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/listr2/node_modules/ansi-styles": {
			"version": "6.2.1",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
			"integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/listr2/node_modules/string-width": {
			"version": "7.2.0",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
			"integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
			"dependencies": {
				"emoji-regex": "^10.3.0",
				"get-east-asian-width": "^1.0.0",
				"strip-ansi": "^7.1.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/listr2/node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/listr2/node_modules/wrap-ansi": {
			"version": "9.0.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
			"integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
			"dependencies": {
				"ansi-styles": "^6.2.1",
				"string-width": "^7.0.0",
				"strip-ansi": "^7.1.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/local-pkg": {
			"version": "0.4.3",
			"resolved": "https://registry.npmjs.org/local-pkg/-/local-pkg-0.4.3.tgz",
			"integrity": "sha512-SFppqq5p42fe2qcZQqqEOiVRXl+WCP1MdT6k7BDEW1j++sp5fIY+/fdRQitvKgB5BrBcmrs5m/L0v2FrU5MY1g==",
			"dev": true,
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/locate-character": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/locate-character/-/locate-character-3.0.0.tgz",
			"integrity": "sha512-SW13ws7BjaeJ6p7Q6CO2nchbYEc3X3J6WrmTTDto7yMPqVSZTUyY5Tjbid+Ab8gLnATtygYtiDIJGQRRn2ZOiA==",
			"dev": true
		},
		"node_modules/locate-path": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
			"integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
			"dev": true,
			"dependencies": {
				"p-locate": "^5.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/lodash": {
			"version": "4.17.21",
			"resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
			"integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
			"dev": true
		},
		"node_modules/lodash.castarray": {
			"version": "4.4.0",
			"resolved": "https://registry.npmjs.org/lodash.castarray/-/lodash.castarray-4.4.0.tgz",
			"integrity": "sha512-aVx8ztPv7/2ULbArGJ2Y42bG1mEQ5mGjpdvrbJcJFU3TbYybe+QlLS4pst9zV52ymy2in1KpFPiZnAOATxD4+Q==",
			"dev": true
		},
		"node_modules/lodash.isplainobject": {
			"version": "4.0.6",
			"resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
			"integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
			"dev": true
		},
		"node_modules/lodash.merge": {
			"version": "4.6.2",
			"resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
			"integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
			"dev": true
		},
		"node_modules/log-update": {
			"version": "6.1.0",
			"resolved": "https://registry.npmjs.org/log-update/-/log-update-6.1.0.tgz",
			"integrity": "sha512-9ie8ItPR6tjY5uYJh8K/Zrv/RMZ5VOlOWvtZdEHYSTFKZfIBPQa9tOAEeAWhd+AnIneLJ22w5fjOYtoutpWq5w==",
			"dependencies": {
				"ansi-escapes": "^7.0.0",
				"cli-cursor": "^5.0.0",
				"slice-ansi": "^7.1.0",
				"strip-ansi": "^7.1.0",
				"wrap-ansi": "^9.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/log-update/node_modules/ansi-regex": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
			"integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/log-update/node_modules/ansi-styles": {
			"version": "6.2.1",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
			"integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/log-update/node_modules/is-fullwidth-code-point": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz",
			"integrity": "sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==",
			"dependencies": {
				"get-east-asian-width": "^1.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/log-update/node_modules/slice-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-7.1.0.tgz",
			"integrity": "sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==",
			"dependencies": {
				"ansi-styles": "^6.2.1",
				"is-fullwidth-code-point": "^5.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/chalk/slice-ansi?sponsor=1"
			}
		},
		"node_modules/log-update/node_modules/string-width": {
			"version": "7.2.0",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
			"integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
			"dependencies": {
				"emoji-regex": "^10.3.0",
				"get-east-asian-width": "^1.0.0",
				"strip-ansi": "^7.1.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/log-update/node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/log-update/node_modules/wrap-ansi": {
			"version": "9.0.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
			"integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
			"dependencies": {
				"ansi-styles": "^6.2.1",
				"string-width": "^7.0.0",
				"strip-ansi": "^7.1.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/long": {
			"version": "5.2.3",
			"resolved": "https://registry.npmjs.org/long/-/long-5.2.3.tgz",
			"integrity": "sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q=="
		},
		"node_modules/loupe": {
			"version": "2.3.7",
			"resolved": "https://registry.npmjs.org/loupe/-/loupe-2.3.7.tgz",
			"integrity": "sha512-zSMINGVYkdpYSOBmLi0D1Uo7JU9nVdQKrHxC8eYlV+9YKK9WePqAlL7lSlorG/U2Fw1w0hTBmaa/jrQ3UbPHtA==",
			"dev": true,
			"dependencies": {
				"get-func-name": "^2.0.1"
			}
		},
		"node_modules/lru-cache": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
			"integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
			"dependencies": {
				"yallist": "^4.0.0"
			},
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/lzo": {
			"version": "0.4.11",
			"resolved": "https://registry.npmjs.org/lzo/-/lzo-0.4.11.tgz",
			"integrity": "sha512-apQHNoW2Alg72FMqaC/7pn03I7umdgSVFt2KRkCXXils4Z9u3QBh1uOtl2O5WmZIDLd9g6Lu4lIdOLmiSTFVCQ==",
			"hasInstallScript": true,
			"optional": true,
			"dependencies": {
				"bindings": "~1.2.1"
			}
		},
		"node_modules/magic-string": {
			"version": "0.30.11",
			"resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.11.tgz",
			"integrity": "sha512-+Wri9p0QHMy+545hKww7YAu5NyzF8iomPL/RQazugQ9+Ez4Ic3mERMd8ZTX5rfK944j+560ZJi8iAwgak1Ac7A==",
			"dev": true,
			"dependencies": {
				"@jridgewell/sourcemap-codec": "^1.5.0"
			}
		},
		"node_modules/make-error": {
			"version": "1.3.6",
			"resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
			"integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
			"devOptional": true
		},
		"node_modules/marked": {
			"version": "12.0.2",
			"resolved": "https://registry.npmjs.org/marked/-/marked-12.0.2.tgz",
			"integrity": "sha512-qXUm7e/YKFoqFPYPa3Ukg9xlI5cyAtGmyEIzMfW//m6kXwCy2Ps9DYf5ioijFKQ8qyuscrHoY04iJGctu2Kg0Q==",
			"bin": {
				"marked": "bin/marked.js"
			},
			"engines": {
				"node": ">= 18"
			}
		},
		"node_modules/marked-katex-extension": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/marked-katex-extension/-/marked-katex-extension-5.1.2.tgz",
			"integrity": "sha512-jRtacvDAPULKBWArDno0IGpzzpUw12yb8OaEsv3dTlvcIr21+mF9kD+Bxo2m/ErX/2ZIml6zFVMnpxCpqx3stw==",
			"dependencies": {
				"@types/katex": "^0.16.7"
			},
			"peerDependencies": {
				"katex": ">=0.16 <0.17",
				"marked": ">=4 <15"
			}
		},
		"node_modules/md5-hex": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
			"integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
			"dev": true,
			"dependencies": {
				"blueimp-md5": "^2.10.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/mdn-data": {
			"version": "2.0.30",
			"resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.30.tgz",
			"integrity": "sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==",
			"dev": true
		},
		"node_modules/media-typer": {
			"version": "0.3.0",
			"resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
			"integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/memory-pager": {
			"version": "1.5.0",
			"resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
			"integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg=="
		},
		"node_modules/merge-descriptors": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
			"integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
		},
		"node_modules/merge-stream": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
			"integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w=="
		},
		"node_modules/merge2": {
			"version": "1.4.1",
			"resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
			"integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/methods": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
			"integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/micromatch": {
			"version": "4.0.8",
			"resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
			"integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
			"dependencies": {
				"braces": "^3.0.3",
				"picomatch": "^2.3.1"
			},
			"engines": {
				"node": ">=8.6"
			}
		},
		"node_modules/mime": {
			"version": "1.6.0",
			"resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
			"integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
			"bin": {
				"mime": "cli.js"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/mime-db": {
			"version": "1.52.0",
			"resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
			"integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/mime-types": {
			"version": "2.1.35",
			"resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
			"integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
			"dependencies": {
				"mime-db": "1.52.0"
			},
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/mimic-fn": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
			"integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/mimic-function": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz",
			"integrity": "sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/min-indent": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
			"integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
			"dev": true,
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/minimatch": {
			"version": "9.0.3",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.3.tgz",
			"integrity": "sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==",
			"dev": true,
			"dependencies": {
				"brace-expansion": "^2.0.1"
			},
			"engines": {
				"node": ">=16 || 14 >=14.17"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/minimist": {
			"version": "1.2.8",
			"resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
			"integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/minipass": {
			"version": "7.1.2",
			"resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
			"integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
			"engines": {
				"node": ">=16 || 14 >=14.17"
			}
		},
		"node_modules/minizlib": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.1.tgz",
			"integrity": "sha512-umcy022ILvb5/3Djuu8LWeqUa8D68JaBzlttKeMWen48SjabqS3iY5w/vzeMzMUNhLDifyhbOwKDSznB1vvrwg==",
			"dependencies": {
				"minipass": "^7.0.4",
				"rimraf": "^5.0.5"
			},
			"engines": {
				"node": ">= 18"
			}
		},
		"node_modules/minizlib/node_modules/rimraf": {
			"version": "5.0.10",
			"resolved": "https://registry.npmjs.org/rimraf/-/rimraf-5.0.10.tgz",
			"integrity": "sha512-l0OE8wL34P4nJH/H2ffoaniAokM2qSmrtXHmlpvYr5AVVX8msAyW0l8NVJFDxlSK4u3Uh/f41cQheDVdnYijwQ==",
			"dependencies": {
				"glob": "^10.3.7"
			},
			"bin": {
				"rimraf": "dist/esm/bin.mjs"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/mkdirp": {
			"version": "0.5.6",
			"resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
			"integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
			"dev": true,
			"dependencies": {
				"minimist": "^1.2.6"
			},
			"bin": {
				"mkdirp": "bin/cmd.js"
			}
		},
		"node_modules/mlly": {
			"version": "1.7.1",
			"resolved": "https://registry.npmjs.org/mlly/-/mlly-1.7.1.tgz",
			"integrity": "sha512-rrVRZRELyQzrIUAVMHxP97kv+G786pHmOKzuFII8zDYahFBS7qnHh2AlYSl1GAHhaMPCz6/oHjVMcfFYgFYHgA==",
			"dev": true,
			"dependencies": {
				"acorn": "^8.11.3",
				"pathe": "^1.1.2",
				"pkg-types": "^1.1.1",
				"ufo": "^1.5.3"
			}
		},
		"node_modules/mongodb": {
			"version": "5.9.2",
			"resolved": "https://registry.npmjs.org/mongodb/-/mongodb-5.9.2.tgz",
			"integrity": "sha512-H60HecKO4Bc+7dhOv4sJlgvenK4fQNqqUIlXxZYQNbfEWSALGAwGoyJd/0Qwk4TttFXUOHJ2ZJQe/52ScaUwtQ==",
			"dependencies": {
				"bson": "^5.5.0",
				"mongodb-connection-string-url": "^2.6.0",
				"socks": "^2.7.1"
			},
			"engines": {
				"node": ">=14.20.1"
			},
			"optionalDependencies": {
				"@mongodb-js/saslprep": "^1.1.0"
			},
			"peerDependencies": {
				"@aws-sdk/credential-providers": "^3.188.0",
				"@mongodb-js/zstd": "^1.0.0",
				"kerberos": "^1.0.0 || ^2.0.0",
				"mongodb-client-encryption": ">=2.3.0 <3",
				"snappy": "^7.2.2"
			},
			"peerDependenciesMeta": {
				"@aws-sdk/credential-providers": {
					"optional": true
				},
				"@mongodb-js/zstd": {
					"optional": true
				},
				"kerberos": {
					"optional": true
				},
				"mongodb-client-encryption": {
					"optional": true
				},
				"snappy": {
					"optional": true
				}
			}
		},
		"node_modules/mongodb-connection-string-url": {
			"version": "2.6.0",
			"resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz",
			"integrity": "sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==",
			"dependencies": {
				"@types/whatwg-url": "^8.2.1",
				"whatwg-url": "^11.0.0"
			}
		},
		"node_modules/mongodb-connection-string-url/node_modules/tr46": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/tr46/-/tr46-3.0.0.tgz",
			"integrity": "sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==",
			"dependencies": {
				"punycode": "^2.1.1"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/mongodb-connection-string-url/node_modules/whatwg-url": {
			"version": "11.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-11.0.0.tgz",
			"integrity": "sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==",
			"dependencies": {
				"tr46": "^3.0.0",
				"webidl-conversions": "^7.0.0"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/mri": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/mri/-/mri-1.2.0.tgz",
			"integrity": "sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==",
			"dev": true,
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/mrmime": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.0.tgz",
			"integrity": "sha512-eu38+hdgojoyq63s+yTpN4XMBdt5l8HhMhc4VKLO9KM5caLIBvUm4thi7fFaxyTmCKeNnXZ5pAlBwCUnhA09uw==",
			"dev": true,
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/ms": {
			"version": "2.1.3",
			"resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
			"integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
		},
		"node_modules/msw": {
			"version": "2.4.4",
			"resolved": "https://registry.npmjs.org/msw/-/msw-2.4.4.tgz",
			"integrity": "sha512-iuM0qGs4YmgYCLH+xqb07w2e/e4fYmsx3+WHVlIOUA34TW1sw+wRpNmOlXnLDkw/T7233Jnm6t+aNf4v2E3e2Q==",
			"hasInstallScript": true,
			"dependencies": {
				"@bundled-es-modules/cookie": "^2.0.0",
				"@bundled-es-modules/statuses": "^1.0.1",
				"@bundled-es-modules/tough-cookie": "^0.1.6",
				"@inquirer/confirm": "^3.0.0",
				"@mswjs/interceptors": "^0.35.0",
				"@open-draft/until": "^2.1.0",
				"@types/cookie": "^0.6.0",
				"@types/statuses": "^2.0.4",
				"chalk": "^4.1.2",
				"graphql": "^16.8.1",
				"headers-polyfill": "^4.0.2",
				"is-node-process": "^1.2.0",
				"outvariant": "^1.4.2",
				"path-to-regexp": "^6.2.0",
				"strict-event-emitter": "^0.5.1",
				"type-fest": "^4.9.0",
				"yargs": "^17.7.2"
			},
			"bin": {
				"msw": "cli/index.js"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/mswjs"
			},
			"peerDependencies": {
				"typescript": ">= 4.8.x"
			},
			"peerDependenciesMeta": {
				"typescript": {
					"optional": true
				}
			}
		},
		"node_modules/msw/node_modules/path-to-regexp": {
			"version": "6.2.2",
			"resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-6.2.2.tgz",
			"integrity": "sha512-GQX3SSMokngb36+whdpRXE+3f9V8UzyAorlYvOGx87ufGHehNTn5lCxrKtLyZ4Yl/wEKnNnr98ZzOwwDZV5ogw=="
		},
		"node_modules/msw/node_modules/type-fest": {
			"version": "4.26.1",
			"resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.26.1.tgz",
			"integrity": "sha512-yOGpmOAL7CkKe/91I5O3gPICmJNLJ1G4zFYVAsRHg7M64biSnPtRj0WNQt++bRkjYOqjWXrhnUw1utzmVErAdg==",
			"engines": {
				"node": ">=16"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/mute-stream": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
			"integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
			"engines": {
				"node": "^14.17.0 || ^16.13.0 || >=18.0.0"
			}
		},
		"node_modules/mz": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
			"integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
			"dependencies": {
				"any-promise": "^1.0.0",
				"object-assign": "^4.0.1",
				"thenify-all": "^1.0.0"
			}
		},
		"node_modules/nanoid": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/nanoid/-/nanoid-4.0.2.tgz",
			"integrity": "sha512-7ZtY5KTCNheRGfEFxnedV5zFiORN1+Y1N6zvPTnHQd8ENUvfaDBeuJDZb2bN/oXwXxu3qkTXDzy57W5vAmDTBw==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"bin": {
				"nanoid": "bin/nanoid.js"
			},
			"engines": {
				"node": "^14 || ^16 || >=18"
			}
		},
		"node_modules/natural-compare": {
			"version": "1.4.0",
			"resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
			"integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
			"dev": true
		},
		"node_modules/negotiator": {
			"version": "0.6.3",
			"resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
			"integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/neo-async": {
			"version": "2.6.2",
			"resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
			"integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw=="
		},
		"node_modules/node-domexception": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
			"integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/jimmywarting"
				},
				{
					"type": "github",
					"url": "https://paypal.me/jimmywarting"
				}
			],
			"optional": true,
			"engines": {
				"node": ">=10.5.0"
			}
		},
		"node_modules/node-fetch": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
			"integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
			"dependencies": {
				"whatwg-url": "^5.0.0"
			},
			"engines": {
				"node": "4.x || >=6.0.0"
			},
			"peerDependencies": {
				"encoding": "^0.1.0"
			},
			"peerDependenciesMeta": {
				"encoding": {
					"optional": true
				}
			}
		},
		"node_modules/node-fetch/node_modules/tr46": {
			"version": "0.0.3",
			"resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
			"integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
		},
		"node_modules/node-fetch/node_modules/webidl-conversions": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
			"integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
		},
		"node_modules/node-fetch/node_modules/whatwg-url": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
			"integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
			"dependencies": {
				"tr46": "~0.0.3",
				"webidl-conversions": "^3.0.0"
			}
		},
		"node_modules/node-gyp-build": {
			"version": "4.8.2",
			"resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.2.tgz",
			"integrity": "sha512-IRUxE4BVsHWXkV/SFOut4qTlagw2aM8T5/vnTsmrHJvVoKueJHRc/JaFND7QDDc61kLYUJ6qlZM3sqTSyx2dTw==",
			"bin": {
				"node-gyp-build": "bin.js",
				"node-gyp-build-optional": "optional.js",
				"node-gyp-build-test": "build-test.js"
			}
		},
		"node_modules/node-int64": {
			"version": "0.4.0",
			"resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
			"integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw=="
		},
		"node_modules/node-releases": {
			"version": "2.0.18",
			"resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz",
			"integrity": "sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g=="
		},
		"node_modules/normalize-path": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
			"integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/normalize-range": {
			"version": "0.1.2",
			"resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
			"integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/npm-run-path": {
			"version": "5.3.0",
			"resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz",
			"integrity": "sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==",
			"dependencies": {
				"path-key": "^4.0.0"
			},
			"engines": {
				"node": "^12.20.0 || ^14.13.1 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/npm-run-path/node_modules/path-key": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
			"integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/nwsapi": {
			"version": "2.2.12",
			"resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.12.tgz",
			"integrity": "sha512-qXDmcVlZV4XRtKFzddidpfVP4oMSGhga+xdMc25mv8kaLUHtgzCDhUxkrN8exkGdTlLNaXj7CV3GtON7zuGZ+w=="
		},
		"node_modules/object-assign": {
			"version": "4.1.1",
			"resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
			"integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/object-hash": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/object-hash/-/object-hash-2.2.0.tgz",
			"integrity": "sha512-gScRMn0bS5fH+IuwyIFgnh9zBdo4DV+6GhygmWM9HyNJSgS0hScp1f5vjtm7oIIOiT9trXrShAkLFSc2IqKNgw==",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/object-inspect": {
			"version": "1.13.2",
			"resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.2.tgz",
			"integrity": "sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==",
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/object-stream": {
			"version": "0.0.1",
			"resolved": "https://registry.npmjs.org/object-stream/-/object-stream-0.0.1.tgz",
			"integrity": "sha512-+NPJnRvX9RDMRY9mOWOo/NDppBjbZhXirNNSu2IBnuNboClC9h1ZGHXgHBLDbJMHsxeJDq922aVmG5xs24a/cA==",
			"engines": {
				"node": ">=0.10"
			}
		},
		"node_modules/oidc-token-hash": {
			"version": "5.0.3",
			"resolved": "https://registry.npmjs.org/oidc-token-hash/-/oidc-token-hash-5.0.3.tgz",
			"integrity": "sha512-IF4PcGgzAr6XXSff26Sk/+P4KZFJVuHAJZj3wgO3vX2bMdNVp/QXTP3P7CEm9V1IdG8lDLY3HhiqpsE/nOwpPw==",
			"engines": {
				"node": "^10.13.0 || >=12.0.0"
			}
		},
		"node_modules/on-exit-leak-free": {
			"version": "2.1.2",
			"resolved": "https://registry.npmjs.org/on-exit-leak-free/-/on-exit-leak-free-2.1.2.tgz",
			"integrity": "sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==",
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/on-finished": {
			"version": "2.4.1",
			"resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
			"integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
			"dependencies": {
				"ee-first": "1.1.1"
			},
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/once": {
			"version": "1.4.0",
			"resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
			"integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
			"dependencies": {
				"wrappy": "1"
			}
		},
		"node_modules/onetime": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz",
			"integrity": "sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==",
			"dependencies": {
				"mimic-fn": "^4.0.0"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/onnxruntime-common": {
			"version": "1.19.0",
			"resolved": "https://registry.npmjs.org/onnxruntime-common/-/onnxruntime-common-1.19.0.tgz",
			"integrity": "sha512-Oo16UIJ/xLOtZDVGcL4bL8EP8MiNFztyBmR3pB14D+cl/UCpOgHHzEk0MADSmYXQ0FgyEegPXtOFcJqhq1YRsw=="
		},
		"node_modules/onnxruntime-node": {
			"version": "1.19.0",
			"resolved": "https://registry.npmjs.org/onnxruntime-node/-/onnxruntime-node-1.19.0.tgz",
			"integrity": "sha512-JivYcrZ9H9YPpHnP+5rTVTJjzuD+ZB0TsB0//e2La0ViYNG0hmTvnwFgmRoes6F7E1PyVMpyRftmcl9pnIWsnw==",
			"hasInstallScript": true,
			"os": [
				"win32",
				"darwin",
				"linux"
			],
			"dependencies": {
				"onnxruntime-common": "1.19.0",
				"tar": "^7.0.1"
			}
		},
		"node_modules/onnxruntime-web": {
			"version": "1.20.0-dev.20240827-1d059b8702",
			"resolved": "https://registry.npmjs.org/onnxruntime-web/-/onnxruntime-web-1.20.0-dev.20240827-1d059b8702.tgz",
			"integrity": "sha512-v1t3TgnOmyzA1lGcUiqp6kZDv7QxO+yJI00vHp8lyjgBrnxkLY+6fqFZpBfm81AH5sRaCdG+HsOmb5Y37TIAyw==",
			"dependencies": {
				"flatbuffers": "^1.12.0",
				"guid-typescript": "^1.0.9",
				"long": "^5.2.3",
				"onnxruntime-common": "1.20.0-dev.20240827-5d54dc1462",
				"platform": "^1.3.6",
				"protobufjs": "^7.2.4"
			}
		},
		"node_modules/onnxruntime-web/node_modules/onnxruntime-common": {
			"version": "1.20.0-dev.20240827-5d54dc1462",
			"resolved": "https://registry.npmjs.org/onnxruntime-common/-/onnxruntime-common-1.20.0-dev.20240827-5d54dc1462.tgz",
			"integrity": "sha512-oR+xPRD64OI+w9nRLXQi9rEXYZ5W9BhqVi688sUTreU9J6pK182JYblmHjvapCg+Tta6MbkAsr3T1NZHM3tB1g=="
		},
		"node_modules/openai": {
			"version": "4.58.1",
			"resolved": "https://registry.npmjs.org/openai/-/openai-4.58.1.tgz",
			"integrity": "sha512-n9fN4RIjbj4PbZU6IN/FOBBbxHbHEcW18rDZ4nW2cDNfZP2+upm/FM20UCmRNMQTvhOvw/2Tw4vgioQyQb5nlA==",
			"optional": true,
			"dependencies": {
				"@types/node": "^18.11.18",
				"@types/node-fetch": "^2.6.4",
				"@types/qs": "^6.9.15",
				"abort-controller": "^3.0.0",
				"agentkeepalive": "^4.2.1",
				"form-data-encoder": "1.7.2",
				"formdata-node": "^4.3.2",
				"node-fetch": "^2.6.7",
				"qs": "^6.10.3"
			},
			"bin": {
				"openai": "bin/cli"
			},
			"peerDependencies": {
				"zod": "^3.23.8"
			},
			"peerDependenciesMeta": {
				"zod": {
					"optional": true
				}
			}
		},
		"node_modules/openai/node_modules/@types/node": {
			"version": "18.19.50",
			"resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.50.tgz",
			"integrity": "sha512-xonK+NRrMBRtkL1hVCc3G+uXtjh1Al4opBLjqVmipe5ZAaBYWW6cNAiBVZ1BvmkBhep698rP3UM3aRAdSALuhg==",
			"optional": true,
			"dependencies": {
				"undici-types": "~5.26.4"
			}
		},
		"node_modules/openai/node_modules/undici-types": {
			"version": "5.26.5",
			"resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
			"integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
			"optional": true
		},
		"node_modules/openid-client": {
			"version": "5.6.5",
			"resolved": "https://registry.npmjs.org/openid-client/-/openid-client-5.6.5.tgz",
			"integrity": "sha512-5P4qO9nGJzB5PI0LFlhj4Dzg3m4odt0qsJTfyEtZyOlkgpILwEioOhVVJOrS1iVH494S4Ee5OCjjg6Bf5WOj3w==",
			"dependencies": {
				"jose": "^4.15.5",
				"lru-cache": "^6.0.0",
				"object-hash": "^2.2.0",
				"oidc-token-hash": "^5.0.3"
			},
			"funding": {
				"url": "https://github.com/sponsors/panva"
			}
		},
		"node_modules/openid-client/node_modules/jose": {
			"version": "4.15.9",
			"resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
			"integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
			"funding": {
				"url": "https://github.com/sponsors/panva"
			}
		},
		"node_modules/optionator": {
			"version": "0.9.4",
			"resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
			"integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
			"dev": true,
			"dependencies": {
				"deep-is": "^0.1.3",
				"fast-levenshtein": "^2.0.6",
				"levn": "^0.4.1",
				"prelude-ls": "^1.2.1",
				"type-check": "^0.4.0",
				"word-wrap": "^1.2.5"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/outvariant": {
			"version": "1.4.3",
			"resolved": "https://registry.npmjs.org/outvariant/-/outvariant-1.4.3.tgz",
			"integrity": "sha512-+Sl2UErvtsoajRDKCE5/dBz4DIvHXQQnAxtQTF04OJxY0+DyZXSo5P5Bb7XYWOh81syohlYL24hbDwxedPUJCA=="
		},
		"node_modules/p-limit": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
			"integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
			"dev": true,
			"dependencies": {
				"yocto-queue": "^0.1.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/p-locate": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
			"integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
			"dev": true,
			"dependencies": {
				"p-limit": "^3.0.2"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/package-json-from-dist": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.0.tgz",
			"integrity": "sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw=="
		},
		"node_modules/package-manager-detector": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/package-manager-detector/-/package-manager-detector-0.2.0.tgz",
			"integrity": "sha512-E385OSk9qDcXhcM9LNSe4sdhx8a9mAPrZ4sMLW+tmxl5ZuGtPUcdFu+MPP2jbgiWAZ6Pfe5soGFMd+0Db5Vrog==",
			"dev": true
		},
		"node_modules/pako": {
			"version": "0.2.9",
			"resolved": "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz",
			"integrity": "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA=="
		},
		"node_modules/parent-module": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
			"integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
			"dev": true,
			"dependencies": {
				"callsites": "^3.0.0"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/parquetjs": {
			"version": "0.11.2",
			"resolved": "https://registry.npmjs.org/parquetjs/-/parquetjs-0.11.2.tgz",
			"integrity": "sha512-Y6FOc3Oi2AxY4TzJPz7fhICCR8tQNL3p+2xGQoUAMbmlJBR7+JJmMrwuyMjIpDiM7G8Wj/8oqOH4UDUmu4I5ZA==",
			"dependencies": {
				"brotli": "^1.3.0",
				"bson": "^1.0.4",
				"int53": "^0.2.4",
				"object-stream": "0.0.1",
				"snappyjs": "^0.6.0",
				"thrift": "^0.11.0",
				"varint": "^5.0.0"
			},
			"engines": {
				"node": ">=7.6"
			},
			"optionalDependencies": {
				"lzo": "^0.4.0"
			}
		},
		"node_modules/parquetjs/node_modules/bson": {
			"version": "1.1.6",
			"resolved": "https://registry.npmjs.org/bson/-/bson-1.1.6.tgz",
			"integrity": "sha512-EvVNVeGo4tHxwi8L6bPj3y3itEvStdwvvlojVxxbyYfoaxJ6keLgrTuKdyfEAszFK+H3olzBuafE0yoh0D1gdg==",
			"engines": {
				"node": ">=0.6.19"
			}
		},
		"node_modules/parse-css-color": {
			"version": "0.2.1",
			"resolved": "https://registry.npmjs.org/parse-css-color/-/parse-css-color-0.2.1.tgz",
			"integrity": "sha512-bwS/GGIFV3b6KS4uwpzCFj4w297Yl3uqnSgIPsoQkx7GMLROXfMnWvxfNkL0oh8HVhZA4hvJoEoEIqonfJ3BWg==",
			"dependencies": {
				"color-name": "^1.1.4",
				"hex-rgb": "^4.1.0"
			}
		},
		"node_modules/parse-srcset": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/parse-srcset/-/parse-srcset-1.0.2.tgz",
			"integrity": "sha512-/2qh0lav6CmI15FzA3i/2Bzk2zCgQhGMkvhOhKNcBVQ1ldgpbfiNTVslmooUmWJcADi1f1kIeynbDRVzNlfR6Q=="
		},
		"node_modules/parse5": {
			"version": "7.1.2",
			"resolved": "https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz",
			"integrity": "sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==",
			"dependencies": {
				"entities": "^4.4.0"
			},
			"funding": {
				"url": "https://github.com/inikulin/parse5?sponsor=1"
			}
		},
		"node_modules/parseurl": {
			"version": "1.3.3",
			"resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
			"integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/path-exists": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
			"integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/path-is-absolute": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
			"integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
			"dev": true,
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/path-key": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
			"integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/path-parse": {
			"version": "1.0.7",
			"resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
		},
		"node_modules/path-scurry": {
			"version": "1.11.1",
			"resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
			"integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
			"dependencies": {
				"lru-cache": "^10.2.0",
				"minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
			},
			"engines": {
				"node": ">=16 || 14 >=14.18"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/path-scurry/node_modules/lru-cache": {
			"version": "10.4.3",
			"resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
			"integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ=="
		},
		"node_modules/path-to-regexp": {
			"version": "0.1.7",
			"resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
			"integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
		},
		"node_modules/path-type": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
			"integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/pathe": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/pathe/-/pathe-1.1.2.tgz",
			"integrity": "sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==",
			"dev": true
		},
		"node_modules/pathval": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/pathval/-/pathval-1.1.1.tgz",
			"integrity": "sha512-Dp6zGqpTdETdR63lehJYPeIOqpiNBNtc7BpWSLrOje7UaIsE5aY92r/AunQA7rsXvet3lrJ3JnZX29UPTKXyKQ==",
			"dev": true,
			"engines": {
				"node": "*"
			}
		},
		"node_modules/peek-readable": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/peek-readable/-/peek-readable-5.2.0.tgz",
			"integrity": "sha512-U94a+eXHzct7vAd19GH3UQ2dH4Satbng0MyYTMaQatL0pvYYL5CTPR25HBhKtecl+4bfu1/i3vC6k0hydO5Vcw==",
			"engines": {
				"node": ">=14.16"
			},
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/Borewit"
			}
		},
		"node_modules/periscopic": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/periscopic/-/periscopic-3.1.0.tgz",
			"integrity": "sha512-vKiQ8RRtkl9P+r/+oefh25C3fhybptkHKCZSPlcXiJux2tJF55GnEj3BVn4A5gKfq9NWWXXrxkHBwVPUfH0opw==",
			"dev": true,
			"dependencies": {
				"@types/estree": "^1.0.0",
				"estree-walker": "^3.0.0",
				"is-reference": "^3.0.0"
			}
		},
		"node_modules/periscopic/node_modules/estree-walker": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
			"integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
			"dev": true,
			"dependencies": {
				"@types/estree": "^1.0.0"
			}
		},
		"node_modules/periscopic/node_modules/is-reference": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-3.0.2.tgz",
			"integrity": "sha512-v3rht/LgVcsdZa3O2Nqs+NMowLOxeOm7Ay9+/ARQ2F+qEoANRcqrjAZKGN0v8ymUetZGgkp26LTnGT7H0Qo9Pg==",
			"dev": true,
			"dependencies": {
				"@types/estree": "*"
			}
		},
		"node_modules/picocolors": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.0.tgz",
			"integrity": "sha512-TQ92mBOW0l3LeMeyLV6mzy/kWr8lkd/hp3mTg7wYK7zJhuBStmGMBG0BdeDZS/dZx1IukaX6Bk11zcln25o1Aw=="
		},
		"node_modules/picomatch": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
			"engines": {
				"node": ">=8.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/jonschlinkert"
			}
		},
		"node_modules/pidtree": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/pidtree/-/pidtree-0.6.0.tgz",
			"integrity": "sha512-eG2dWTVw5bzqGRztnHExczNxt5VGsE6OwTeCG3fdUf9KBsZzO3R5OIIIzWR+iZA0NtZ+RDVdaoE2dK1cn6jH4g==",
			"bin": {
				"pidtree": "bin/pidtree.js"
			},
			"engines": {
				"node": ">=0.10"
			}
		},
		"node_modules/pify": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
			"integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/pino": {
			"version": "9.4.0",
			"resolved": "https://registry.npmjs.org/pino/-/pino-9.4.0.tgz",
			"integrity": "sha512-nbkQb5+9YPhQRz/BeQmrWpEknAaqjpAqRK8NwJpmrX/JHu7JuZC5G1CeAwJDJfGes4h+YihC6in3Q2nGb+Y09w==",
			"dependencies": {
				"atomic-sleep": "^1.0.0",
				"fast-redact": "^3.1.1",
				"on-exit-leak-free": "^2.1.0",
				"pino-abstract-transport": "^1.2.0",
				"pino-std-serializers": "^7.0.0",
				"process-warning": "^4.0.0",
				"quick-format-unescaped": "^4.0.3",
				"real-require": "^0.2.0",
				"safe-stable-stringify": "^2.3.1",
				"sonic-boom": "^4.0.1",
				"thread-stream": "^3.0.0"
			},
			"bin": {
				"pino": "bin.js"
			}
		},
		"node_modules/pino-abstract-transport": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/pino-abstract-transport/-/pino-abstract-transport-1.2.0.tgz",
			"integrity": "sha512-Guhh8EZfPCfH+PMXAb6rKOjGQEoy0xlAIn+irODG5kgfYV+BQ0rGYYWTIel3P5mmyXqkYkPmdIkywsn6QKUR1Q==",
			"dependencies": {
				"readable-stream": "^4.0.0",
				"split2": "^4.0.0"
			}
		},
		"node_modules/pino-pretty": {
			"version": "11.2.2",
			"resolved": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-11.2.2.tgz",
			"integrity": "sha512-2FnyGir8nAJAqD3srROdrF1J5BIcMT4nwj7hHSc60El6Uxlym00UbCCd8pYIterstVBFlMyF1yFV8XdGIPbj4A==",
			"dependencies": {
				"colorette": "^2.0.7",
				"dateformat": "^4.6.3",
				"fast-copy": "^3.0.2",
				"fast-safe-stringify": "^2.1.1",
				"help-me": "^5.0.0",
				"joycon": "^3.1.1",
				"minimist": "^1.2.6",
				"on-exit-leak-free": "^2.1.0",
				"pino-abstract-transport": "^1.0.0",
				"pump": "^3.0.0",
				"readable-stream": "^4.0.0",
				"secure-json-parse": "^2.4.0",
				"sonic-boom": "^4.0.1",
				"strip-json-comments": "^3.1.1"
			},
			"bin": {
				"pino-pretty": "bin.js"
			}
		},
		"node_modules/pino-std-serializers": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/pino-std-serializers/-/pino-std-serializers-7.0.0.tgz",
			"integrity": "sha512-e906FRY0+tV27iq4juKzSYPbUj2do2X2JX4EzSca1631EB2QJQUqGbDuERal7LCtOpxl6x3+nvo9NPZcmjkiFA=="
		},
		"node_modules/pirates": {
			"version": "4.0.6",
			"resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
			"integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/pkg-types": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-1.2.0.tgz",
			"integrity": "sha512-+ifYuSSqOQ8CqP4MbZA5hDpb97n3E8SVWdJe+Wms9kj745lmd3b7EZJiqvmLwAlmRfjrI7Hi5z3kdBJ93lFNPA==",
			"dev": true,
			"dependencies": {
				"confbox": "^0.1.7",
				"mlly": "^1.7.1",
				"pathe": "^1.1.2"
			}
		},
		"node_modules/platform": {
			"version": "1.3.6",
			"resolved": "https://registry.npmjs.org/platform/-/platform-1.3.6.tgz",
			"integrity": "sha512-fnWVljUchTro6RiCFvCXBbNhJc2NijN7oIQxbwsyL0buWJPG85v81ehlHI9fXrJsMNgTofEoWIQeClKpgxFLrg=="
		},
		"node_modules/playwright": {
			"version": "1.47.0",
			"resolved": "https://registry.npmjs.org/playwright/-/playwright-1.47.0.tgz",
			"integrity": "sha512-jOWiRq2pdNAX/mwLiwFYnPHpEZ4rM+fRSQpRHwEwZlP2PUANvL3+aJOF/bvISMhFD30rqMxUB4RJx9aQbfh4Ww==",
			"dependencies": {
				"playwright-core": "1.47.0"
			},
			"bin": {
				"playwright": "cli.js"
			},
			"engines": {
				"node": ">=18"
			},
			"optionalDependencies": {
				"fsevents": "2.3.2"
			}
		},
		"node_modules/playwright-core": {
			"version": "1.47.0",
			"resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.47.0.tgz",
			"integrity": "sha512-1DyHT8OqkcfCkYUD9zzUTfg7EfTd+6a8MkD/NWOvjo0u/SCNd5YmY/lJwFvUZOxJbWNds+ei7ic2+R/cRz/PDg==",
			"bin": {
				"playwright-core": "cli.js"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/postcss": {
			"version": "8.4.45",
			"resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.45.tgz",
			"integrity": "sha512-7KTLTdzdZZYscUc65XmjFiB73vBhBfbPztCYdUNvlaso9PrzjzcmjqBPR0lNGkcVlcO4BjiO5rK/qNz+XAen1Q==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/postcss"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"dependencies": {
				"nanoid": "^3.3.7",
				"picocolors": "^1.0.1",
				"source-map-js": "^1.2.0"
			},
			"engines": {
				"node": "^10 || ^12 || >=14"
			}
		},
		"node_modules/postcss-import": {
			"version": "15.1.0",
			"resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
			"integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
			"dependencies": {
				"postcss-value-parser": "^4.0.0",
				"read-cache": "^1.0.0",
				"resolve": "^1.1.7"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"postcss": "^8.0.0"
			}
		},
		"node_modules/postcss-js": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
			"integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
			"dependencies": {
				"camelcase-css": "^2.0.1"
			},
			"engines": {
				"node": "^12 || ^14 || >= 16"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/postcss/"
			},
			"peerDependencies": {
				"postcss": "^8.4.21"
			}
		},
		"node_modules/postcss-load-config": {
			"version": "3.1.4",
			"resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-3.1.4.tgz",
			"integrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg==",
			"dev": true,
			"dependencies": {
				"lilconfig": "^2.0.5",
				"yaml": "^1.10.2"
			},
			"engines": {
				"node": ">= 10"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/postcss/"
			},
			"peerDependencies": {
				"postcss": ">=8.0.9",
				"ts-node": ">=9.0.0"
			},
			"peerDependenciesMeta": {
				"postcss": {
					"optional": true
				},
				"ts-node": {
					"optional": true
				}
			}
		},
		"node_modules/postcss-load-config/node_modules/lilconfig": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
			"integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
			"dev": true,
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/postcss-load-config/node_modules/yaml": {
			"version": "1.10.2",
			"resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
			"integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
			"dev": true,
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/postcss-nested": {
			"version": "6.2.0",
			"resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
			"integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"dependencies": {
				"postcss-selector-parser": "^6.1.1"
			},
			"engines": {
				"node": ">=12.0"
			},
			"peerDependencies": {
				"postcss": "^8.2.14"
			}
		},
		"node_modules/postcss-nested/node_modules/postcss-selector-parser": {
			"version": "6.1.2",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/postcss-safe-parser": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/postcss-safe-parser/-/postcss-safe-parser-6.0.0.tgz",
			"integrity": "sha512-FARHN8pwH+WiS2OPCxJI8FuRJpTVnn6ZNFiqAM2aeW2LwTHWWmWgIyKC6cUo0L8aeKiF/14MNvnpls6R2PBeMQ==",
			"dev": true,
			"engines": {
				"node": ">=12.0"
			},
			"funding": {
				"type": "opencollective",
				"url": "https://opencollective.com/postcss/"
			},
			"peerDependencies": {
				"postcss": "^8.3.3"
			}
		},
		"node_modules/postcss-scss": {
			"version": "4.0.9",
			"resolved": "https://registry.npmjs.org/postcss-scss/-/postcss-scss-4.0.9.tgz",
			"integrity": "sha512-AjKOeiwAitL/MXxQW2DliT28EKukvvbEWx3LBmJIRN8KfBGZbRTxNYW0kSqi1COiTZ57nZ9NW06S6ux//N1c9A==",
			"dev": true,
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/postcss-scss"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"engines": {
				"node": ">=12.0"
			},
			"peerDependencies": {
				"postcss": "^8.4.29"
			}
		},
		"node_modules/postcss-selector-parser": {
			"version": "6.0.10",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
			"integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
			"dev": true,
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/postcss-value-parser": {
			"version": "4.2.0",
			"resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
			"integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
		},
		"node_modules/postcss/node_modules/nanoid": {
			"version": "3.3.7",
			"resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
			"integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"bin": {
				"nanoid": "bin/nanoid.cjs"
			},
			"engines": {
				"node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
			}
		},
		"node_modules/prelude-ls": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
			"integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
			"dev": true,
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/prettier": {
			"version": "2.8.8",
			"resolved": "https://registry.npmjs.org/prettier/-/prettier-2.8.8.tgz",
			"integrity": "sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==",
			"dev": true,
			"bin": {
				"prettier": "bin-prettier.js"
			},
			"engines": {
				"node": ">=10.13.0"
			},
			"funding": {
				"url": "https://github.com/prettier/prettier?sponsor=1"
			}
		},
		"node_modules/prettier-plugin-svelte": {
			"version": "2.10.1",
			"resolved": "https://registry.npmjs.org/prettier-plugin-svelte/-/prettier-plugin-svelte-2.10.1.tgz",
			"integrity": "sha512-Wlq7Z5v2ueCubWo0TZzKc9XHcm7TDxqcuzRuGd0gcENfzfT4JZ9yDlCbEgxWgiPmLHkBjfOtpAWkcT28MCDpUQ==",
			"dev": true,
			"peerDependencies": {
				"prettier": "^1.16.4 || ^2.0.0",
				"svelte": "^3.2.0 || ^4.0.0-next.0"
			}
		},
		"node_modules/prettier-plugin-tailwindcss": {
			"version": "0.2.8",
			"resolved": "https://registry.npmjs.org/prettier-plugin-tailwindcss/-/prettier-plugin-tailwindcss-0.2.8.tgz",
			"integrity": "sha512-KgPcEnJeIijlMjsA6WwYgRs5rh3/q76oInqtMXBA/EMcamrcYJpyhtRhyX1ayT9hnHlHTuO8sIifHF10WuSDKg==",
			"dev": true,
			"engines": {
				"node": ">=12.17.0"
			},
			"peerDependencies": {
				"@ianvs/prettier-plugin-sort-imports": "*",
				"@prettier/plugin-pug": "*",
				"@shopify/prettier-plugin-liquid": "*",
				"@shufo/prettier-plugin-blade": "*",
				"@trivago/prettier-plugin-sort-imports": "*",
				"prettier": ">=2.2.0",
				"prettier-plugin-astro": "*",
				"prettier-plugin-css-order": "*",
				"prettier-plugin-import-sort": "*",
				"prettier-plugin-jsdoc": "*",
				"prettier-plugin-organize-attributes": "*",
				"prettier-plugin-organize-imports": "*",
				"prettier-plugin-style-order": "*",
				"prettier-plugin-svelte": "*",
				"prettier-plugin-twig-melody": "*"
			},
			"peerDependenciesMeta": {
				"@ianvs/prettier-plugin-sort-imports": {
					"optional": true
				},
				"@prettier/plugin-pug": {
					"optional": true
				},
				"@shopify/prettier-plugin-liquid": {
					"optional": true
				},
				"@shufo/prettier-plugin-blade": {
					"optional": true
				},
				"@trivago/prettier-plugin-sort-imports": {
					"optional": true
				},
				"prettier-plugin-astro": {
					"optional": true
				},
				"prettier-plugin-css-order": {
					"optional": true
				},
				"prettier-plugin-import-sort": {
					"optional": true
				},
				"prettier-plugin-jsdoc": {
					"optional": true
				},
				"prettier-plugin-organize-attributes": {
					"optional": true
				},
				"prettier-plugin-organize-imports": {
					"optional": true
				},
				"prettier-plugin-style-order": {
					"optional": true
				},
				"prettier-plugin-svelte": {
					"optional": true
				},
				"prettier-plugin-twig-melody": {
					"optional": true
				}
			}
		},
		"node_modules/pretty-format": {
			"version": "27.5.1",
			"resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
			"integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
			"dev": true,
			"dependencies": {
				"ansi-regex": "^5.0.1",
				"ansi-styles": "^5.0.0",
				"react-is": "^17.0.1"
			},
			"engines": {
				"node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
			}
		},
		"node_modules/pretty-format/node_modules/ansi-styles": {
			"version": "5.2.0",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
			"integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
			"dev": true,
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/process": {
			"version": "0.11.10",
			"resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
			"integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
			"engines": {
				"node": ">= 0.6.0"
			}
		},
		"node_modules/process-warning": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/process-warning/-/process-warning-4.0.0.tgz",
			"integrity": "sha512-/MyYDxttz7DfGMMHiysAsFE4qF+pQYAA8ziO/3NcRVrQ5fSk+Mns4QZA/oRPFzvcqNoVJXQNWNAsdwBXLUkQKw=="
		},
		"node_modules/prom-client": {
			"version": "15.1.3",
			"resolved": "https://registry.npmjs.org/prom-client/-/prom-client-15.1.3.tgz",
			"integrity": "sha512-6ZiOBfCywsD4k1BN9IX0uZhF+tJkV8q8llP64G5Hajs4JOeVLPCwpPVcpXy3BwYiUGgyJzsJJQeOIv7+hDSq8g==",
			"dev": true,
			"dependencies": {
				"@opentelemetry/api": "^1.4.0",
				"tdigest": "^0.1.1"
			},
			"engines": {
				"node": "^16 || ^18 || >=20"
			}
		},
		"node_modules/protobufjs": {
			"version": "7.4.0",
			"resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.4.0.tgz",
			"integrity": "sha512-mRUWCc3KUU4w1jU8sGxICXH/gNS94DvI1gxqDvBzhj1JpcsimQkYiOJfwsPUykUI5ZaspFbSgmBLER8IrQ3tqw==",
			"hasInstallScript": true,
			"dependencies": {
				"@protobufjs/aspromise": "^1.1.2",
				"@protobufjs/base64": "^1.1.2",
				"@protobufjs/codegen": "^2.0.4",
				"@protobufjs/eventemitter": "^1.1.0",
				"@protobufjs/fetch": "^1.1.0",
				"@protobufjs/float": "^1.0.2",
				"@protobufjs/inquire": "^1.1.0",
				"@protobufjs/path": "^1.1.2",
				"@protobufjs/pool": "^1.1.0",
				"@protobufjs/utf8": "^1.1.0",
				"@types/node": ">=13.7.0",
				"long": "^5.0.0"
			},
			"engines": {
				"node": ">=12.0.0"
			}
		},
		"node_modules/proxy-addr": {
			"version": "2.0.7",
			"resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
			"integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
			"dependencies": {
				"forwarded": "0.2.0",
				"ipaddr.js": "1.9.1"
			},
			"engines": {
				"node": ">= 0.10"
			}
		},
		"node_modules/psl": {
			"version": "1.9.0",
			"resolved": "https://registry.npmjs.org/psl/-/psl-1.9.0.tgz",
			"integrity": "sha512-E/ZsdU4HLs/68gYzgGTkMicWTLPdAftJLfJFlLUAAKZGkStNU72sZjT66SnMDVOfOWY/YAoiD7Jxa9iHvngcag=="
		},
		"node_modules/pump": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
			"integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
			"dependencies": {
				"end-of-stream": "^1.1.0",
				"once": "^1.3.1"
			}
		},
		"node_modules/punycode": {
			"version": "2.3.1",
			"resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
			"integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/q": {
			"version": "1.5.1",
			"resolved": "https://registry.npmjs.org/q/-/q-1.5.1.tgz",
			"integrity": "sha512-kV/CThkXo6xyFEZUugw/+pIOywXcDbFYgSct5cT3gqlbkBE1SJdwy6UQoZvodiWF/ckQLZyDE/Bu1M6gVu5lVw==",
			"deprecated": "You or someone you depend on is using Q, the JavaScript Promise library that gave JavaScript developers strong feelings about promises. They can almost certainly migrate to the native JavaScript promise now. Thank you literally everyone for joining me in this bet against the odds. Be excellent to each other.\n\n(For a CapTP with native promises, see @endo/eventual-send and @endo/captp)",
			"engines": {
				"node": ">=0.6.0",
				"teleport": ">=0.2.0"
			}
		},
		"node_modules/qs": {
			"version": "6.11.2",
			"resolved": "https://registry.npmjs.org/qs/-/qs-6.11.2.tgz",
			"integrity": "sha512-tDNIz22aBzCDxLtVH++VnTfzxlfeK5CbqohpSqpJgj1Wg/cQbStNAz3NuqCs5vV+pjBsK4x4pN9HlVh7rcYRiA==",
			"optional": true,
			"dependencies": {
				"side-channel": "^1.0.4"
			},
			"engines": {
				"node": ">=0.6"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/querystringify": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
			"integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ=="
		},
		"node_modules/queue": {
			"version": "6.0.2",
			"resolved": "https://registry.npmjs.org/queue/-/queue-6.0.2.tgz",
			"integrity": "sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA==",
			"dependencies": {
				"inherits": "~2.0.3"
			}
		},
		"node_modules/queue-microtask": {
			"version": "1.2.3",
			"resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
			"integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			]
		},
		"node_modules/quick-format-unescaped": {
			"version": "4.0.4",
			"resolved": "https://registry.npmjs.org/quick-format-unescaped/-/quick-format-unescaped-4.0.4.tgz",
			"integrity": "sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg=="
		},
		"node_modules/range-parser": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
			"integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/raw-body": {
			"version": "2.5.2",
			"resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
			"integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
			"dependencies": {
				"bytes": "3.1.2",
				"http-errors": "2.0.0",
				"iconv-lite": "0.4.24",
				"unpipe": "1.0.0"
			},
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/react-is": {
			"version": "17.0.2",
			"resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
			"integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
			"dev": true
		},
		"node_modules/read-cache": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
			"integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
			"dependencies": {
				"pify": "^2.3.0"
			}
		},
		"node_modules/readable-stream": {
			"version": "4.5.2",
			"resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.5.2.tgz",
			"integrity": "sha512-yjavECdqeZ3GLXNgRXgeQEdz9fvDDkNKyHnbHRFtOr7/LcfgBcmct7t/ET+HaCTqfh06OzoAxrkN/IfjJBVe+g==",
			"dependencies": {
				"abort-controller": "^3.0.0",
				"buffer": "^6.0.3",
				"events": "^3.3.0",
				"process": "^0.11.10",
				"string_decoder": "^1.3.0"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			}
		},
		"node_modules/readdirp": {
			"version": "3.6.0",
			"resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
			"integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
			"dependencies": {
				"picomatch": "^2.2.1"
			},
			"engines": {
				"node": ">=8.10.0"
			}
		},
		"node_modules/real-require": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/real-require/-/real-require-0.2.0.tgz",
			"integrity": "sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==",
			"engines": {
				"node": ">= 12.13.0"
			}
		},
		"node_modules/regenerator-runtime": {
			"version": "0.14.1",
			"resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
			"integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw=="
		},
		"node_modules/require-directory": {
			"version": "2.1.1",
			"resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
			"integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/requires-port": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
			"integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ=="
		},
		"node_modules/resolve": {
			"version": "1.22.8",
			"resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
			"integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
			"dependencies": {
				"is-core-module": "^2.13.0",
				"path-parse": "^1.0.7",
				"supports-preserve-symlinks-flag": "^1.0.0"
			},
			"bin": {
				"resolve": "bin/resolve"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/resolve-from": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
			"integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
			"dev": true,
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/restore-cursor": {
			"version": "5.1.0",
			"resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz",
			"integrity": "sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==",
			"dependencies": {
				"onetime": "^7.0.0",
				"signal-exit": "^4.1.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/restore-cursor/node_modules/onetime": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz",
			"integrity": "sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==",
			"dependencies": {
				"mimic-function": "^5.0.0"
			},
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/reusify": {
			"version": "1.0.4",
			"resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
			"integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
			"engines": {
				"iojs": ">=1.0.0",
				"node": ">=0.10.0"
			}
		},
		"node_modules/rfdc": {
			"version": "1.4.1",
			"resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz",
			"integrity": "sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA=="
		},
		"node_modules/rimraf": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
			"integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
			"deprecated": "Rimraf versions prior to v4 are no longer supported",
			"dev": true,
			"dependencies": {
				"glob": "^7.1.3"
			},
			"bin": {
				"rimraf": "bin.js"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/rimraf/node_modules/brace-expansion": {
			"version": "1.1.11",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			"integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			"dev": true,
			"dependencies": {
				"balanced-match": "^1.0.0",
				"concat-map": "0.0.1"
			}
		},
		"node_modules/rimraf/node_modules/glob": {
			"version": "7.2.3",
			"resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
			"integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
			"deprecated": "Glob versions prior to v9 are no longer supported",
			"dev": true,
			"dependencies": {
				"fs.realpath": "^1.0.0",
				"inflight": "^1.0.4",
				"inherits": "2",
				"minimatch": "^3.1.1",
				"once": "^1.3.0",
				"path-is-absolute": "^1.0.0"
			},
			"engines": {
				"node": "*"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/rimraf/node_modules/minimatch": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			"integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			"dev": true,
			"dependencies": {
				"brace-expansion": "^1.1.7"
			},
			"engines": {
				"node": "*"
			}
		},
		"node_modules/rollup": {
			"version": "4.21.2",
			"resolved": "https://registry.npmjs.org/rollup/-/rollup-4.21.2.tgz",
			"integrity": "sha512-e3TapAgYf9xjdLvKQCkQTnbTKd4a6jwlpQSJJFokHGaX2IVjoEqkIIhiQfqsi0cdwlOD+tQGuOd5AJkc5RngBw==",
			"dev": true,
			"dependencies": {
				"@types/estree": "1.0.5"
			},
			"bin": {
				"rollup": "dist/bin/rollup"
			},
			"engines": {
				"node": ">=18.0.0",
				"npm": ">=8.0.0"
			},
			"optionalDependencies": {
				"@rollup/rollup-android-arm-eabi": "4.21.2",
				"@rollup/rollup-android-arm64": "4.21.2",
				"@rollup/rollup-darwin-arm64": "4.21.2",
				"@rollup/rollup-darwin-x64": "4.21.2",
				"@rollup/rollup-linux-arm-gnueabihf": "4.21.2",
				"@rollup/rollup-linux-arm-musleabihf": "4.21.2",
				"@rollup/rollup-linux-arm64-gnu": "4.21.2",
				"@rollup/rollup-linux-arm64-musl": "4.21.2",
				"@rollup/rollup-linux-powerpc64le-gnu": "4.21.2",
				"@rollup/rollup-linux-riscv64-gnu": "4.21.2",
				"@rollup/rollup-linux-s390x-gnu": "4.21.2",
				"@rollup/rollup-linux-x64-gnu": "4.21.2",
				"@rollup/rollup-linux-x64-musl": "4.21.2",
				"@rollup/rollup-win32-arm64-msvc": "4.21.2",
				"@rollup/rollup-win32-ia32-msvc": "4.21.2",
				"@rollup/rollup-win32-x64-msvc": "4.21.2",
				"fsevents": "~2.3.2"
			}
		},
		"node_modules/rrweb-cssom": {
			"version": "0.6.0",
			"resolved": "https://registry.npmjs.org/rrweb-cssom/-/rrweb-cssom-0.6.0.tgz",
			"integrity": "sha512-APM0Gt1KoXBz0iIkkdB/kfvGOwC4UuJFeG/c+yV7wSc7q96cG/kJ0HiYCnzivD9SB53cLV1MlHFNfOuPaadYSw=="
		},
		"node_modules/run-parallel": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
			"integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			],
			"dependencies": {
				"queue-microtask": "^1.2.2"
			}
		},
		"node_modules/sade": {
			"version": "1.8.1",
			"resolved": "https://registry.npmjs.org/sade/-/sade-1.8.1.tgz",
			"integrity": "sha512-xal3CZX1Xlo/k4ApwCFrHVACi9fBqJ7V+mwhBsuf/1IOKbBy098Fex+Wa/5QMubw09pSZ/u8EY8PWgevJsXp1A==",
			"dev": true,
			"dependencies": {
				"mri": "^1.1.0"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/safe-buffer": {
			"version": "5.2.1",
			"resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
			"integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
			"funding": [
				{
					"type": "github",
					"url": "https://github.com/sponsors/feross"
				},
				{
					"type": "patreon",
					"url": "https://www.patreon.com/feross"
				},
				{
					"type": "consulting",
					"url": "https://feross.org/support"
				}
			]
		},
		"node_modules/safe-stable-stringify": {
			"version": "2.5.0",
			"resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
			"integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/safer-buffer": {
			"version": "2.1.2",
			"resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
			"integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
		},
		"node_modules/sander": {
			"version": "0.5.1",
			"resolved": "https://registry.npmjs.org/sander/-/sander-0.5.1.tgz",
			"integrity": "sha512-3lVqBir7WuKDHGrKRDn/1Ye3kwpXaDOMsiRP1wd6wpZW56gJhsbp5RqQpA6JG/P+pkXizygnr1dKR8vzWaVsfA==",
			"dev": true,
			"dependencies": {
				"es6-promise": "^3.1.2",
				"graceful-fs": "^4.1.3",
				"mkdirp": "^0.5.1",
				"rimraf": "^2.5.2"
			}
		},
		"node_modules/sander/node_modules/brace-expansion": {
			"version": "1.1.11",
			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
			"integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
			"dev": true,
			"dependencies": {
				"balanced-match": "^1.0.0",
				"concat-map": "0.0.1"
			}
		},
		"node_modules/sander/node_modules/glob": {
			"version": "7.2.3",
			"resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
			"integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
			"deprecated": "Glob versions prior to v9 are no longer supported",
			"dev": true,
			"dependencies": {
				"fs.realpath": "^1.0.0",
				"inflight": "^1.0.4",
				"inherits": "2",
				"minimatch": "^3.1.1",
				"once": "^1.3.0",
				"path-is-absolute": "^1.0.0"
			},
			"engines": {
				"node": "*"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/sander/node_modules/minimatch": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
			"integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
			"dev": true,
			"dependencies": {
				"brace-expansion": "^1.1.7"
			},
			"engines": {
				"node": "*"
			}
		},
		"node_modules/sander/node_modules/rimraf": {
			"version": "2.7.1",
			"resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
			"integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
			"deprecated": "Rimraf versions prior to v4 are no longer supported",
			"dev": true,
			"dependencies": {
				"glob": "^7.1.3"
			},
			"bin": {
				"rimraf": "bin.js"
			}
		},
		"node_modules/sanitize-html": {
			"version": "2.13.0",
			"resolved": "https://registry.npmjs.org/sanitize-html/-/sanitize-html-2.13.0.tgz",
			"integrity": "sha512-Xff91Z+4Mz5QiNSLdLWwjgBDm5b1RU6xBT0+12rapjiaR7SwfRdjw8f+6Rir2MXKLrDicRFHdb51hGOAxmsUIA==",
			"dependencies": {
				"deepmerge": "^4.2.2",
				"escape-string-regexp": "^4.0.0",
				"htmlparser2": "^8.0.0",
				"is-plain-object": "^5.0.0",
				"parse-srcset": "^1.0.2",
				"postcss": "^8.3.11"
			}
		},
		"node_modules/saslprep": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz",
			"integrity": "sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==",
			"dependencies": {
				"sparse-bitfield": "^3.0.3"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/satori": {
			"version": "0.10.14",
			"resolved": "https://registry.npmjs.org/satori/-/satori-0.10.14.tgz",
			"integrity": "sha512-abovcqmwl97WKioxpkfuMeZmndB1TuDFY/R+FymrZyiGP+pMYomvgSzVPnbNMWHHESOPosVHGL352oFbdAnJcA==",
			"dependencies": {
				"@shuding/opentype.js": "1.4.0-beta.0",
				"css-background-parser": "^0.1.0",
				"css-box-shadow": "1.0.0-3",
				"css-to-react-native": "^3.0.0",
				"emoji-regex": "^10.2.1",
				"escape-html": "^1.0.3",
				"linebreak": "^1.1.0",
				"parse-css-color": "^0.2.1",
				"postcss-value-parser": "^4.2.0",
				"yoga-wasm-web": "^0.3.3"
			},
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/satori-html": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/satori-html/-/satori-html-0.3.2.tgz",
			"integrity": "sha512-wjTh14iqADFKDK80e51/98MplTGfxz2RmIzh0GqShlf4a67+BooLywF17TvJPD6phO0Hxm7Mf1N5LtRYvdkYRA==",
			"dependencies": {
				"ultrahtml": "^1.2.0"
			}
		},
		"node_modules/saxes": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/saxes/-/saxes-6.0.0.tgz",
			"integrity": "sha512-xAg7SOnEhrm5zI3puOOKyy1OMcMlIJZYNJY7xLBwSze0UjhPLnWfj2GF2EpT0jmzaJKIWKHLsaSSajf35bcYnA==",
			"dependencies": {
				"xmlchars": "^2.2.0"
			},
			"engines": {
				"node": ">=v12.22.7"
			}
		},
		"node_modules/sbd": {
			"version": "1.0.19",
			"resolved": "https://registry.npmjs.org/sbd/-/sbd-1.0.19.tgz",
			"integrity": "sha512-b5RyZMGSrFuIB4AHdbv12uYHS8YGEJ36gtuvG3RflbJGY+T0dXmAL0E4vZjQqT2RsX0v+ZwVqhV2zsGr5aFK9w==",
			"dependencies": {
				"sanitize-html": "^2.3.2"
			}
		},
		"node_modules/secure-json-parse": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/secure-json-parse/-/secure-json-parse-2.7.0.tgz",
			"integrity": "sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw=="
		},
		"node_modules/semiver": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/semiver/-/semiver-1.1.0.tgz",
			"integrity": "sha512-QNI2ChmuioGC1/xjyYwyZYADILWyW6AmS1UH6gDj/SFUUUS4MBAWs/7mxnkRPc/F4iHezDP+O8t0dO8WHiEOdg==",
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/semver": {
			"version": "7.6.3",
			"resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
			"integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
			"bin": {
				"semver": "bin/semver.js"
			},
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/send": {
			"version": "0.18.0",
			"resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
			"integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
			"dependencies": {
				"debug": "2.6.9",
				"depd": "2.0.0",
				"destroy": "1.2.0",
				"encodeurl": "~1.0.2",
				"escape-html": "~1.0.3",
				"etag": "~1.8.1",
				"fresh": "0.5.2",
				"http-errors": "2.0.0",
				"mime": "1.6.0",
				"ms": "2.1.3",
				"on-finished": "2.4.1",
				"range-parser": "~1.2.1",
				"statuses": "2.0.1"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/send/node_modules/debug": {
			"version": "2.6.9",
			"resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
			"integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
			"dependencies": {
				"ms": "2.0.0"
			}
		},
		"node_modules/send/node_modules/debug/node_modules/ms": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
			"integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
		},
		"node_modules/serpapi": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/serpapi/-/serpapi-1.1.1.tgz",
			"integrity": "sha512-t5Bqu/6VMJ9naX8K+qCgUStpZOaNQFvIM4AudhMJLS6sqQT/EHaYrhGidDZHVx8QvcEdY6y1wNlxizOCtvJtUQ==",
			"dependencies": {
				"undici": "^5.12.0"
			}
		},
		"node_modules/serve-static": {
			"version": "1.15.0",
			"resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
			"integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
			"dependencies": {
				"encodeurl": "~1.0.2",
				"escape-html": "~1.0.3",
				"parseurl": "~1.3.3",
				"send": "0.18.0"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/set-cookie-parser": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.0.tgz",
			"integrity": "sha512-lXLOiqpkUumhRdFF3k1osNXCy9akgx/dyPZ5p8qAg9seJzXr5ZrlqZuWIMuY6ejOsVLE6flJ5/h3lsn57fQ/PQ==",
			"dev": true
		},
		"node_modules/set-function-length": {
			"version": "1.2.2",
			"resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
			"integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
			"dependencies": {
				"define-data-property": "^1.1.4",
				"es-errors": "^1.3.0",
				"function-bind": "^1.1.2",
				"get-intrinsic": "^1.2.4",
				"gopd": "^1.0.1",
				"has-property-descriptors": "^1.0.2"
			},
			"engines": {
				"node": ">= 0.4"
			}
		},
		"node_modules/setprototypeof": {
			"version": "1.2.0",
			"resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
			"integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
		},
		"node_modules/sharp": {
			"version": "0.33.5",
			"resolved": "https://registry.npmjs.org/sharp/-/sharp-0.33.5.tgz",
			"integrity": "sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==",
			"hasInstallScript": true,
			"dependencies": {
				"color": "^4.2.3",
				"detect-libc": "^2.0.3",
				"semver": "^7.6.3"
			},
			"engines": {
				"node": "^18.17.0 || ^20.3.0 || >=21.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/libvips"
			},
			"optionalDependencies": {
				"@img/sharp-darwin-arm64": "0.33.5",
				"@img/sharp-darwin-x64": "0.33.5",
				"@img/sharp-libvips-darwin-arm64": "1.0.4",
				"@img/sharp-libvips-darwin-x64": "1.0.4",
				"@img/sharp-libvips-linux-arm": "1.0.5",
				"@img/sharp-libvips-linux-arm64": "1.0.4",
				"@img/sharp-libvips-linux-s390x": "1.0.4",
				"@img/sharp-libvips-linux-x64": "1.0.4",
				"@img/sharp-libvips-linuxmusl-arm64": "1.0.4",
				"@img/sharp-libvips-linuxmusl-x64": "1.0.4",
				"@img/sharp-linux-arm": "0.33.5",
				"@img/sharp-linux-arm64": "0.33.5",
				"@img/sharp-linux-s390x": "0.33.5",
				"@img/sharp-linux-x64": "0.33.5",
				"@img/sharp-linuxmusl-arm64": "0.33.5",
				"@img/sharp-linuxmusl-x64": "0.33.5",
				"@img/sharp-wasm32": "0.33.5",
				"@img/sharp-win32-ia32": "0.33.5",
				"@img/sharp-win32-x64": "0.33.5"
			}
		},
		"node_modules/shebang-command": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
			"integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
			"dependencies": {
				"shebang-regex": "^3.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/shebang-regex": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
			"integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/side-channel": {
			"version": "1.0.6",
			"resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
			"integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
			"dependencies": {
				"call-bind": "^1.0.7",
				"es-errors": "^1.3.0",
				"get-intrinsic": "^1.2.4",
				"object-inspect": "^1.13.1"
			},
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/siginfo": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
			"integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
			"dev": true
		},
		"node_modules/signal-exit": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
			"integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/simple-swizzle": {
			"version": "0.2.2",
			"resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
			"integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
			"dependencies": {
				"is-arrayish": "^0.3.1"
			}
		},
		"node_modules/sirv": {
			"version": "2.0.4",
			"resolved": "https://registry.npmjs.org/sirv/-/sirv-2.0.4.tgz",
			"integrity": "sha512-94Bdh3cC2PKrbgSOUqTiGPWVZeSiXfKOVZNJniWoqrWrRkB1CJzBU3NEbiTsPcYy1lDsANA/THzS+9WBiy5nfQ==",
			"dev": true,
			"dependencies": {
				"@polka/url": "^1.0.0-next.24",
				"mrmime": "^2.0.0",
				"totalist": "^3.0.0"
			},
			"engines": {
				"node": ">= 10"
			}
		},
		"node_modules/slash": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
			"integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
			"dev": true,
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/slice-ansi": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
			"integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
			"dependencies": {
				"ansi-styles": "^6.0.0",
				"is-fullwidth-code-point": "^4.0.0"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/slice-ansi?sponsor=1"
			}
		},
		"node_modules/slice-ansi/node_modules/ansi-styles": {
			"version": "6.2.1",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
			"integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/smart-buffer": {
			"version": "4.2.0",
			"resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
			"integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
			"engines": {
				"node": ">= 6.0.0",
				"npm": ">= 3.0.0"
			}
		},
		"node_modules/snappyjs": {
			"version": "0.6.1",
			"resolved": "https://registry.npmjs.org/snappyjs/-/snappyjs-0.6.1.tgz",
			"integrity": "sha512-YIK6I2lsH072UE0aOFxxY1dPDCS43I5ktqHpeAsuLNYWkE5pGxRGWfDM4/vSUfNzXjC1Ivzt3qx31PCLmc9yqg=="
		},
		"node_modules/socks": {
			"version": "2.8.3",
			"resolved": "https://registry.npmjs.org/socks/-/socks-2.8.3.tgz",
			"integrity": "sha512-l5x7VUUWbjVFbafGLxPWkYsHIhEvmF85tbIeFZWc8ZPtoMyybuEhL7Jye/ooC4/d48FgOjSJXgsF/AJPYCW8Zw==",
			"dependencies": {
				"ip-address": "^9.0.5",
				"smart-buffer": "^4.2.0"
			},
			"engines": {
				"node": ">= 10.0.0",
				"npm": ">= 3.0.0"
			}
		},
		"node_modules/sonic-boom": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/sonic-boom/-/sonic-boom-4.1.0.tgz",
			"integrity": "sha512-NGipjjRicyJJ03rPiZCJYjwlsuP2d1/5QUviozRXC7S3WdVWNK5e3Ojieb9CCyfhq2UC+3+SRd9nG3I2lPRvUw==",
			"dependencies": {
				"atomic-sleep": "^1.0.0"
			}
		},
		"node_modules/sorcery": {
			"version": "0.11.1",
			"resolved": "https://registry.npmjs.org/sorcery/-/sorcery-0.11.1.tgz",
			"integrity": "sha512-o7npfeJE6wi6J9l0/5LKshFzZ2rMatRiCDwYeDQaOzqdzRJwALhX7mk/A/ecg6wjMu7wdZbmXfD2S/vpOg0bdQ==",
			"dev": true,
			"dependencies": {
				"@jridgewell/sourcemap-codec": "^1.4.14",
				"buffer-crc32": "^1.0.0",
				"minimist": "^1.2.0",
				"sander": "^0.5.0"
			},
			"bin": {
				"sorcery": "bin/sorcery"
			}
		},
		"node_modules/source-map": {
			"version": "0.6.1",
			"resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
			"integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/source-map-js": {
			"version": "1.2.1",
			"resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
			"integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/sparse-bitfield": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
			"integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
			"dependencies": {
				"memory-pager": "^1.0.2"
			}
		},
		"node_modules/split2": {
			"version": "4.2.0",
			"resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
			"integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
			"engines": {
				"node": ">= 10.x"
			}
		},
		"node_modules/sprintf-js": {
			"version": "1.1.3",
			"resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
			"integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA=="
		},
		"node_modules/stackback": {
			"version": "0.0.2",
			"resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
			"integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
			"dev": true
		},
		"node_modules/static-eval": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/static-eval/-/static-eval-2.0.2.tgz",
			"integrity": "sha512-N/D219Hcr2bPjLxPiV+TQE++Tsmrady7TqAJugLy7Xk1EumfDWS/f5dtBbkRCGE7wKKXuYockQoj8Rm2/pVKyg==",
			"dependencies": {
				"escodegen": "^1.8.1"
			}
		},
		"node_modules/statuses": {
			"version": "2.0.1",
			"resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
			"integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/std-env": {
			"version": "3.7.0",
			"resolved": "https://registry.npmjs.org/std-env/-/std-env-3.7.0.tgz",
			"integrity": "sha512-JPbdCEQLj1w5GilpiHAx3qJvFndqybBysA3qUOnznweH4QbNYUsW/ea8QzSrnh0vNsezMMw5bcVool8lM0gwzg==",
			"dev": true
		},
		"node_modules/strict-event-emitter": {
			"version": "0.5.1",
			"resolved": "https://registry.npmjs.org/strict-event-emitter/-/strict-event-emitter-0.5.1.tgz",
			"integrity": "sha512-vMgjE/GGEPEFnhFub6pa4FmJBRBVOLpIII2hvCZ8Kzb7K0hlHo7mQv6xYrBvCL2LtAIBwFUK8wvuJgTVSQ5MFQ=="
		},
		"node_modules/string_decoder": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
			"integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
			"dependencies": {
				"safe-buffer": "~5.2.0"
			}
		},
		"node_modules/string-argv": {
			"version": "0.3.2",
			"resolved": "https://registry.npmjs.org/string-argv/-/string-argv-0.3.2.tgz",
			"integrity": "sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==",
			"engines": {
				"node": ">=0.6.19"
			}
		},
		"node_modules/string-width": {
			"version": "5.1.2",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
			"integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
			"dependencies": {
				"eastasianwidth": "^0.2.0",
				"emoji-regex": "^9.2.2",
				"strip-ansi": "^7.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/string-width-cjs": {
			"name": "string-width",
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/string-width-cjs/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
		},
		"node_modules/string-width-cjs/node_modules/is-fullwidth-code-point": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/string-width/node_modules/ansi-regex": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
			"integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/string-width/node_modules/emoji-regex": {
			"version": "9.2.2",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
			"integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg=="
		},
		"node_modules/string-width/node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/string.prototype.codepointat": {
			"version": "0.2.1",
			"resolved": "https://registry.npmjs.org/string.prototype.codepointat/-/string.prototype.codepointat-0.2.1.tgz",
			"integrity": "sha512-2cBVCj6I4IOvEnjgO/hWqXjqBGsY+zwPmHl12Srk9IXSZ56Jwwmy+66XO5Iut/oQVR7t5ihYdLB0GMa4alEUcg=="
		},
		"node_modules/strip-ansi": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/strip-ansi-cjs": {
			"name": "strip-ansi",
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
			"dependencies": {
				"ansi-regex": "^5.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/strip-final-newline": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz",
			"integrity": "sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/strip-indent": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
			"integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
			"dev": true,
			"dependencies": {
				"min-indent": "^1.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/strip-json-comments": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
			"integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
			"engines": {
				"node": ">=8"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/strip-literal": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-1.3.0.tgz",
			"integrity": "sha512-PugKzOsyXpArk0yWmUwqOZecSO0GH0bPoctLcqNDH9J04pVW3lflYE0ujElBGTloevcxF5MofAOZ7C5l2b+wLg==",
			"dev": true,
			"dependencies": {
				"acorn": "^8.10.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			}
		},
		"node_modules/strnum": {
			"version": "1.0.5",
			"resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
			"integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA=="
		},
		"node_modules/strtok3": {
			"version": "8.1.0",
			"resolved": "https://registry.npmjs.org/strtok3/-/strtok3-8.1.0.tgz",
			"integrity": "sha512-ExzDvHYPj6F6QkSNe/JxSlBxTh3OrI6wrAIz53ulxo1c4hBJ1bT9C/JrAthEKHWG9riVH3Xzg7B03Oxty6S2Lw==",
			"dependencies": {
				"@tokenizer/token": "^0.3.0",
				"peek-readable": "^5.1.4"
			},
			"engines": {
				"node": ">=16"
			},
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/Borewit"
			}
		},
		"node_modules/sucrase": {
			"version": "3.35.0",
			"resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
			"integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
			"dependencies": {
				"@jridgewell/gen-mapping": "^0.3.2",
				"commander": "^4.0.0",
				"glob": "^10.3.10",
				"lines-and-columns": "^1.1.6",
				"mz": "^2.7.0",
				"pirates": "^4.0.1",
				"ts-interface-checker": "^0.1.9"
			},
			"bin": {
				"sucrase": "bin/sucrase",
				"sucrase-node": "bin/sucrase-node"
			},
			"engines": {
				"node": ">=16 || 14 >=14.17"
			}
		},
		"node_modules/sucrase/node_modules/commander": {
			"version": "4.1.1",
			"resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
			"integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/supports-color": {
			"version": "7.2.0",
			"resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
			"integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
			"dependencies": {
				"has-flag": "^4.0.0"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/supports-preserve-symlinks-flag": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
			"integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
			"engines": {
				"node": ">= 0.4"
			},
			"funding": {
				"url": "https://github.com/sponsors/ljharb"
			}
		},
		"node_modules/svelte": {
			"version": "4.2.19",
			"resolved": "https://registry.npmjs.org/svelte/-/svelte-4.2.19.tgz",
			"integrity": "sha512-IY1rnGr6izd10B0A8LqsBfmlT5OILVuZ7XsI0vdGPEvuonFV7NYEUK4dAkm9Zg2q0Um92kYjTpS1CAP3Nh/KWw==",
			"dev": true,
			"dependencies": {
				"@ampproject/remapping": "^2.2.1",
				"@jridgewell/sourcemap-codec": "^1.4.15",
				"@jridgewell/trace-mapping": "^0.3.18",
				"@types/estree": "^1.0.1",
				"acorn": "^8.9.0",
				"aria-query": "^5.3.0",
				"axobject-query": "^4.0.0",
				"code-red": "^1.0.3",
				"css-tree": "^2.3.1",
				"estree-walker": "^3.0.3",
				"is-reference": "^3.0.1",
				"locate-character": "^3.0.0",
				"magic-string": "^0.30.4",
				"periscopic": "^3.1.0"
			},
			"engines": {
				"node": ">=16"
			}
		},
		"node_modules/svelte-check": {
			"version": "3.8.6",
			"resolved": "https://registry.npmjs.org/svelte-check/-/svelte-check-3.8.6.tgz",
			"integrity": "sha512-ij0u4Lw/sOTREP13BdWZjiXD/BlHE6/e2e34XzmVmsp5IN4kVa3PWP65NM32JAgwjZlwBg/+JtiNV1MM8khu0Q==",
			"dev": true,
			"dependencies": {
				"@jridgewell/trace-mapping": "^0.3.17",
				"chokidar": "^3.4.1",
				"picocolors": "^1.0.0",
				"sade": "^1.7.4",
				"svelte-preprocess": "^5.1.3",
				"typescript": "^5.0.3"
			},
			"bin": {
				"svelte-check": "bin/svelte-check"
			},
			"peerDependencies": {
				"svelte": "^3.55.0 || ^4.0.0-next.0 || ^4.0.0 || ^5.0.0-next.0"
			}
		},
		"node_modules/svelte-eslint-parser": {
			"version": "0.41.0",
			"resolved": "https://registry.npmjs.org/svelte-eslint-parser/-/svelte-eslint-parser-0.41.0.tgz",
			"integrity": "sha512-L6f4hOL+AbgfBIB52Z310pg1d2QjRqm7wy3kI1W6hhdhX5bvu7+f0R6w4ykp5HoDdzq+vGhIJmsisaiJDGmVfA==",
			"dev": true,
			"dependencies": {
				"eslint-scope": "^7.2.2",
				"eslint-visitor-keys": "^3.4.3",
				"espree": "^9.6.1",
				"postcss": "^8.4.39",
				"postcss-scss": "^4.0.9"
			},
			"engines": {
				"node": "^12.22.0 || ^14.17.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/ota-meshi"
			},
			"peerDependencies": {
				"svelte": "^3.37.0 || ^4.0.0 || ^5.0.0-next.191"
			},
			"peerDependenciesMeta": {
				"svelte": {
					"optional": true
				}
			}
		},
		"node_modules/svelte-hmr": {
			"version": "0.16.0",
			"resolved": "https://registry.npmjs.org/svelte-hmr/-/svelte-hmr-0.16.0.tgz",
			"integrity": "sha512-Gyc7cOS3VJzLlfj7wKS0ZnzDVdv3Pn2IuVeJPk9m2skfhcu5bq3wtIZyQGggr7/Iim5rH5cncyQft/kRLupcnA==",
			"dev": true,
			"peer": true,
			"engines": {
				"node": "^12.20 || ^14.13.1 || >= 16"
			},
			"peerDependencies": {
				"svelte": "^3.19.0 || ^4.0.0"
			}
		},
		"node_modules/svelte-preprocess": {
			"version": "5.1.4",
			"resolved": "https://registry.npmjs.org/svelte-preprocess/-/svelte-preprocess-5.1.4.tgz",
			"integrity": "sha512-IvnbQ6D6Ao3Gg6ftiM5tdbR6aAETwjhHV+UKGf5bHGYR69RQvF1ho0JKPcbUON4vy4R7zom13jPjgdOWCQ5hDA==",
			"dev": true,
			"hasInstallScript": true,
			"dependencies": {
				"@types/pug": "^2.0.6",
				"detect-indent": "^6.1.0",
				"magic-string": "^0.30.5",
				"sorcery": "^0.11.0",
				"strip-indent": "^3.0.0"
			},
			"engines": {
				"node": ">= 16.0.0"
			},
			"peerDependencies": {
				"@babel/core": "^7.10.2",
				"coffeescript": "^2.5.1",
				"less": "^3.11.3 || ^4.0.0",
				"postcss": "^7 || ^8",
				"postcss-load-config": "^2.1.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
				"pug": "^3.0.0",
				"sass": "^1.26.8",
				"stylus": "^0.55.0",
				"sugarss": "^2.0.0 || ^3.0.0 || ^4.0.0",
				"svelte": "^3.23.0 || ^4.0.0-next.0 || ^4.0.0 || ^5.0.0-next.0",
				"typescript": ">=3.9.5 || ^4.0.0 || ^5.0.0"
			},
			"peerDependenciesMeta": {
				"@babel/core": {
					"optional": true
				},
				"coffeescript": {
					"optional": true
				},
				"less": {
					"optional": true
				},
				"postcss": {
					"optional": true
				},
				"postcss-load-config": {
					"optional": true
				},
				"pug": {
					"optional": true
				},
				"sass": {
					"optional": true
				},
				"stylus": {
					"optional": true
				},
				"sugarss": {
					"optional": true
				},
				"typescript": {
					"optional": true
				}
			}
		},
		"node_modules/svelte/node_modules/estree-walker": {
			"version": "3.0.3",
			"resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
			"integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
			"dev": true,
			"dependencies": {
				"@types/estree": "^1.0.0"
			}
		},
		"node_modules/svelte/node_modules/is-reference": {
			"version": "3.0.2",
			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-3.0.2.tgz",
			"integrity": "sha512-v3rht/LgVcsdZa3O2Nqs+NMowLOxeOm7Ay9+/ARQ2F+qEoANRcqrjAZKGN0v8ymUetZGgkp26LTnGT7H0Qo9Pg==",
			"dev": true,
			"dependencies": {
				"@types/estree": "*"
			}
		},
		"node_modules/symbol-tree": {
			"version": "3.2.4",
			"resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
			"integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw=="
		},
		"node_modules/tailwind-scrollbar": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/tailwind-scrollbar/-/tailwind-scrollbar-3.1.0.tgz",
			"integrity": "sha512-pmrtDIZeHyu2idTejfV59SbaJyvp1VRjYxAjZBH0jnyrPRo6HL1kD5Glz8VPagasqr6oAx6M05+Tuw429Z8jxg==",
			"engines": {
				"node": ">=12.13.0"
			},
			"peerDependencies": {
				"tailwindcss": "3.x"
			}
		},
		"node_modules/tailwindcss": {
			"version": "3.4.10",
			"resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.10.tgz",
			"integrity": "sha512-KWZkVPm7yJRhdu4SRSl9d4AK2wM3a50UsvgHZO7xY77NQr2V+fIrEuoDGQcbvswWvFGbS2f6e+jC/6WJm1Dl0w==",
			"dependencies": {
				"@alloc/quick-lru": "^5.2.0",
				"arg": "^5.0.2",
				"chokidar": "^3.5.3",
				"didyoumean": "^1.2.2",
				"dlv": "^1.1.3",
				"fast-glob": "^3.3.0",
				"glob-parent": "^6.0.2",
				"is-glob": "^4.0.3",
				"jiti": "^1.21.0",
				"lilconfig": "^2.1.0",
				"micromatch": "^4.0.5",
				"normalize-path": "^3.0.0",
				"object-hash": "^3.0.0",
				"picocolors": "^1.0.0",
				"postcss": "^8.4.23",
				"postcss-import": "^15.1.0",
				"postcss-js": "^4.0.1",
				"postcss-load-config": "^4.0.1",
				"postcss-nested": "^6.0.1",
				"postcss-selector-parser": "^6.0.11",
				"resolve": "^1.22.2",
				"sucrase": "^3.32.0"
			},
			"bin": {
				"tailwind": "lib/cli.js",
				"tailwindcss": "lib/cli.js"
			},
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/tailwindcss/node_modules/lilconfig": {
			"version": "2.1.0",
			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
			"integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/tailwindcss/node_modules/object-hash": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
			"integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
			"engines": {
				"node": ">= 6"
			}
		},
		"node_modules/tailwindcss/node_modules/postcss-load-config": {
			"version": "4.0.2",
			"resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
			"integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/postcss/"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"dependencies": {
				"lilconfig": "^3.0.0",
				"yaml": "^2.3.4"
			},
			"engines": {
				"node": ">= 14"
			},
			"peerDependencies": {
				"postcss": ">=8.0.9",
				"ts-node": ">=9.0.0"
			},
			"peerDependenciesMeta": {
				"postcss": {
					"optional": true
				},
				"ts-node": {
					"optional": true
				}
			}
		},
		"node_modules/tailwindcss/node_modules/postcss-load-config/node_modules/lilconfig": {
			"version": "3.1.2",
			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.2.tgz",
			"integrity": "sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==",
			"engines": {
				"node": ">=14"
			},
			"funding": {
				"url": "https://github.com/sponsors/antonk52"
			}
		},
		"node_modules/tailwindcss/node_modules/postcss-selector-parser": {
			"version": "6.1.2",
			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
			"dependencies": {
				"cssesc": "^3.0.0",
				"util-deprecate": "^1.0.2"
			},
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/tar": {
			"version": "7.4.3",
			"resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
			"integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
			"dependencies": {
				"@isaacs/fs-minipass": "^4.0.0",
				"chownr": "^3.0.0",
				"minipass": "^7.1.2",
				"minizlib": "^3.0.1",
				"mkdirp": "^3.0.1",
				"yallist": "^5.0.0"
			},
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/tar/node_modules/mkdirp": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
			"integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
			"bin": {
				"mkdirp": "dist/cjs/src/bin.js"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/isaacs"
			}
		},
		"node_modules/tar/node_modules/yallist": {
			"version": "5.0.0",
			"resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
			"integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
			"engines": {
				"node": ">=18"
			}
		},
		"node_modules/tdigest": {
			"version": "0.1.2",
			"resolved": "https://registry.npmjs.org/tdigest/-/tdigest-0.1.2.tgz",
			"integrity": "sha512-+G0LLgjjo9BZX2MfdvPfH+MKLCrxlXSYec5DaPYP1fe6Iyhf0/fSmJ0bFiZ1F8BT6cGXl2LpltQptzjXKWEkKA==",
			"dev": true,
			"dependencies": {
				"bintrees": "1.0.2"
			}
		},
		"node_modules/text-table": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
			"integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
			"dev": true
		},
		"node_modules/textlinestream": {
			"version": "1.1.1",
			"resolved": "https://registry.npmjs.org/textlinestream/-/textlinestream-1.1.1.tgz",
			"integrity": "sha512-iBHbi7BQxrFmwZUQJsT0SjNzlLLsXhvW/kg7EyOMVMBIrlnj/qYofwo1LVLZi+3GbUEo96Iu2eqToI2+lZoAEQ=="
		},
		"node_modules/thenify": {
			"version": "3.3.1",
			"resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
			"integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
			"dependencies": {
				"any-promise": "^1.0.0"
			}
		},
		"node_modules/thenify-all": {
			"version": "1.6.0",
			"resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
			"integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
			"dependencies": {
				"thenify": ">= 3.1.0 < 4"
			},
			"engines": {
				"node": ">=0.8"
			}
		},
		"node_modules/thread-stream": {
			"version": "3.1.0",
			"resolved": "https://registry.npmjs.org/thread-stream/-/thread-stream-3.1.0.tgz",
			"integrity": "sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A==",
			"dependencies": {
				"real-require": "^0.2.0"
			}
		},
		"node_modules/thrift": {
			"version": "0.11.0",
			"resolved": "https://registry.npmjs.org/thrift/-/thrift-0.11.0.tgz",
			"integrity": "sha512-UpsBhOC45a45TpeHOXE4wwYwL8uD2apbHTbtBvkwtUU4dNwCjC7DpQTjw2Q6eIdfNtw+dKthdwq94uLXTJPfFw==",
			"dependencies": {
				"node-int64": "^0.4.0",
				"q": "^1.5.0",
				"ws": ">= 2.2.3"
			},
			"engines": {
				"node": ">= 4.1.0"
			}
		},
		"node_modules/time-zone": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
			"integrity": "sha512-TIsDdtKo6+XrPtiTm1ssmMngN1sAhyKnTO2kunQWqNPWIVvCm15Wmw4SWInwTVgJ5u/Tr04+8Ei9TNcw4x4ONA==",
			"dev": true,
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/tiny-glob": {
			"version": "0.2.9",
			"resolved": "https://registry.npmjs.org/tiny-glob/-/tiny-glob-0.2.9.tgz",
			"integrity": "sha512-g/55ssRPUjShh+xkfx9UPDXqhckHEsHr4Vd9zX55oSdGZc/MD0m3sferOkwWtp98bv+kcVfEHtRJgBVJzelrzg==",
			"dev": true,
			"dependencies": {
				"globalyzer": "0.1.0",
				"globrex": "^0.1.2"
			}
		},
		"node_modules/tiny-inflate": {
			"version": "1.0.3",
			"resolved": "https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz",
			"integrity": "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw=="
		},
		"node_modules/tinybench": {
			"version": "2.9.0",
			"resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
			"integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
			"dev": true
		},
		"node_modules/tinyexec": {
			"version": "0.3.0",
			"resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.0.tgz",
			"integrity": "sha512-tVGE0mVJPGb0chKhqmsoosjsS+qUnJVGJpZgsHYQcGoPlG3B51R3PouqTgEGH2Dc9jjFyOqOpix6ZHNMXp1FZg==",
			"dev": true
		},
		"node_modules/tinypool": {
			"version": "0.5.0",
			"resolved": "https://registry.npmjs.org/tinypool/-/tinypool-0.5.0.tgz",
			"integrity": "sha512-paHQtnrlS1QZYKF/GnLoOM/DN9fqaGOFbCbxzAhwniySnzl9Ebk8w73/dd34DAhe/obUbPAOldTyYXQZxnPBPQ==",
			"dev": true,
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/tinyspy": {
			"version": "2.2.1",
			"resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-2.2.1.tgz",
			"integrity": "sha512-KYad6Vy5VDWV4GH3fjpseMQ/XU2BhIYP7Vzd0LG44qRWm/Yt2WCOTicFdvmgo6gWaqooMQCawTtILVQJupKu7A==",
			"dev": true,
			"engines": {
				"node": ">=14.0.0"
			}
		},
		"node_modules/tldts-core": {
			"version": "6.1.43",
			"resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-6.1.43.tgz",
			"integrity": "sha512-iO1G3F2NqtmJUYlTfcH2liSdaqDnjpYn6iGftbLRNx8DF6IRIjbknVt+q0ijwZ2KGZX3J8zeYGFoiI+ZtHT5MQ=="
		},
		"node_modules/tldts-experimental": {
			"version": "6.1.43",
			"resolved": "https://registry.npmjs.org/tldts-experimental/-/tldts-experimental-6.1.43.tgz",
			"integrity": "sha512-sziyPA9lOF4QQ1lB51HYVvPfoGmwWEuMrpJ9PleIRLWf1RU3O5JWqEDF07EiuuqilBOPfoeZvnJhOVYksTMtoA==",
			"dependencies": {
				"tldts-core": "^6.1.43"
			}
		},
		"node_modules/to-regex-range": {
			"version": "5.0.1",
			"resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
			"integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
			"dependencies": {
				"is-number": "^7.0.0"
			},
			"engines": {
				"node": ">=8.0"
			}
		},
		"node_modules/toidentifier": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
			"integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
			"engines": {
				"node": ">=0.6"
			}
		},
		"node_modules/token-types": {
			"version": "6.0.0",
			"resolved": "https://registry.npmjs.org/token-types/-/token-types-6.0.0.tgz",
			"integrity": "sha512-lbDrTLVsHhOMljPscd0yitpozq7Ga2M5Cvez5AjGg8GASBjtt6iERCAJ93yommPmz62fb45oFIXHEZ3u9bfJEA==",
			"dependencies": {
				"@tokenizer/token": "^0.3.0",
				"ieee754": "^1.2.1"
			},
			"engines": {
				"node": ">=14.16"
			},
			"funding": {
				"type": "github",
				"url": "https://github.com/sponsors/Borewit"
			}
		},
		"node_modules/totalist": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
			"integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/tough-cookie": {
			"version": "4.1.4",
			"resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
			"integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
			"dependencies": {
				"psl": "^1.1.33",
				"punycode": "^2.1.1",
				"universalify": "^0.2.0",
				"url-parse": "^1.5.3"
			},
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/tr46": {
			"version": "4.1.1",
			"resolved": "https://registry.npmjs.org/tr46/-/tr46-4.1.1.tgz",
			"integrity": "sha512-2lv/66T7e5yNyhAAC4NaKe5nVavzuGJQVVtRYLyQ2OI8tsJ61PMLlelehb0wi2Hx6+hT/OJUWZcw8MjlSRnxvw==",
			"dependencies": {
				"punycode": "^2.3.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/ts-api-utils": {
			"version": "1.3.0",
			"resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
			"integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
			"dev": true,
			"engines": {
				"node": ">=16"
			},
			"peerDependencies": {
				"typescript": ">=4.2.0"
			}
		},
		"node_modules/ts-interface-checker": {
			"version": "0.1.13",
			"resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
			"integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA=="
		},
		"node_modules/ts-node": {
			"version": "10.9.2",
			"resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
			"integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
			"devOptional": true,
			"dependencies": {
				"@cspotcode/source-map-support": "^0.8.0",
				"@tsconfig/node10": "^1.0.7",
				"@tsconfig/node12": "^1.0.7",
				"@tsconfig/node14": "^1.0.0",
				"@tsconfig/node16": "^1.0.2",
				"acorn": "^8.4.1",
				"acorn-walk": "^8.1.1",
				"arg": "^4.1.0",
				"create-require": "^1.1.0",
				"diff": "^4.0.1",
				"make-error": "^1.1.1",
				"v8-compile-cache-lib": "^3.0.1",
				"yn": "3.1.1"
			},
			"bin": {
				"ts-node": "dist/bin.js",
				"ts-node-cwd": "dist/bin-cwd.js",
				"ts-node-esm": "dist/bin-esm.js",
				"ts-node-script": "dist/bin-script.js",
				"ts-node-transpile-only": "dist/bin-transpile.js",
				"ts-script": "dist/bin-script-deprecated.js"
			},
			"peerDependencies": {
				"@swc/core": ">=1.2.50",
				"@swc/wasm": ">=1.2.50",
				"@types/node": "*",
				"typescript": ">=2.7"
			},
			"peerDependenciesMeta": {
				"@swc/core": {
					"optional": true
				},
				"@swc/wasm": {
					"optional": true
				}
			}
		},
		"node_modules/ts-node/node_modules/arg": {
			"version": "4.1.3",
			"resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
			"integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
			"devOptional": true
		},
		"node_modules/tslib": {
			"version": "2.7.0",
			"resolved": "https://registry.npmjs.org/tslib/-/tslib-2.7.0.tgz",
			"integrity": "sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA=="
		},
		"node_modules/type-check": {
			"version": "0.4.0",
			"resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
			"integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
			"dev": true,
			"dependencies": {
				"prelude-ls": "^1.2.1"
			},
			"engines": {
				"node": ">= 0.8.0"
			}
		},
		"node_modules/type-detect": {
			"version": "4.1.0",
			"resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.1.0.tgz",
			"integrity": "sha512-Acylog8/luQ8L7il+geoSxhEkazvkslg7PSNKOX59mbB9cOveP5aq9h74Y7YU8yDpJwetzQQrfIwtf4Wp4LKcw==",
			"dev": true,
			"engines": {
				"node": ">=4"
			}
		},
		"node_modules/type-fest": {
			"version": "0.20.2",
			"resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
			"integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
			"dev": true,
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/type-is": {
			"version": "1.6.18",
			"resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
			"integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
			"dependencies": {
				"media-typer": "0.3.0",
				"mime-types": "~2.1.24"
			},
			"engines": {
				"node": ">= 0.6"
			}
		},
		"node_modules/typescript": {
			"version": "5.5.4",
			"resolved": "https://registry.npmjs.org/typescript/-/typescript-5.5.4.tgz",
			"integrity": "sha512-Mtq29sKDAEYP7aljRgtPOpTvOfbwRWlS6dPRzwjdE+C0R4brX/GUyhHSecbHMFLNBLcJIPt9nl9yG5TZ1weH+Q==",
			"bin": {
				"tsc": "bin/tsc",
				"tsserver": "bin/tsserver"
			},
			"engines": {
				"node": ">=14.17"
			}
		},
		"node_modules/ufo": {
			"version": "1.5.4",
			"resolved": "https://registry.npmjs.org/ufo/-/ufo-1.5.4.tgz",
			"integrity": "sha512-UsUk3byDzKd04EyoZ7U4DOlxQaD14JUKQl6/P7wiX4FNvUfm3XL246n9W5AmqwW5RSFJ27NAuM0iLscAOYUiGQ==",
			"dev": true
		},
		"node_modules/uglify-js": {
			"version": "3.19.3",
			"resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.19.3.tgz",
			"integrity": "sha512-v3Xu+yuwBXisp6QYTcH4UbH+xYJXqnq2m/LtQVWKWzYc1iehYnLixoQDN9FH6/j9/oybfd6W9Ghwkl8+UMKTKQ==",
			"optional": true,
			"bin": {
				"uglifyjs": "bin/uglifyjs"
			},
			"engines": {
				"node": ">=0.8.0"
			}
		},
		"node_modules/uint8array-extras": {
			"version": "1.4.0",
			"resolved": "https://registry.npmjs.org/uint8array-extras/-/uint8array-extras-1.4.0.tgz",
			"integrity": "sha512-ZPtzy0hu4cZjv3z5NW9gfKnNLjoz4y6uv4HlelAjDK7sY/xOkKZv9xK/WQpcsBB3jEybChz9DPC2U/+cusjJVQ==",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/ultrahtml": {
			"version": "1.5.3",
			"resolved": "https://registry.npmjs.org/ultrahtml/-/ultrahtml-1.5.3.tgz",
			"integrity": "sha512-GykOvZwgDWZlTQMtp5jrD4BVL+gNn2NVlVafjcFUJ7taY20tqYdwdoWBFy6GBJsNTZe1GkGPkSl5knQAjtgceg=="
		},
		"node_modules/underscore": {
			"version": "1.12.1",
			"resolved": "https://registry.npmjs.org/underscore/-/underscore-1.12.1.tgz",
			"integrity": "sha512-hEQt0+ZLDVUMhebKxL4x1BTtDY7bavVofhZ9KZ4aI26X9SRaE+Y3m83XUL1UP2jn8ynjndwCCpEHdUG+9pP1Tw=="
		},
		"node_modules/undici": {
			"version": "5.28.4",
			"resolved": "https://registry.npmjs.org/undici/-/undici-5.28.4.tgz",
			"integrity": "sha512-72RFADWFqKmUb2hmmvNODKL3p9hcB6Gt2DOQMis1SEBaV6a4MH8soBvzg+95CYhCKPFedut2JY9bMfrDl9D23g==",
			"dependencies": {
				"@fastify/busboy": "^2.0.0"
			},
			"engines": {
				"node": ">=14.0"
			}
		},
		"node_modules/undici-types": {
			"version": "6.19.8",
			"resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
			"integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw=="
		},
		"node_modules/unicode-trie": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
			"integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
			"dependencies": {
				"pako": "^0.2.5",
				"tiny-inflate": "^1.0.0"
			}
		},
		"node_modules/universalify": {
			"version": "0.2.0",
			"resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
			"integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
			"engines": {
				"node": ">= 4.0.0"
			}
		},
		"node_modules/unpipe": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
			"integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/unplugin": {
			"version": "1.13.1",
			"resolved": "https://registry.npmjs.org/unplugin/-/unplugin-1.13.1.tgz",
			"integrity": "sha512-6Kq1iSSwg7KyjcThRUks9LuqDAKvtnioxbL9iEtB9ctTyBA5OmrB8gZd/d225VJu1w3UpUsKV7eGrvf59J7+VA==",
			"dev": true,
			"dependencies": {
				"acorn": "^8.12.1",
				"webpack-virtual-modules": "^0.6.2"
			},
			"engines": {
				"node": ">=14.0.0"
			},
			"peerDependencies": {
				"webpack-sources": "^3"
			},
			"peerDependenciesMeta": {
				"webpack-sources": {
					"optional": true
				}
			}
		},
		"node_modules/unplugin-icons": {
			"version": "0.16.6",
			"resolved": "https://registry.npmjs.org/unplugin-icons/-/unplugin-icons-0.16.6.tgz",
			"integrity": "sha512-jL70sAC7twp4hI/MTfm+vyvTRtHqiEIzf3XOjJz7yzhMEEQnk5Ey5YIXRAU03Mc4BF99ITvvnBzfyRZee86OeA==",
			"dev": true,
			"dependencies": {
				"@antfu/install-pkg": "^0.1.1",
				"@antfu/utils": "^0.7.6",
				"@iconify/utils": "^2.1.9",
				"debug": "^4.3.4",
				"kolorist": "^1.8.0",
				"local-pkg": "^0.4.3",
				"unplugin": "^1.4.0"
			},
			"funding": {
				"url": "https://github.com/sponsors/antfu"
			},
			"peerDependencies": {
				"@svgr/core": ">=7.0.0",
				"@svgx/core": "^1.0.1",
				"@vue/compiler-sfc": "^3.0.2 || ^2.7.0",
				"vue-template-compiler": "^2.6.12",
				"vue-template-es2015-compiler": "^1.9.0"
			},
			"peerDependenciesMeta": {
				"@svgr/core": {
					"optional": true
				},
				"@svgx/core": {
					"optional": true
				},
				"@vue/compiler-sfc": {
					"optional": true
				},
				"vue-template-compiler": {
					"optional": true
				},
				"vue-template-es2015-compiler": {
					"optional": true
				}
			}
		},
		"node_modules/update-browserslist-db": {
			"version": "1.1.0",
			"resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.0.tgz",
			"integrity": "sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==",
			"funding": [
				{
					"type": "opencollective",
					"url": "https://opencollective.com/browserslist"
				},
				{
					"type": "tidelift",
					"url": "https://tidelift.com/funding/github/npm/browserslist"
				},
				{
					"type": "github",
					"url": "https://github.com/sponsors/ai"
				}
			],
			"dependencies": {
				"escalade": "^3.1.2",
				"picocolors": "^1.0.1"
			},
			"bin": {
				"update-browserslist-db": "cli.js"
			},
			"peerDependencies": {
				"browserslist": ">= 4.21.0"
			}
		},
		"node_modules/uri-js": {
			"version": "4.4.1",
			"resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
			"integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
			"dev": true,
			"dependencies": {
				"punycode": "^2.1.0"
			}
		},
		"node_modules/url-join": {
			"version": "4.0.1",
			"resolved": "https://registry.npmjs.org/url-join/-/url-join-4.0.1.tgz",
			"integrity": "sha512-jk1+QP6ZJqyOiuEI9AEWQfju/nB2Pw466kbA0LEZljHwKeMgd9WrAEgEGxjPDD2+TNbbb37rTyhEfrCXfuKXnA==",
			"optional": true
		},
		"node_modules/url-parse": {
			"version": "1.5.10",
			"resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
			"integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
			"dependencies": {
				"querystringify": "^2.1.1",
				"requires-port": "^1.0.0"
			}
		},
		"node_modules/util-deprecate": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
			"integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
		},
		"node_modules/utils-merge": {
			"version": "1.0.1",
			"resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
			"integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
			"engines": {
				"node": ">= 0.4.0"
			}
		},
		"node_modules/uuid": {
			"version": "10.0.0",
			"resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
			"integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
			"funding": [
				"https://github.com/sponsors/broofa",
				"https://github.com/sponsors/ctavan"
			],
			"bin": {
				"uuid": "dist/bin/uuid"
			}
		},
		"node_modules/v8-compile-cache-lib": {
			"version": "3.0.1",
			"resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
			"integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
			"devOptional": true
		},
		"node_modules/varint": {
			"version": "5.0.2",
			"resolved": "https://registry.npmjs.org/varint/-/varint-5.0.2.tgz",
			"integrity": "sha512-lKxKYG6H03yCZUpAGOPOsMcGxd1RHCu1iKvEHYDPmTyq2HueGhD73ssNBqqQWfvYs04G9iUFRvmAVLW20Jw6ow=="
		},
		"node_modules/vary": {
			"version": "1.1.2",
			"resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
			"integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
			"engines": {
				"node": ">= 0.8"
			}
		},
		"node_modules/vite": {
			"version": "5.4.3",
			"resolved": "https://registry.npmjs.org/vite/-/vite-5.4.3.tgz",
			"integrity": "sha512-IH+nl64eq9lJjFqU+/yrRnrHPVTlgy42/+IzbOdaFDVlyLgI/wDlf+FCobXLX1cT0X5+7LMyH1mIy2xJdLfo8Q==",
			"dev": true,
			"dependencies": {
				"esbuild": "^0.21.3",
				"postcss": "^8.4.43",
				"rollup": "^4.20.0"
			},
			"bin": {
				"vite": "bin/vite.js"
			},
			"engines": {
				"node": "^18.0.0 || >=20.0.0"
			},
			"funding": {
				"url": "https://github.com/vitejs/vite?sponsor=1"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.3"
			},
			"peerDependencies": {
				"@types/node": "^18.0.0 || >=20.0.0",
				"less": "*",
				"lightningcss": "^1.21.0",
				"sass": "*",
				"sass-embedded": "*",
				"stylus": "*",
				"sugarss": "*",
				"terser": "^5.4.0"
			},
			"peerDependenciesMeta": {
				"@types/node": {
					"optional": true
				},
				"less": {
					"optional": true
				},
				"lightningcss": {
					"optional": true
				},
				"sass": {
					"optional": true
				},
				"sass-embedded": {
					"optional": true
				},
				"stylus": {
					"optional": true
				},
				"sugarss": {
					"optional": true
				},
				"terser": {
					"optional": true
				}
			}
		},
		"node_modules/vite-node": {
			"version": "1.6.0",
			"resolved": "https://registry.npmjs.org/vite-node/-/vite-node-1.6.0.tgz",
			"integrity": "sha512-de6HJgzC+TFzOu0NTC4RAIsyf/DY/ibWDYQUcuEA84EMHhcefTUGkjFHKKEJhQN4A+6I0u++kr3l36ZF2d7XRw==",
			"dev": true,
			"dependencies": {
				"cac": "^6.7.14",
				"debug": "^4.3.4",
				"pathe": "^1.1.1",
				"picocolors": "^1.0.0",
				"vite": "^5.0.0"
			},
			"bin": {
				"vite-node": "vite-node.mjs"
			},
			"engines": {
				"node": "^18.0.0 || >=20.0.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/vite/node_modules/fsevents": {
			"version": "2.3.3",
			"resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
			"integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
			"dev": true,
			"hasInstallScript": true,
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": "^8.16.0 || ^10.6.0 || >=11.0.0"
			}
		},
		"node_modules/vitefu": {
			"version": "0.2.5",
			"resolved": "https://registry.npmjs.org/vitefu/-/vitefu-0.2.5.tgz",
			"integrity": "sha512-SgHtMLoqaeeGnd2evZ849ZbACbnwQCIwRH57t18FxcXoZop0uQu0uzlIhJBlF/eWVzuce0sHeqPcDo+evVcg8Q==",
			"dev": true,
			"peer": true,
			"peerDependencies": {
				"vite": "^3.0.0 || ^4.0.0 || ^5.0.0"
			},
			"peerDependenciesMeta": {
				"vite": {
					"optional": true
				}
			}
		},
		"node_modules/vitest": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/vitest/-/vitest-0.31.4.tgz",
			"integrity": "sha512-GoV0VQPmWrUFOZSg3RpQAPN+LPmHg2/gxlMNJlyxJihkz6qReHDV6b0pPDcqFLNEPya4tWJ1pgwUNP9MLmUfvQ==",
			"dev": true,
			"dependencies": {
				"@types/chai": "^4.3.5",
				"@types/chai-subset": "^1.3.3",
				"@types/node": "*",
				"@vitest/expect": "0.31.4",
				"@vitest/runner": "0.31.4",
				"@vitest/snapshot": "0.31.4",
				"@vitest/spy": "0.31.4",
				"@vitest/utils": "0.31.4",
				"acorn": "^8.8.2",
				"acorn-walk": "^8.2.0",
				"cac": "^6.7.14",
				"chai": "^4.3.7",
				"concordance": "^5.0.4",
				"debug": "^4.3.4",
				"local-pkg": "^0.4.3",
				"magic-string": "^0.30.0",
				"pathe": "^1.1.0",
				"picocolors": "^1.0.0",
				"std-env": "^3.3.2",
				"strip-literal": "^1.0.1",
				"tinybench": "^2.5.0",
				"tinypool": "^0.5.0",
				"vite": "^3.0.0 || ^4.0.0",
				"vite-node": "0.31.4",
				"why-is-node-running": "^2.2.2"
			},
			"bin": {
				"vitest": "vitest.mjs"
			},
			"engines": {
				"node": ">=v14.18.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			},
			"peerDependencies": {
				"@edge-runtime/vm": "*",
				"@vitest/browser": "*",
				"@vitest/ui": "*",
				"happy-dom": "*",
				"jsdom": "*",
				"playwright": "*",
				"safaridriver": "*",
				"webdriverio": "*"
			},
			"peerDependenciesMeta": {
				"@edge-runtime/vm": {
					"optional": true
				},
				"@vitest/browser": {
					"optional": true
				},
				"@vitest/ui": {
					"optional": true
				},
				"happy-dom": {
					"optional": true
				},
				"jsdom": {
					"optional": true
				},
				"playwright": {
					"optional": true
				},
				"safaridriver": {
					"optional": true
				},
				"webdriverio": {
					"optional": true
				}
			}
		},
		"node_modules/vitest/node_modules/@esbuild/android-arm": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.18.20.tgz",
			"integrity": "sha512-fyi7TDI/ijKKNZTUJAQqiG5T7YjJXgnzkURqmGj13C6dCqckZBLdl4h7bkhHt/t0WP+zO9/zwroDvANaOqO5Sw==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/android-arm64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.18.20.tgz",
			"integrity": "sha512-Nz4rJcchGDtENV0eMKUNa6L12zz2zBDXuhj/Vjh18zGqB44Bi7MBMSXjgunJgjRhCmKOjnPuZp4Mb6OKqtMHLQ==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/android-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.18.20.tgz",
			"integrity": "sha512-8GDdlePJA8D6zlZYJV/jnrRAi6rOiNaCC/JclcXpB+KIuvfBN4owLtgzY2bsxnx666XjJx2kDPUmnTtR8qKQUg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"android"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/darwin-arm64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.18.20.tgz",
			"integrity": "sha512-bxRHW5kHU38zS2lPTPOyuyTm+S+eobPUnTNkdJEfAddYgEcll4xkT8DB9d2008DtTbl7uJag2HuE5NZAZgnNEA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/darwin-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.18.20.tgz",
			"integrity": "sha512-pc5gxlMDxzm513qPGbCbDukOdsGtKhfxD1zJKXjCCcU7ju50O7MeAZ8c4krSJcOIJGFR+qx21yMMVYwiQvyTyQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"darwin"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/freebsd-arm64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.18.20.tgz",
			"integrity": "sha512-yqDQHy4QHevpMAaxhhIwYPMv1NECwOvIpGCZkECn8w2WFHXjEwrBn3CeNIYsibZ/iZEUemj++M26W3cNR5h+Tw==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/freebsd-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.18.20.tgz",
			"integrity": "sha512-tgWRPPuQsd3RmBZwarGVHZQvtzfEBOreNuxEMKFcd5DaDn2PbBxfwLcj4+aenoh7ctXcbXmOQIn8HI6mCSw5MQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"freebsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-arm": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.18.20.tgz",
			"integrity": "sha512-/5bHkMWnq1EgKr1V+Ybz3s1hWXok7mDFUMQ4cG10AfW3wL02PSZi5kFpYKrptDsgb2WAJIvRcDm+qIvXf/apvg==",
			"cpu": [
				"arm"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-arm64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.18.20.tgz",
			"integrity": "sha512-2YbscF+UL7SQAVIpnWvYwM+3LskyDmPhe31pE7/aoTMFKKzIc9lLbyGUpmmb8a8AixOL61sQ/mFh3jEjHYFvdA==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-ia32": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.18.20.tgz",
			"integrity": "sha512-P4etWwq6IsReT0E1KHU40bOnzMHoH73aXp96Fs8TIT6z9Hu8G6+0SHSw9i2isWrD2nbx2qo5yUqACgdfVGx7TA==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-loong64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.18.20.tgz",
			"integrity": "sha512-nXW8nqBTrOpDLPgPY9uV+/1DjxoQ7DoB2N8eocyq8I9XuqJ7BiAMDMf9n1xZM9TgW0J8zrquIb/A7s3BJv7rjg==",
			"cpu": [
				"loong64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-mips64el": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.18.20.tgz",
			"integrity": "sha512-d5NeaXZcHp8PzYy5VnXV3VSd2D328Zb+9dEq5HE6bw6+N86JVPExrA6O68OPwobntbNJ0pzCpUFZTo3w0GyetQ==",
			"cpu": [
				"mips64el"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-ppc64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.18.20.tgz",
			"integrity": "sha512-WHPyeScRNcmANnLQkq6AfyXRFr5D6N2sKgkFo2FqguP44Nw2eyDlbTdZwd9GYk98DZG9QItIiTlFLHJHjxP3FA==",
			"cpu": [
				"ppc64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-riscv64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.18.20.tgz",
			"integrity": "sha512-WSxo6h5ecI5XH34KC7w5veNnKkju3zBRLEQNY7mv5mtBmrP/MjNBCAlsM2u5hDBlS3NGcTQpoBvRzqBcRtpq1A==",
			"cpu": [
				"riscv64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-s390x": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.18.20.tgz",
			"integrity": "sha512-+8231GMs3mAEth6Ja1iK0a1sQ3ohfcpzpRLH8uuc5/KVDFneH6jtAJLFGafpzpMRO6DzJ6AvXKze9LfFMrIHVQ==",
			"cpu": [
				"s390x"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/linux-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.18.20.tgz",
			"integrity": "sha512-UYqiqemphJcNsFEskc73jQ7B9jgwjWrSayxawS6UVFZGWrAAtkzjxSqnoclCXxWtfwLdzU+vTpcNYhpn43uP1w==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"linux"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/netbsd-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.18.20.tgz",
			"integrity": "sha512-iO1c++VP6xUBUmltHZoMtCUdPlnPGdBom6IrO4gyKPFFVBKioIImVooR5I83nTew5UOYrk3gIJhbZh8X44y06A==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"netbsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/openbsd-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.18.20.tgz",
			"integrity": "sha512-e5e4YSsuQfX4cxcygw/UCPIEP6wbIL+se3sxPdCiMbFLBWu0eiZOJ7WoD+ptCLrmjZBK1Wk7I6D/I3NglUGOxg==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"openbsd"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/sunos-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.18.20.tgz",
			"integrity": "sha512-kDbFRFp0YpTQVVrqUd5FTYmWo45zGaXe0X8E1G/LKFC0v8x0vWrhOWSLITcCn63lmZIxfOMXtCfti/RxN/0wnQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"sunos"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/win32-arm64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.18.20.tgz",
			"integrity": "sha512-ddYFR6ItYgoaq4v4JmQQaAI5s7npztfV4Ag6NrhiaW0RrnOXqBkgwZLofVTlq1daVTQNhtI5oieTvkRPfZrePg==",
			"cpu": [
				"arm64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/win32-ia32": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.18.20.tgz",
			"integrity": "sha512-Wv7QBi3ID/rROT08SABTS7eV4hX26sVduqDOTe1MvGMjNd3EjOz4b7zeexIR62GTIEKrfJXKL9LFxTYgkyeu7g==",
			"cpu": [
				"ia32"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/@esbuild/win32-x64": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.18.20.tgz",
			"integrity": "sha512-kTdfRcSiDfQca/y9QIkng02avJ+NCaQvrMejlsB3RRv5sE9rRoeBPISaZpKxHELzRxZyLvNts1P27W3wV+8geQ==",
			"cpu": [
				"x64"
			],
			"dev": true,
			"optional": true,
			"os": [
				"win32"
			],
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/vitest/node_modules/esbuild": {
			"version": "0.18.20",
			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.18.20.tgz",
			"integrity": "sha512-ceqxoedUrcayh7Y7ZX6NdbbDzGROiyVBgC4PriJThBKSVPWnnFHZAkfI1lJT8QFkOwH4qOS2SJkS4wvpGl8BpA==",
			"dev": true,
			"hasInstallScript": true,
			"bin": {
				"esbuild": "bin/esbuild"
			},
			"engines": {
				"node": ">=12"
			},
			"optionalDependencies": {
				"@esbuild/android-arm": "0.18.20",
				"@esbuild/android-arm64": "0.18.20",
				"@esbuild/android-x64": "0.18.20",
				"@esbuild/darwin-arm64": "0.18.20",
				"@esbuild/darwin-x64": "0.18.20",
				"@esbuild/freebsd-arm64": "0.18.20",
				"@esbuild/freebsd-x64": "0.18.20",
				"@esbuild/linux-arm": "0.18.20",
				"@esbuild/linux-arm64": "0.18.20",
				"@esbuild/linux-ia32": "0.18.20",
				"@esbuild/linux-loong64": "0.18.20",
				"@esbuild/linux-mips64el": "0.18.20",
				"@esbuild/linux-ppc64": "0.18.20",
				"@esbuild/linux-riscv64": "0.18.20",
				"@esbuild/linux-s390x": "0.18.20",
				"@esbuild/linux-x64": "0.18.20",
				"@esbuild/netbsd-x64": "0.18.20",
				"@esbuild/openbsd-x64": "0.18.20",
				"@esbuild/sunos-x64": "0.18.20",
				"@esbuild/win32-arm64": "0.18.20",
				"@esbuild/win32-ia32": "0.18.20",
				"@esbuild/win32-x64": "0.18.20"
			}
		},
		"node_modules/vitest/node_modules/rollup": {
			"version": "3.29.4",
			"resolved": "https://registry.npmjs.org/rollup/-/rollup-3.29.4.tgz",
			"integrity": "sha512-oWzmBZwvYrU0iJHtDmhsm662rC15FRXmcjCk1xD771dFDx5jJ02ufAQQTn0etB2emNk4J9EZg/yWKpsn9BWGRw==",
			"dev": true,
			"bin": {
				"rollup": "dist/bin/rollup"
			},
			"engines": {
				"node": ">=14.18.0",
				"npm": ">=8.0.0"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.2"
			}
		},
		"node_modules/vitest/node_modules/vite": {
			"version": "4.5.3",
			"resolved": "https://registry.npmjs.org/vite/-/vite-4.5.3.tgz",
			"integrity": "sha512-kQL23kMeX92v3ph7IauVkXkikdDRsYMGTVl5KY2E9OY4ONLvkHf04MDTbnfo6NKxZiDLWzVpP5oTa8hQD8U3dg==",
			"dev": true,
			"dependencies": {
				"esbuild": "^0.18.10",
				"postcss": "^8.4.27",
				"rollup": "^3.27.1"
			},
			"bin": {
				"vite": "bin/vite.js"
			},
			"engines": {
				"node": "^14.18.0 || >=16.0.0"
			},
			"funding": {
				"url": "https://github.com/vitejs/vite?sponsor=1"
			},
			"optionalDependencies": {
				"fsevents": "~2.3.2"
			},
			"peerDependencies": {
				"@types/node": ">= 14",
				"less": "*",
				"lightningcss": "^1.21.0",
				"sass": "*",
				"stylus": "*",
				"sugarss": "*",
				"terser": "^5.4.0"
			},
			"peerDependenciesMeta": {
				"@types/node": {
					"optional": true
				},
				"less": {
					"optional": true
				},
				"lightningcss": {
					"optional": true
				},
				"sass": {
					"optional": true
				},
				"stylus": {
					"optional": true
				},
				"sugarss": {
					"optional": true
				},
				"terser": {
					"optional": true
				}
			}
		},
		"node_modules/vitest/node_modules/vite-node": {
			"version": "0.31.4",
			"resolved": "https://registry.npmjs.org/vite-node/-/vite-node-0.31.4.tgz",
			"integrity": "sha512-uzL377GjJtTbuc5KQxVbDu2xfU/x0wVjUtXQR2ihS21q/NK6ROr4oG0rsSkBBddZUVCwzfx22in76/0ZZHXgkQ==",
			"dev": true,
			"dependencies": {
				"cac": "^6.7.14",
				"debug": "^4.3.4",
				"mlly": "^1.2.0",
				"pathe": "^1.1.0",
				"picocolors": "^1.0.0",
				"vite": "^3.0.0 || ^4.0.0"
			},
			"bin": {
				"vite-node": "vite-node.mjs"
			},
			"engines": {
				"node": ">=v14.18.0"
			},
			"funding": {
				"url": "https://opencollective.com/vitest"
			}
		},
		"node_modules/w3c-xmlserializer": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-4.0.0.tgz",
			"integrity": "sha512-d+BFHzbiCx6zGfz0HyQ6Rg69w9k19nviJspaj4yNscGjrHu94sVP+aRm75yEbCh+r2/yR+7q6hux9LVtbuTGBw==",
			"dependencies": {
				"xml-name-validator": "^4.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/web-streams-polyfill": {
			"version": "4.0.0-beta.3",
			"resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
			"integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
			"optional": true,
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/webidl-conversions": {
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
			"integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/webpack-virtual-modules": {
			"version": "0.6.2",
			"resolved": "https://registry.npmjs.org/webpack-virtual-modules/-/webpack-virtual-modules-0.6.2.tgz",
			"integrity": "sha512-66/V2i5hQanC51vBQKPH4aI8NMAcBW59FVBs+rC7eGHupMyfn34q7rZIE+ETlJ+XTevqfUhVVBgSUNSW2flEUQ==",
			"dev": true
		},
		"node_modules/well-known-symbols": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
			"integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q==",
			"dev": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/whatwg-encoding": {
			"version": "2.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-2.0.0.tgz",
			"integrity": "sha512-p41ogyeMUrw3jWclHWTQg1k05DSVXPLcVxRTYsXUk+ZooOCZLcoYgPZ/HL/D/N+uQPOtcp1me1WhBEaX02mhWg==",
			"dependencies": {
				"iconv-lite": "0.6.3"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/whatwg-encoding/node_modules/iconv-lite": {
			"version": "0.6.3",
			"resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
			"integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
			"dependencies": {
				"safer-buffer": ">= 2.1.2 < 3.0.0"
			},
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/whatwg-mimetype": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-3.0.0.tgz",
			"integrity": "sha512-nt+N2dzIutVRxARx1nghPKGv1xHikU7HKdfafKkLNLindmPU/ch3U31NOCGGA/dmPcmb1VlofO0vnKAcsm0o/Q==",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/whatwg-url": {
			"version": "12.0.1",
			"resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-12.0.1.tgz",
			"integrity": "sha512-Ed/LrqB8EPlGxjS+TrsXcpUond1mhccS3pchLhzSgPCnTimUCKj3IZE75pAs5m6heB2U2TMerKFUXheyHY+VDQ==",
			"dependencies": {
				"tr46": "^4.1.1",
				"webidl-conversions": "^7.0.0"
			},
			"engines": {
				"node": ">=14"
			}
		},
		"node_modules/which": {
			"version": "2.0.2",
			"resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
			"integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
			"dependencies": {
				"isexe": "^2.0.0"
			},
			"bin": {
				"node-which": "bin/node-which"
			},
			"engines": {
				"node": ">= 8"
			}
		},
		"node_modules/why-is-node-running": {
			"version": "2.3.0",
			"resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
			"integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
			"dev": true,
			"dependencies": {
				"siginfo": "^2.0.0",
				"stackback": "0.0.2"
			},
			"bin": {
				"why-is-node-running": "cli.js"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/word-wrap": {
			"version": "1.2.5",
			"resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
			"integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
			"engines": {
				"node": ">=0.10.0"
			}
		},
		"node_modules/wordwrap": {
			"version": "1.0.0",
			"resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
			"integrity": "sha512-gvVzJFlPycKc5dZN4yPkP8w7Dc37BtP1yczEneOb4uq34pXZcvrtRTmWV8W+Ume+XCxKgbjM+nevkyFPMybd4Q=="
		},
		"node_modules/wrap-ansi": {
			"version": "8.1.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
			"integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
			"dependencies": {
				"ansi-styles": "^6.1.0",
				"string-width": "^5.0.1",
				"strip-ansi": "^7.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/wrap-ansi-cjs": {
			"name": "wrap-ansi",
			"version": "7.0.0",
			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
			"integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
			"dependencies": {
				"ansi-styles": "^4.0.0",
				"string-width": "^4.1.0",
				"strip-ansi": "^6.0.0"
			},
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
			}
		},
		"node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
		},
		"node_modules/wrap-ansi-cjs/node_modules/is-fullwidth-code-point": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/wrap-ansi-cjs/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/wrap-ansi/node_modules/ansi-regex": {
			"version": "6.0.1",
			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
			"integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
			}
		},
		"node_modules/wrap-ansi/node_modules/ansi-styles": {
			"version": "6.2.1",
			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
			"integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
			}
		},
		"node_modules/wrap-ansi/node_modules/strip-ansi": {
			"version": "7.1.0",
			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
			"dependencies": {
				"ansi-regex": "^6.0.1"
			},
			"engines": {
				"node": ">=12"
			},
			"funding": {
				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
			}
		},
		"node_modules/wrappy": {
			"version": "1.0.2",
			"resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
			"integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ=="
		},
		"node_modules/ws": {
			"version": "8.18.0",
			"resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
			"integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
			"engines": {
				"node": ">=10.0.0"
			},
			"peerDependencies": {
				"bufferutil": "^4.0.1",
				"utf-8-validate": ">=5.0.2"
			},
			"peerDependenciesMeta": {
				"bufferutil": {
					"optional": true
				},
				"utf-8-validate": {
					"optional": true
				}
			}
		},
		"node_modules/xml-name-validator": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-4.0.0.tgz",
			"integrity": "sha512-ICP2e+jsHvAj2E2lIHxa5tjXRlKDJo4IdvPvCXbXQGdzSfmSpNVyIKMvoZHjDY9DP0zV17iI85o90vRFXNccRw==",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/xmlchars": {
			"version": "2.2.0",
			"resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
			"integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw=="
		},
		"node_modules/y18n": {
			"version": "5.0.8",
			"resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
			"integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
			"engines": {
				"node": ">=10"
			}
		},
		"node_modules/yallist": {
			"version": "4.0.0",
			"resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
			"integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
		},
		"node_modules/yaml": {
			"version": "2.5.1",
			"resolved": "https://registry.npmjs.org/yaml/-/yaml-2.5.1.tgz",
			"integrity": "sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==",
			"bin": {
				"yaml": "bin.mjs"
			},
			"engines": {
				"node": ">= 14"
			}
		},
		"node_modules/yargs": {
			"version": "17.7.2",
			"resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
			"integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
			"dependencies": {
				"cliui": "^8.0.1",
				"escalade": "^3.1.1",
				"get-caller-file": "^2.0.5",
				"require-directory": "^2.1.1",
				"string-width": "^4.2.3",
				"y18n": "^5.0.5",
				"yargs-parser": "^21.1.1"
			},
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/yargs-parser": {
			"version": "21.1.1",
			"resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
			"integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
			"engines": {
				"node": ">=12"
			}
		},
		"node_modules/yargs/node_modules/emoji-regex": {
			"version": "8.0.0",
			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
		},
		"node_modules/yargs/node_modules/is-fullwidth-code-point": {
			"version": "3.0.0",
			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/yargs/node_modules/string-width": {
			"version": "4.2.3",
			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
			"dependencies": {
				"emoji-regex": "^8.0.0",
				"is-fullwidth-code-point": "^3.0.0",
				"strip-ansi": "^6.0.1"
			},
			"engines": {
				"node": ">=8"
			}
		},
		"node_modules/yn": {
			"version": "3.1.1",
			"resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
			"integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
			"devOptional": true,
			"engines": {
				"node": ">=6"
			}
		},
		"node_modules/yocto-queue": {
			"version": "0.1.0",
			"resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
			"integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
			"dev": true,
			"engines": {
				"node": ">=10"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/yoctocolors-cjs": {
			"version": "2.1.2",
			"resolved": "https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.2.tgz",
			"integrity": "sha512-cYVsTjKl8b+FrnidjibDWskAv7UKOfcwaVZdp/it9n1s9fU3IkgDbhdIRKCW4JDsAlECJY0ytoVPT3sK6kideA==",
			"engines": {
				"node": ">=18"
			},
			"funding": {
				"url": "https://github.com/sponsors/sindresorhus"
			}
		},
		"node_modules/yoga-wasm-web": {
			"version": "0.3.3",
			"resolved": "https://registry.npmjs.org/yoga-wasm-web/-/yoga-wasm-web-0.3.3.tgz",
			"integrity": "sha512-N+d4UJSJbt/R3wqY7Coqs5pcV0aUj2j9IaQ3rNj9bVCLld8tTGKRa2USARjnvZJWVx1NDmQev8EknoczaOQDOA=="
		},
		"node_modules/zod": {
			"version": "3.23.8",
			"resolved": "https://registry.npmjs.org/zod/-/zod-3.23.8.tgz",
			"integrity": "sha512-XBx9AXhXktjUqnepgTiE5flcKIYWi/rme0Eaj+5Y0lftuGBq+jyRu/md4WnuxqgP1ubdpNCsYEYPxrzVHD8d6g==",
			"funding": {
				"url": "https://github.com/sponsors/colinhacks"
			}
		}
	}
}

</package-lock.json>

<package.json>
{
	"name": "chat-ui",
	"version": "0.9.2",
	"private": true,
	"packageManager": "npm@9.5.0",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"lint": "prettier --plugin-search-dir . --check . && eslint .",
		"format": "prettier --plugin-search-dir . --write .",
		"test": "vitest",
		"updateLocalEnv": "node --loader ts-node/esm scripts/updateLocalEnv.ts",
		"populate": "vite-node --options.transformMode.ssr='/.*/' scripts/populate.ts",
		"prepare": "husky"
	},
	"devDependencies": {
		"@faker-js/faker": "^8.4.1",
		"@iconify-json/carbon": "^1.1.16",
		"@iconify-json/eos-icons": "^1.1.6",
		"@sveltejs/adapter-node": "^5.2.0",
		"@sveltejs/kit": "^2.5.20",
		"@tailwindcss/typography": "^0.5.9",
		"@types/dompurify": "^3.0.5",
		"@types/express": "^4.17.21",
		"@types/js-yaml": "^4.0.9",
		"@types/jsdom": "^21.1.1",
		"@types/jsonpath": "^0.2.4",
		"@types/minimist": "^1.2.5",
		"@types/node": "^22.1.0",
		"@types/parquetjs": "^0.10.3",
		"@types/sbd": "^1.0.5",
		"@types/uuid": "^9.0.8",
		"@typescript-eslint/eslint-plugin": "^6.x",
		"@typescript-eslint/parser": "^6.x",
		"dompurify": "^3.1.6",
		"eslint": "^8.28.0",
		"eslint-config-prettier": "^8.5.0",
		"eslint-plugin-svelte": "^2.30.0",
		"isomorphic-dompurify": "^2.13.0",
		"js-yaml": "^4.1.0",
		"minimist": "^1.2.8",
		"prettier": "^2.8.0",
		"prettier-plugin-svelte": "^2.10.1",
		"prettier-plugin-tailwindcss": "^0.2.7",
		"prom-client": "^15.1.2",
		"svelte": "^4.2.19",
		"svelte-check": "^3.8.5",
		"ts-node": "^10.9.1",
		"tslib": "^2.4.1",
		"typescript": "^5.0.0",
		"unplugin-icons": "^0.16.1",
		"vite": "^5.3.5",
		"vite-node": "^1.3.1",
		"vitest": "^0.31.0"
	},
	"type": "module",
	"dependencies": {
		"@aws-sdk/credential-providers": "^3.592.0",
		"@cliqz/adblocker-playwright": "^1.27.2",
		"@gradio/client": "^1.1.1",
		"@huggingface/hub": "^0.5.1",
		"@huggingface/inference": "^2.7.0",
		"@huggingface/transformers": "^3.0.0-alpha.6",
		"@iconify-json/bi": "^1.1.21",
		"@playwright/browser-chromium": "^1.43.1",
		"@resvg/resvg-js": "^2.6.2",
		"autoprefixer": "^10.4.14",
		"aws-sigv4-fetch": "^4.0.1",
		"aws4": "^1.13.0",
		"browser-image-resizer": "^2.4.1",
		"date-fns": "^2.29.3",
		"dotenv": "^16.0.3",
		"express": "^4.19.2",
		"file-type": "^19.4.1",
		"google-auth-library": "^9.13.0",
		"handlebars": "^4.7.8",
		"highlight.js": "^11.7.0",
		"husky": "^9.0.11",
		"image-size": "^1.0.2",
		"ip-address": "^9.0.5",
		"jose": "^5.3.0",
		"jsdom": "^22.0.0",
		"json5": "^2.2.3",
		"jsonpath": "^1.1.1",
		"lint-staged": "^15.2.7",
		"marked": "^12.0.1",
		"marked-katex-extension": "^5.0.1",
		"mongodb": "^5.8.0",
		"nanoid": "^4.0.2",
		"openid-client": "^5.4.2",
		"parquetjs": "^0.11.2",
		"pino": "^9.0.0",
		"pino-pretty": "^11.0.0",
		"playwright": "^1.44.1",
		"postcss": "^8.4.31",
		"saslprep": "^1.0.3",
		"satori": "^0.10.11",
		"satori-html": "^0.3.2",
		"sbd": "^1.0.19",
		"serpapi": "^1.1.1",
		"sharp": "^0.33.4",
		"tailwind-scrollbar": "^3.0.0",
		"tailwindcss": "^3.4.0",
		"uuid": "^10.0.0",
		"zod": "^3.22.3"
	},
	"optionalDependencies": {
		"@aws-sdk/client-bedrock-runtime": "^3.631.0",
		"@anthropic-ai/sdk": "^0.25.0",
		"@anthropic-ai/vertex-sdk": "^0.4.1",
		"@google-cloud/vertexai": "^1.1.0",
		"@google/generative-ai": "^0.14.1",
		"aws4fetch": "^1.0.17",
		"cohere-ai": "^7.9.0",
		"openai": "^4.44.0"
	}
}

</package.json>

<static/chatui/manifest.json>
{
	"background_color": "#ffffff",
	"name": "Chat UI",
	"short_name": "Chat UI",
	"display": "standalone",
	"start_url": "/",
	"icons": [
		{
			"src": "/chatui/icon-128x128.png",
			"sizes": "128x128",
			"type": "image/png"
		},
		{
			"src": "/chatui/icon-256x256.png",
			"sizes": "256x256",
			"type": "image/png"
		},
		{
			"src": "/chatui/icon-512x512.png",
			"sizes": "512x512",
			"type": "image/png"
		}
	]
}

</static/chatui/manifest.json>

<static/huggingchat/manifest.json>
{
	"background_color": "#ffffff",
	"name": "HuggingChat",
	"short_name": "HuggingChat",
	"display": "standalone",
	"start_url": "/chat",
	"icons": [
		{
			"src": "/chat/huggingchat/icon-36x36.png",
			"sizes": "36x36",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-48x48.png",
			"sizes": "48x48",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-72x72.png",
			"sizes": "72x72",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-96x96.png",
			"sizes": "96x96",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-128x128.png",
			"sizes": "128x128",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-144x144.png",
			"sizes": "144x144",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-192x192.png",
			"sizes": "192x192",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-256x256.png",
			"sizes": "256x256",
			"type": "image/png"
		},
		{
			"src": "/chat/huggingchat/icon-512x512.png",
			"sizes": "512x512",
			"type": "image/png"
		}
	]
}

</static/huggingchat/manifest.json>

<scripts/updateLocalEnv.ts>
import fs from "fs";
import yaml from "js-yaml";

const file = fs.readFileSync("chart/env/prod.yaml", "utf8");

// have to do a weird stringify/parse because of some node error
const prod = JSON.parse(JSON.stringify(yaml.load(file)));
const vars = prod.envVars as Record<string, string>;

let PUBLIC_CONFIG = "";
Object.entries(vars).forEach(([key, value]) => {
	PUBLIC_CONFIG += `${key}=\`${value}\`\n`;
});

const SECRET_CONFIG =
	(fs.existsSync(".env.SECRET_CONFIG")
		? fs.readFileSync(".env.SECRET_CONFIG", "utf8")
		: process.env.SECRET_CONFIG) ?? "";

// Prepend the content of the env variable SECRET_CONFIG
const full_config = `${PUBLIC_CONFIG}\n${SECRET_CONFIG}`;

// Write full_config to .env.local
fs.writeFileSync(".env.local", full_config);

</scripts/updateLocalEnv.ts>

<scripts/populate.ts>
import readline from "readline";
import minimist from "minimist";

// @ts-expect-error: vite-node makes the var available but the typescript compiler doesn't see them
import { env } from "$env/dynamic/private";

import { faker } from "@faker-js/faker";
import { ObjectId } from "mongodb";

// @ts-expect-error: vite-node makes the var available but the typescript compiler doesn't see them
import { collections } from "$lib/server/database";
import { models } from "../src/lib/server/models.ts";
import type { User } from "../src/lib/types/User";
import type { Assistant } from "../src/lib/types/Assistant";
import type { Conversation } from "../src/lib/types/Conversation";
import type { Settings } from "../src/lib/types/Settings";
import type { CommunityToolDB, ToolLogoColor, ToolLogoIcon } from "../src/lib/types/Tool";
import { defaultEmbeddingModel } from "../src/lib/server/embeddingModels.ts";
import { Message } from "../src/lib/types/Message.ts";

import { addChildren } from "../src/lib/utils/tree/addChildren.ts";
import { generateSearchTokens } from "../src/lib/utils/searchTokens.ts";

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
});

rl.on("close", function () {
	process.exit(0);
});

const possibleFlags = ["reset", "all", "users", "settings", "assistants", "conversations", "tools"];
const argv = minimist(process.argv.slice(2));
const flags = argv["_"].filter((flag) => possibleFlags.includes(flag));

async function generateMessages(preprompt?: string): Promise<Message[]> {
	const isLinear = faker.datatype.boolean(0.5);
	const isInterrupted = faker.datatype.boolean(0.05);

	const messages: Message[] = [];

	messages.push({
		id: crypto.randomUUID(),
		from: "system",
		content: preprompt ?? "",
		createdAt: faker.date.recent({ days: 30 }),
		updatedAt: faker.date.recent({ days: 30 }),
	});

	let isUser = true;
	let lastId = messages[0].id;
	if (isLinear) {
		const convLength = faker.number.int({ min: 1, max: 25 }) * 2; // must always be even

		for (let i = 0; i < convLength; i++) {
			lastId = addChildren(
				{
					messages,
					rootMessageId: messages[0].id,
				},
				{
					from: isUser ? "user" : "assistant",
					content: faker.lorem.sentence({
						min: 10,
						max: isUser ? 50 : 200,
					}),
					createdAt: faker.date.recent({ days: 30 }),
					updatedAt: faker.date.recent({ days: 30 }),
					interrupted: i === convLength - 1 && isInterrupted,
				},
				lastId
			);
			isUser = !isUser;
		}
	} else {
		const convLength = faker.number.int({ min: 2, max: 200 });

		for (let i = 0; i < convLength; i++) {
			addChildren(
				{
					messages,
					rootMessageId: messages[0].id,
				},
				{
					from: isUser ? "user" : "assistant",
					content: faker.lorem.sentence({
						min: 10,
						max: isUser ? 50 : 200,
					}),
					createdAt: faker.date.recent({ days: 30 }),
					updatedAt: faker.date.recent({ days: 30 }),
					interrupted: i === convLength - 1 && isInterrupted,
				},
				faker.helpers.arrayElement([
					messages[0].id,
					...messages.filter((m) => m.from === (isUser ? "assistant" : "user")).map((m) => m.id),
				])
			);

			isUser = !isUser;
		}
	}
	return messages;
}

async function seed() {
	console.log("Seeding...");
	const modelIds = models.map((model) => model.id);

	if (flags.includes("reset")) {
		console.log("Starting reset of DB");
		await collections.users.deleteMany({});
		await collections.settings.deleteMany({});
		await collections.assistants.deleteMany({});
		await collections.conversations.deleteMany({});
		await collections.tools.deleteMany({});
		console.log("Reset done");
	}

	if (flags.includes("users") || flags.includes("all")) {
		console.log("Creating 100 new users");
		const newUsers: User[] = Array.from({ length: 100 }, () => ({
			_id: new ObjectId(),
			createdAt: faker.date.recent({ days: 30 }),
			updatedAt: faker.date.recent({ days: 30 }),
			username: faker.internet.userName(),
			name: faker.person.fullName(),
			hfUserId: faker.string.alphanumeric(24),
			avatarUrl: faker.image.avatar(),
		}));

		await collections.users.insertMany(newUsers);
		console.log("Done creating users.");
	}

	const users = await collections.users.find().toArray();
	if (flags.includes("settings") || flags.includes("all")) {
		console.log("Updating settings for all users");
		users.forEach(async (user) => {
			const settings: Settings = {
				userId: user._id,
				shareConversationsWithModelAuthors: faker.datatype.boolean(0.25),
				hideEmojiOnSidebar: faker.datatype.boolean(0.25),
				ethicsModalAcceptedAt: faker.date.recent({ days: 30 }),
				activeModel: faker.helpers.arrayElement(modelIds),
				createdAt: faker.date.recent({ days: 30 }),
				updatedAt: faker.date.recent({ days: 30 }),
				customPrompts: {},
				assistants: [],
			};
			await collections.settings.updateOne(
				{ userId: user._id },
				{ $set: { ...settings } },
				{ upsert: true }
			);
		});
		console.log("Done updating settings.");
	}

	if (flags.includes("assistants") || flags.includes("all")) {
		console.log("Creating assistants for all users");
		await Promise.all(
			users.map(async (user) => {
				const name = faker.animal.insect();
				const assistants = faker.helpers.multiple<Assistant>(
					() => ({
						_id: new ObjectId(),
						name,
						createdById: user._id,
						createdByName: user.username,
						createdAt: faker.date.recent({ days: 30 }),
						updatedAt: faker.date.recent({ days: 30 }),
						userCount: faker.number.int({ min: 1, max: 100000 }),
						featured: faker.datatype.boolean(0.25),
						modelId: faker.helpers.arrayElement(modelIds),
						description: faker.lorem.sentence(),
						preprompt: faker.hacker.phrase(),
						exampleInputs: faker.helpers.multiple(() => faker.lorem.sentence(), {
							count: faker.number.int({ min: 0, max: 4 }),
						}),
						searchTokens: generateSearchTokens(name),
						last24HoursCount: faker.number.int({ min: 0, max: 1000 }),
					}),
					{ count: faker.number.int({ min: 3, max: 10 }) }
				);
				await collections.assistants.insertMany(assistants);
				await collections.settings.updateOne(
					{ userId: user._id },
					{ $set: { assistants: assistants.map((a) => a._id.toString()) } },
					{ upsert: true }
				);
			})
		);
		console.log("Done creating assistants.");
	}

	if (flags.includes("conversations") || flags.includes("all")) {
		console.log("Creating conversations for all users");
		await Promise.all(
			users.map(async (user) => {
				const conversations = faker.helpers.multiple(
					async () => {
						const settings = await collections.settings.findOne<Settings>({ userId: user._id });

						const assistantId =
							settings?.assistants && settings.assistants.length > 0 && faker.datatype.boolean(0.1)
								? faker.helpers.arrayElement<ObjectId>(settings.assistants)
								: undefined;

						const preprompt =
							(assistantId
								? await collections.assistants
										.findOne({ _id: assistantId })
										.then((assistant: Assistant) => assistant?.preprompt ?? "")
								: faker.helpers.maybe(() => faker.hacker.phrase(), { probability: 0.5 })) ?? "";

						const messages = await generateMessages(preprompt);

						const conv = {
							_id: new ObjectId(),
							userId: user._id,
							assistantId,
							preprompt,
							createdAt: faker.date.recent({ days: 145 }),
							updatedAt: faker.date.recent({ days: 145 }),
							model: faker.helpers.arrayElement(modelIds),
							title: faker.internet.emoji() + " " + faker.hacker.phrase(),
							embeddingModel: defaultEmbeddingModel.id,
							messages,
							rootMessageId: messages[0].id,
						} satisfies Conversation;

						return conv;
					},
					{ count: faker.number.int({ min: 10, max: 200 }) }
				);

				await collections.conversations.insertMany(await Promise.all(conversations));
			})
		);
		console.log("Done creating conversations.");
	}

	// generate Community Tools
	if (flags.includes("tools") || flags.includes("all")) {
		const tools = await Promise.all(
			faker.helpers.multiple(
				() => {
					const _id = new ObjectId();
					const displayName = faker.company.catchPhrase();
					const description = faker.company.catchPhrase();
					const color = faker.helpers.arrayElement([
						"purple",
						"blue",
						"green",
						"yellow",
						"red",
					]) satisfies ToolLogoColor;
					const icon = faker.helpers.arrayElement([
						"wikis",
						"tools",
						"camera",
						"code",
						"email",
						"cloud",
						"terminal",
						"game",
						"chat",
						"speaker",
						"video",
					]) satisfies ToolLogoIcon;
					const baseUrl = faker.helpers.arrayElement([
						"stabilityai/stable-diffusion-3-medium",
						"multimodalart/cosxl",
						"gokaygokay/SD3-Long-Captioner",
						"xichenhku/MimicBrush",
					]);

					// keep empty for populate for now

					const user: User = faker.helpers.arrayElement(users);
					const createdById = user._id;
					const createdByName = user.username ?? user.name;

					return {
						type: "community" as const,
						_id,
						createdById,
						createdByName,
						displayName,
						name: displayName.toLowerCase().replace(" ", "_"),
						endpoint: "/test",
						description,
						color,
						icon,
						baseUrl,
						inputs: [],
						outputPath: null,
						outputType: "str" as const,
						showOutput: false,
						useCount: faker.number.int({ min: 0, max: 100000 }),
						last24HoursUseCount: faker.number.int({ min: 0, max: 1000 }),
						createdAt: faker.date.recent({ days: 30 }),
						updatedAt: faker.date.recent({ days: 30 }),
						searchTokens: generateSearchTokens(displayName),
						featured: faker.datatype.boolean(),
					};
				},
				{ count: faker.number.int({ min: 10, max: 200 }) }
			)
		);

		await collections.tools.insertMany(tools satisfies CommunityToolDB[]);
	}
}

// run seed
(async () => {
	try {
		rl.question(
			"You're about to run a seeding script on the following MONGODB_URL: \x1b[31m" +
				env.MONGODB_URL +
				"\x1b[0m\n\n With the following flags: \x1b[31m" +
				flags.join("\x1b[0m , \x1b[31m") +
				"\x1b[0m\n \n\n Are you sure you want to continue? (yes/no): ",
			async (confirm) => {
				if (confirm !== "yes") {
					console.log("Not 'yes', exiting.");
					rl.close();
					process.exit(0);
				}
				console.log("Starting seeding...");
				await seed();
				console.log("Seeding done.");
				rl.close();
			}
		);
	} catch (e) {
		console.error(e);
		process.exit(1);
	}
})();

</scripts/populate.ts>

<scripts/setupTest.ts>
import { vi } from "vitest";
import dotenv from "dotenv";
import { resolve } from "path";
import fs from "fs";

// Load the .env file
const envPath = resolve(__dirname, "../.env");
dotenv.config({ path: envPath });

// Read the .env file content
const envContent = fs.readFileSync(envPath, "utf-8");

// Parse the .env content
const envVars = dotenv.parse(envContent);

// Separate public and private variables
const publicEnv = {};
const privateEnv = {};

for (const [key, value] of Object.entries(envVars)) {
	if (key.startsWith("PUBLIC_")) {
		publicEnv[key] = value;
	} else {
		privateEnv[key] = value;
	}
}

vi.mock("$env/dynamic/public", () => ({
	env: publicEnv,
}));

vi.mock("$env/dynamic/private", () => ({
	env: {
		...privateEnv,
		MONGODB_URL: "mongodb://127.0.0.1:27017/",
	},
}));

</scripts/setupTest.ts>

<tsconfig.json>
{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"target": "ES2018"
	},
	"exclude": ["vite.config.ts"]
	// Path aliases are handled by https://kit.svelte.dev/docs/configuration#alias
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

</tsconfig.json>

<PROMPTS.md>
# Prompt templates

These are the templates used to format the conversation history for different models used in HuggingChat. Set them in your `.env.local` [like so](https://github.com/huggingface/chat-ui#chatprompttemplate).

## Llama 2

```env
<s>[INST] <<SYS>>\n{{preprompt}}\n<</SYS>>\n\n{{#each messages}}{{#ifUser}}{{content}} [/INST] {{/ifUser}}{{#ifAssistant}}{{content}} </s><s>[INST] {{/ifAssistant}}{{/each}}
```

## CodeLlama

```env
<s>[INST] <<SYS>>\n{{preprompt}}\n<</SYS>>\n\n{{#each messages}}{{#ifUser}}{{content}} [/INST] {{/ifUser}}{{#ifAssistant}}{{content}} </s><s>[INST] {{/ifAssistant}}{{/each}}
```

## Falcon

```env
System: {{preprompt}}\nUser:{{#each messages}}{{#ifUser}}{{content}}\nFalcon:{{/ifUser}}{{#ifAssistant}}{{content}}\nUser:{{/ifAssistant}}{{/each}}
```

## Mistral

```env
<s>{{#each messages}}{{#ifUser}}[INST] {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}} {{content}} [/INST]{{/ifUser}}{{#ifAssistant}}{{content}}</s> {{/ifAssistant}}{{/each}}
```

## Zephyr

```env
<|system|>\n{{preprompt}}</s>\n{{#each messages}}{{#ifUser}}<|user|>\n{{content}}</s>\n<|assistant|>\n{{/ifUser}}{{#ifAssistant}}{{content}}</s>\n{{/ifAssistant}}{{/each}}
```

## IDEFICS

```env
{{#each messages}}{{#ifUser}}User: {{content}}{{/ifUser}}<end_of_utterance>\nAssistant: {{#ifAssistant}}{{content}}\n{{/ifAssistant}}{{/each}}
```

## OpenChat

```env
<s>{{#each messages}}{{#ifUser}}GPT4 User: {{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}}<|end_of_turn|>GPT4 Assistant: {{/ifUser}}{{#ifAssistant}}{{content}}<|end_of_turn|>{{/ifAssistant}}{{/each}}
```

## Mixtral

```env
<s> {{#each messages}}{{#ifUser}}[INST]{{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}} {{content}} [/INST]{{/ifUser}}{{#ifAssistant}} {{content}}</s> {{/ifAssistant}}{{/each}}
```

## ChatML

```env
{{#if @root.preprompt}}<|im_start|>system\n{{@root.preprompt}}<|im_end|>\n{{/if}}{{#each messages}}{{#ifUser}}<|im_start|>user\n{{content}}<|im_end|>\n<|im_start|>assistant\n{{/ifUser}}{{#ifAssistant}}{{content}}<|im_end|>\n{{/ifAssistant}}{{/each}}
```

## CodeLlama 70B

```env
<s>{{#if @root.preprompt}}Source: system\n\n {{@root.preprompt}} <step> {{/if}}{{#each messages}}{{#ifUser}}Source: user\n\n {{content}} <step> {{/ifUser}}{{#ifAssistant}}Source: assistant\n\n {{content}} <step> {{/ifAssistant}}{{/each}}Source: assistant\nDestination: user\n\n ``
```

## Gemma

```env
{{#each messages}}{{#ifUser}}<start_of_turn>user\n{{#if @first}}{{#if @root.preprompt}}{{@root.preprompt}}\n{{/if}}{{/if}}{{content}}<end_of_turn>\n<start_of_turn>model\n{{/ifUser}}{{#ifAssistant}}{{content}}<end_of_turn>\n{{/ifAssistant}}{{/each}}
```

</PROMPTS.md>

<repo_structure.yaml>
planChat
  - path: /svelte.config.js
    type: file
  - path: /LICENSE
    type: file
  - path: /Dockerfile
    type: file
  - path: /chart
    type: directory
    contents:
    - path: /chart/Chart.yaml
      type: file
    - path: /chart/env
      type: directory
      contents:
      - path: /chart/env/prod.yaml
        type: file
    - path: /chart/templates
      type: directory
      contents:
      - path: /chart/templates/service-monitor.yaml
        type: file
      - path: /chart/templates/deployment.yaml
        type: file
      - path: /chart/templates/infisical.yaml
        type: file
      - path: /chart/templates/ingress.yaml
        type: file
      - path: /chart/templates/config.yaml
        type: file
      - path: /chart/templates/service.yaml
        type: file
      - path: /chart/templates/hpa.yaml
        type: file
      - path: /chart/templates/service-account.yaml
        type: file
      - path: /chart/templates/_helpers.tpl
        type: file
    - path: /chart/values.yaml
      type: file
  - path: /PRIVACY.md
    type: file
  - path: /docs
    type: directory
    contents:
    - path: /docs/source
      type: directory
      contents:
      - path: /docs/source/configuration
        type: directory
        contents:
        - path: /docs/source/configuration/overview.md
          type: file
        - path: /docs/source/configuration/embeddings.md
          type: file
        - path: /docs/source/configuration/common-issues.md
          type: file
        - path: /docs/source/configuration/web-search.md
          type: file
        - path: /docs/source/configuration/models
          type: directory
          contents:
          - path: /docs/source/configuration/models/overview.md
            type: file
          - path: /docs/source/configuration/models/providers
            type: directory
            contents:
            - path: /docs/source/configuration/models/providers/anthropic.md
              type: file
            - path: /docs/source/configuration/models/providers/tgi.md
              type: file
            - path: /docs/source/configuration/models/providers/openai.md
              type: file
            - path: /docs/source/configuration/models/providers/langserve.md
              type: file
            - path: /docs/source/configuration/models/providers/ollama.md
              type: file
            - path: /docs/source/configuration/models/providers/llamacpp.md
              type: file
            - path: /docs/source/configuration/models/providers/cohere.md
              type: file
            - path: /docs/source/configuration/models/providers/google.md
              type: file
            - path: /docs/source/configuration/models/providers/cloudflare.md
              type: file
            - path: /docs/source/configuration/models/providers/aws.md
              type: file
          - path: /docs/source/configuration/models/multimodal.md
            type: file
          - path: /docs/source/configuration/models/tools.md
            type: file
        - path: /docs/source/configuration/open-id.md
          type: file
        - path: /docs/source/configuration/theming.md
          type: file
        - path: /docs/source/configuration/metrics.md
          type: file
      - path: /docs/source/developing
        type: directory
        contents:
        - path: /docs/source/developing/architecture.md
          type: file
        - path: /docs/source/developing/copy-huggingchat.md
          type: file
      - path: /docs/source/_toctree.yml
        type: file
      - path: /docs/source/installation
        type: directory
        contents:
        - path: /docs/source/installation/helm.md
          type: file
        - path: /docs/source/installation/docker.md
          type: file
        - path: /docs/source/installation/spaces.md
          type: file
        - path: /docs/source/installation/local.md
          type: file
      - path: /docs/source/index.md
        type: file
  - path: /README.md
    type: file
  - path: /tailwind.config.cjs
    type: file
  - path: /package-lock.json
    type: file
  - path: /package.json
    type: file
  - path: /static
    type: directory
    contents:
    - path: /static/chatui
      type: directory
      contents:
      - path: /static/chatui/icon-256x256.png
        type: file
      - path: /static/chatui/favicon.ico
        type: file
      - path: /static/chatui/apple-touch-icon.png
        type: file
      - path: /static/chatui/icon.svg
        type: file
      - path: /static/chatui/manifest.json
        type: file
      - path: /static/chatui/icon-512x512.png
        type: file
      - path: /static/chatui/logo.svg
        type: file
      - path: /static/chatui/favicon.svg
        type: file
      - path: /static/chatui/icon-128x128.png
        type: file
    - path: /static/huggingchat
      type: directory
      contents:
      - path: /static/huggingchat/icon-192x192.png
        type: file
      - path: /static/huggingchat/assistants-thumbnail.png
        type: file
      - path: /static/huggingchat/icon-256x256.png
        type: file
      - path: /static/huggingchat/favicon.ico
        type: file
      - path: /static/huggingchat/apple-touch-icon.png
        type: file
      - path: /static/huggingchat/tools-thumbnail.png
        type: file
      - path: /static/huggingchat/icon-72x72.png
        type: file
      - path: /static/huggingchat/icon-36x36.png
        type: file
      - path: /static/huggingchat/icon-96x96.png
        type: file
      - path: /static/huggingchat/icon.svg
        type: file
      - path: /static/huggingchat/icon-48x48.png
        type: file
      - path: /static/huggingchat/manifest.json
        type: file
      - path: /static/huggingchat/thumbnail.png
        type: file
      - path: /static/huggingchat/icon-512x512.png
        type: file
      - path: /static/huggingchat/icon-144x144.png
        type: file
      - path: /static/huggingchat/logo.svg
        type: file
      - path: /static/huggingchat/favicon.svg
        type: file
      - path: /static/huggingchat/icon-128x128.png
        type: file
    - path: /static/fonts
      type: directory
      contents:
      - path: /static/fonts/Inter-Medium.ttf
        type: file
      - path: /static/fonts/Inter-Light.ttf
        type: file
      - path: /static/fonts/Inter-Thin.ttf
        type: file
      - path: /static/fonts/Inter-Bold.ttf
        type: file
      - path: /static/fonts/Inter-Regular.ttf
        type: file
      - path: /static/fonts/Inter-ExtraBold.ttf
        type: file
      - path: /static/fonts/Inter-ExtraLight.ttf
        type: file
      - path: /static/fonts/Inter-Black.ttf
        type: file
      - path: /static/fonts/Inter-SemiBold.ttf
        type: file
  - path: /scripts
    type: directory
    contents:
    - path: /scripts/updateLocalEnv.ts
      type: file
    - path: /scripts/populate.ts
      type: file
    - path: /scripts/setupTest.ts
      type: file
  - path: /tsconfig.json
    type: file
  - path: /PROMPTS.md
    type: file
  - path: /repo_structure.yaml
    type: file
  - path: /postcss.config.js
    type: file
  - path: /entrypoint.sh
    type: file
  - path: /src
    type: directory
    contents:
    - path: /src/app.d.ts
      type: file
    - path: /src/styles
      type: directory
      contents:
      - path: /src/styles/main.css
        type: file
      - path: /src/styles/highlight-js.css
        type: file
    - path: /src/ambient.d.ts
      type: file
    - path: /src/lib
      type: directory
      contents:
      - path: /src/lib/migrations
        type: directory
        contents:
        - path: /src/lib/migrations/migrations.ts
          type: file
        - path: /src/lib/migrations/lock.ts
          type: file
        - path: /src/lib/migrations/routines
          type: directory
          contents:
          - path: /src/lib/migrations/routines/06-trim-message-updates.ts
            type: file
          - path: /src/lib/migrations/routines/02-update-assistants-models.ts
            type: file
          - path: /src/lib/migrations/routines/01-update-search-assistants.ts
            type: file
          - path: /src/lib/migrations/routines/07-reset-tools-in-settings.ts
            type: file
          - path: /src/lib/migrations/routines/03-add-tools-in-settings.ts
            type: file
          - path: /src/lib/migrations/routines/04-update-message-updates.ts
            type: file
          - path: /src/lib/migrations/routines/05-update-message-files.ts
            type: file
          - path: /src/lib/migrations/routines/index.ts
            type: file
        - path: /src/lib/migrations/migrations.spec.ts
          type: file
      - path: /src/lib/types
        type: directory
        contents:
        - path: /src/lib/types/ConvSidebar.ts
          type: file
        - path: /src/lib/types/MessageUpdate.ts
          type: file
        - path: /src/lib/types/MigrationResult.ts
          type: file
        - path: /src/lib/types/Report.ts
          type: file
        - path: /src/lib/types/ConversationStats.ts
          type: file
        - path: /src/lib/types/Tool.ts
          type: file
        - path: /src/lib/types/MessageEvent.ts
          type: file
        - path: /src/lib/types/Template.ts
          type: file
        - path: /src/lib/types/Settings.ts
          type: file
        - path: /src/lib/types/WebSearch.ts
          type: file
        - path: /src/lib/types/Model.ts
          type: file
        - path: /src/lib/types/AbortedGeneration.ts
          type: file
        - path: /src/lib/types/Message.ts
          type: file
        - path: /src/lib/types/Session.ts
          type: file
        - path: /src/lib/types/SharedConversation.ts
          type: file
        - path: /src/lib/types/Assistant.ts
          type: file
        - path: /src/lib/types/TokenCache.ts
          type: file
        - path: /src/lib/types/Semaphore.ts
          type: file
        - path: /src/lib/types/Timestamps.ts
          type: file
        - path: /src/lib/types/Conversation.ts
          type: file
        - path: /src/lib/types/AssistantStats.ts
          type: file
        - path: /src/lib/types/User.ts
          type: file
        - path: /src/lib/types/UrlDependency.ts
          type: file
      - path: /src/lib/shareConversation.ts
        type: file
      - path: /src/lib/constants
        type: directory
        contents:
        - path: /src/lib/constants/publicSepToken.ts
          type: file
      - path: /src/lib/stores
        type: directory
        contents:
        - path: /src/lib/stores/errors.ts
          type: file
        - path: /src/lib/stores/settings.ts
          type: file
        - path: /src/lib/stores/webSearchParameters.ts
          type: file
        - path: /src/lib/stores/titleUpdate.ts
          type: file
        - path: /src/lib/stores/isAborted.ts
          type: file
        - path: /src/lib/stores/pendingMessage.ts
          type: file
        - path: /src/lib/stores/convTree.ts
          type: file
      - path: /src/lib/buildPrompt.ts
        type: file
      - path: /src/lib/server
        type: directory
        contents:
        - path: /src/lib/server/sentenceSimilarity.ts
          type: file
        - path: /src/lib/server/embeddingModels.ts
          type: file
        - path: /src/lib/server/tools
          type: directory
          contents:
          - path: /src/lib/server/tools/outputs.ts
            type: file
          - path: /src/lib/server/tools/web
            type: directory
            contents:
            - path: /src/lib/server/tools/web/search.ts
              type: file
            - path: /src/lib/server/tools/web/url.ts
              type: file
          - path: /src/lib/server/tools/calculator.ts
            type: file
          - path: /src/lib/server/tools/utils.ts
            type: file
          - path: /src/lib/server/tools/directlyAnswer.ts
            type: file
          - path: /src/lib/server/tools/index.ts
            type: file
        - path: /src/lib/server/endpoints
          type: directory
          contents:
          - path: /src/lib/server/endpoints/cohere
            type: directory
            contents:
            - path: /src/lib/server/endpoints/cohere/endpointCohere.ts
              type: file
          - path: /src/lib/server/endpoints/endpoints.ts
            type: file
          - path: /src/lib/server/endpoints/llamacpp
            type: directory
            contents:
            - path: /src/lib/server/endpoints/llamacpp/endpointLlamacpp.ts
              type: file
          - path: /src/lib/server/endpoints/google
            type: directory
            contents:
            - path: /src/lib/server/endpoints/google/endpointVertex.ts
              type: file
            - path: /src/lib/server/endpoints/google/endpointGenAI.ts
              type: file
          - path: /src/lib/server/endpoints/images.ts
            type: file
          - path: /src/lib/server/endpoints/cloudflare
            type: directory
            contents:
            - path: /src/lib/server/endpoints/cloudflare/endpointCloudflare.ts
              type: file
          - path: /src/lib/server/endpoints/tgi
            type: directory
            contents:
            - path: /src/lib/server/endpoints/tgi/endpointTgi.ts
              type: file
          - path: /src/lib/server/endpoints/langserve
            type: directory
            contents:
            - path: /src/lib/server/endpoints/langserve/endpointLangserve.ts
              type: file
          - path: /src/lib/server/endpoints/anthropic
            type: directory
            contents:
            - path: /src/lib/server/endpoints/anthropic/endpointAnthropicVertex.ts
              type: file
            - path: /src/lib/server/endpoints/anthropic/endpointAnthropic.ts
              type: file
            - path: /src/lib/server/endpoints/anthropic/utils.ts
              type: file
          - path: /src/lib/server/endpoints/aws
            type: directory
            contents:
            - path: /src/lib/server/endpoints/aws/endpointAws.ts
              type: file
            - path: /src/lib/server/endpoints/aws/endpointBedrock.ts
              type: file
          - path: /src/lib/server/endpoints/ollama
            type: directory
            contents:
            - path: /src/lib/server/endpoints/ollama/endpointOllama.ts
              type: file
          - path: /src/lib/server/endpoints/preprocessMessages.ts
            type: file
          - path: /src/lib/server/endpoints/openai
            type: directory
            contents:
            - path: /src/lib/server/endpoints/openai/endpointOai.ts
              type: file
            - path: /src/lib/server/endpoints/openai/openAIChatToTextGenerationStream.ts
              type: file
            - path: /src/lib/server/endpoints/openai/openAICompletionToTextGenerationStream.ts
              type: file
        - path: /src/lib/server/textGeneration
          type: directory
          contents:
          - path: /src/lib/server/textGeneration/title.ts
            type: file
          - path: /src/lib/server/textGeneration/types.ts
            type: file
          - path: /src/lib/server/textGeneration/assistant.ts
            type: file
          - path: /src/lib/server/textGeneration/tools.ts
            type: file
          - path: /src/lib/server/textGeneration/generate.ts
            type: file
          - path: /src/lib/server/textGeneration/index.ts
            type: file
        - path: /src/lib/server/usageLimits.ts
          type: file
        - path: /src/lib/server/exitHandler.ts
          type: file
        - path: /src/lib/server/generateFromDefaultEndpoint.ts
          type: file
        - path: /src/lib/server/websearch
          type: directory
          contents:
          - path: /src/lib/server/websearch/embed
            type: directory
            contents:
            - path: /src/lib/server/websearch/embed/embed.ts
              type: file
            - path: /src/lib/server/websearch/embed/combine.ts
              type: file
            - path: /src/lib/server/websearch/embed/tree.ts
              type: file
          - path: /src/lib/server/websearch/markdown
            type: directory
            contents:
            - path: /src/lib/server/websearch/markdown/fromHtml.ts
              type: file
            - path: /src/lib/server/websearch/markdown/utils
              type: directory
              contents:
              - path: /src/lib/server/websearch/markdown/utils/nlp.ts
                type: file
              - path: /src/lib/server/websearch/markdown/utils/chunk.ts
                type: file
              - path: /src/lib/server/websearch/markdown/utils/stringify.ts
                type: file
            - path: /src/lib/server/websearch/markdown/types.ts
              type: file
            - path: /src/lib/server/websearch/markdown/tree.ts
              type: file
          - path: /src/lib/server/websearch/runWebSearch.ts
            type: file
          - path: /src/lib/server/websearch/scrape
            type: directory
            contents:
            - path: /src/lib/server/websearch/scrape/scrape.ts
              type: file
            - path: /src/lib/server/websearch/scrape/parser.ts
              type: file
            - path: /src/lib/server/websearch/scrape/types.ts
              type: file
            - path: /src/lib/server/websearch/scrape/playwright.ts
              type: file
          - path: /src/lib/server/websearch/search
            type: directory
            contents:
            - path: /src/lib/server/websearch/search/endpoints.ts
              type: file
            - path: /src/lib/server/websearch/search/endpoints
              type: directory
              contents:
              - path: /src/lib/server/websearch/search/endpoints/serpStack.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/webLocal.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/bing.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/searxng.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/serper.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/youApi.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/searchApi.ts
                type: file
              - path: /src/lib/server/websearch/search/endpoints/serpApi.ts
                type: file
            - path: /src/lib/server/websearch/search/search.ts
              type: file
            - path: /src/lib/server/websearch/search/generateQuery.ts
              type: file
          - path: /src/lib/server/websearch/update.ts
            type: file
        - path: /src/lib/server/logger.ts
          type: file
        - path: /src/lib/server/database.ts
          type: file
        - path: /src/lib/server/files
          type: directory
          contents:
          - path: /src/lib/server/files/uploadFile.ts
            type: file
          - path: /src/lib/server/files/downloadFile.ts
            type: file
        - path: /src/lib/server/isURLLocal.ts
          type: file
        - path: /src/lib/server/models.ts
          type: file
        - path: /src/lib/server/abortedGenerations.ts
          type: file
        - path: /src/lib/server/isURLLocal.spec.ts
          type: file
        - path: /src/lib/server/embeddingEndpoints
          type: directory
          contents:
          - path: /src/lib/server/embeddingEndpoints/embeddingEndpoints.ts
            type: file
          - path: /src/lib/server/embeddingEndpoints/hfApi
            type: directory
            contents:
            - path: /src/lib/server/embeddingEndpoints/hfApi/embeddingHfApi.ts
              type: file
          - path: /src/lib/server/embeddingEndpoints/transformersjs
            type: directory
            contents:
            - path: /src/lib/server/embeddingEndpoints/transformersjs/embeddingEndpoints.ts
              type: file
          - path: /src/lib/server/embeddingEndpoints/tei
            type: directory
            contents:
            - path: /src/lib/server/embeddingEndpoints/tei/embeddingEndpoints.ts
              type: file
          - path: /src/lib/server/embeddingEndpoints/openai
            type: directory
            contents:
            - path: /src/lib/server/embeddingEndpoints/openai/embeddingEndpoints.ts
              type: file
        - path: /src/lib/server/metrics.ts
          type: file
        - path: /src/lib/server/auth.ts
          type: file
      - path: /src/lib/utils
        type: directory
        contents:
        - path: /src/lib/utils/mergeAsyncGenerators.ts
          type: file
        - path: /src/lib/utils/parseStringToList.ts
          type: file
        - path: /src/lib/utils/tree
          type: directory
          contents:
          - path: /src/lib/utils/tree/addChildren.ts
            type: file
          - path: /src/lib/utils/tree/treeHelpers.spec.ts
            type: file
          - path: /src/lib/utils/tree/addSibling.ts
            type: file
          - path: /src/lib/utils/tree/isMessageId.spec.ts
            type: file
          - path: /src/lib/utils/tree/isMessageId.ts
            type: file
          - path: /src/lib/utils/tree/addChildren.spec.ts
            type: file
          - path: /src/lib/utils/tree/addSibling.spec.ts
            type: file
          - path: /src/lib/utils/tree/convertLegacyConversation.ts
            type: file
          - path: /src/lib/utils/tree/convertLegacyConversation.spec.ts
            type: file
          - path: /src/lib/utils/tree/buildSubtree.spec.ts
            type: file
          - path: /src/lib/utils/tree/buildSubtree.ts
            type: file
        - path: /src/lib/utils/file2base64.ts
          type: file
        - path: /src/lib/utils/isHuggingChat.ts
          type: file
        - path: /src/lib/utils/getShareUrl.ts
          type: file
        - path: /src/lib/utils/debounce.ts
          type: file
        - path: /src/lib/utils/formatUserCount.ts
          type: file
        - path: /src/lib/utils/sum.ts
          type: file
        - path: /src/lib/utils/messageUpdates.ts
          type: file
        - path: /src/lib/utils/template.ts
          type: file
        - path: /src/lib/utils/share.ts
          type: file
        - path: /src/lib/utils/deepestChild.ts
          type: file
        - path: /src/lib/utils/chunk.ts
          type: file
        - path: /src/lib/utils/randomUuid.ts
          type: file
        - path: /src/lib/utils/searchTokens.ts
          type: file
        - path: /src/lib/utils/timeout.ts
          type: file
        - path: /src/lib/utils/sha256.ts
          type: file
        - path: /src/lib/utils/tools.ts
          type: file
        - path: /src/lib/utils/hashConv.ts
          type: file
        - path: /src/lib/utils/models.ts
          type: file
        - path: /src/lib/utils/isDesktop.ts
          type: file
        - path: /src/lib/utils/getTokenizer.ts
          type: file
        - path: /src/lib/utils/getGradioApi.ts
          type: file
        - path: /src/lib/utils/getHref.ts
          type: file
        - path: /src/lib/utils/cookiesAreEnabled.ts
          type: file
        - path: /src/lib/utils/stringifyError.ts
          type: file
        - path: /src/lib/utils/isUrl.ts
          type: file
      - path: /src/lib/switchTheme.ts
        type: file
      - path: /src/lib/components
        type: directory
        contents:
        - path: /src/lib/components/Modal.svelte
          type: file
        - path: /src/lib/components/ExpandNavigation.svelte
          type: file
        - path: /src/lib/components/MobileNav.svelte
          type: file
        - path: /src/lib/components/Tooltip.svelte
          type: file
        - path: /src/lib/components/UploadBtn.svelte
          type: file
        - path: /src/lib/components/StopGeneratingBtn.svelte
          type: file
        - path: /src/lib/components/CopyToClipBoardBtn.svelte
          type: file
        - path: /src/lib/components/ScrollToBottomBtn.svelte
          type: file
        - path: /src/lib/components/chat
          type: directory
          contents:
          - path: /src/lib/components/chat/FileDropzone.svelte
            type: file
          - path: /src/lib/components/chat/ChatInput.svelte
            type: file
          - path: /src/lib/components/chat/ChatIntroduction.svelte
            type: file
          - path: /src/lib/components/chat/ChatMessage.svelte
            type: file
          - path: /src/lib/components/chat/ModelSwitch.svelte
            type: file
          - path: /src/lib/components/chat/ToolUpdate.svelte
            type: file
          - path: /src/lib/components/chat/ChatWindow.svelte
            type: file
          - path: /src/lib/components/chat/AssistantIntroduction.svelte
            type: file
          - path: /src/lib/components/chat/UploadedFile.svelte
            type: file
        - path: /src/lib/components/Toast.svelte
          type: file
        - path: /src/lib/components/NavConversationItem.svelte
          type: file
        - path: /src/lib/components/players
          type: directory
          contents:
          - path: /src/lib/components/players/AudioPlayer.svelte
            type: file
        - path: /src/lib/components/AssistantToolPicker.svelte
          type: file
        - path: /src/lib/components/LoginModal.svelte
          type: file
        - path: /src/lib/components/AnnouncementBanner.svelte
          type: file
        - path: /src/lib/components/ToolsMenu.svelte
          type: file
        - path: /src/lib/components/RetryBtn.svelte
          type: file
        - path: /src/lib/components/HoverTooltip.svelte
          type: file
        - path: /src/lib/components/PaginationArrow.svelte
          type: file
        - path: /src/lib/components/Switch.svelte
          type: file
        - path: /src/lib/components/Pagination.svelte
          type: file
        - path: /src/lib/components/icons
          type: directory
          contents:
          - path: /src/lib/components/icons/IconChevron.svelte
            type: file
          - path: /src/lib/components/icons/Logo.svelte
            type: file
          - path: /src/lib/components/icons/LogoHuggingFaceBorderless.svelte
            type: file
          - path: /src/lib/components/icons/IconCopy.svelte
            type: file
          - path: /src/lib/components/icons/IconInternet.svelte
            type: file
          - path: /src/lib/components/icons/IconNew.svelte
            type: file
          - path: /src/lib/components/icons/IconLoading.svelte
            type: file
          - path: /src/lib/components/icons/IconDazzled.svelte
            type: file
          - path: /src/lib/components/icons/IconTool.svelte
            type: file
        - path: /src/lib/components/NavMenu.svelte
          type: file
        - path: /src/lib/components/AssistantSettings.svelte
          type: file
        - path: /src/lib/components/ContinueBtn.svelte
          type: file
        - path: /src/lib/components/OpenWebSearchResults.svelte
          type: file
        - path: /src/lib/components/WebSearchToggle.svelte
          type: file
        - path: /src/lib/components/ModelCardMetadata.svelte
          type: file
        - path: /src/lib/components/Portal.svelte
          type: file
        - path: /src/lib/components/ToolLogo.svelte
          type: file
        - path: /src/lib/components/TokensCounter.svelte
          type: file
        - path: /src/lib/components/ToolBadge.svelte
          type: file
        - path: /src/lib/components/DisclaimerModal.svelte
          type: file
        - path: /src/lib/components/CodeBlock.svelte
          type: file
        - path: /src/lib/components/SystemPromptModal.svelte
          type: file
      - path: /src/lib/actions
        type: directory
        contents:
        - path: /src/lib/actions/snapScrollToBottom.ts
          type: file
        - path: /src/lib/actions/clickOutside.ts
          type: file
      - path: /src/lib/jobs
        type: directory
        contents:
        - path: /src/lib/jobs/refresh-conversation-stats.ts
          type: file
        - path: /src/lib/jobs/refresh-assistants-counts.ts
          type: file
    - path: /src/app.html
      type: file
    - path: /src/hooks.server.ts
      type: file
    - path: /src/routes
      type: directory
      contents:
      - path: /src/routes/assistant
        type: directory
        contents:
        - path: /src/routes/assistant/[assistantId]
          type: directory
          contents:
          - path: /src/routes/assistant/[assistantId]/+page.server.ts
            type: file
          - path: /src/routes/assistant/[assistantId]/+page.svelte
            type: file
          - path: /src/routes/assistant/[assistantId]/thumbnail.png
            type: directory
            contents:
            - path: /src/routes/assistant/[assistantId]/thumbnail.png/+server.ts
              type: file
            - path: /src/routes/assistant/[assistantId]/thumbnail.png/ChatThumbnail.svelte
              type: file
      - path: /src/routes/settings
        type: directory
        contents:
        - path: /src/routes/settings/+layout.server.ts
          type: file
        - path: /src/routes/settings/(nav)
          type: directory
          contents:
          - path: /src/routes/settings/(nav)/+page.svelte
            type: file
          - path: /src/routes/settings/(nav)/assistants
            type: directory
            contents:
            - path: /src/routes/settings/(nav)/assistants/new
              type: directory
              contents:
              - path: /src/routes/settings/(nav)/assistants/new/+page.server.ts
                type: file
              - path: /src/routes/settings/(nav)/assistants/new/+page@settings.svelte
                type: file
            - path: /src/routes/settings/(nav)/assistants/[assistantId]
              type: directory
              contents:
              - path: /src/routes/settings/(nav)/assistants/[assistantId]/+page.server.ts
                type: file
              - path: /src/routes/settings/(nav)/assistants/[assistantId]/+page.svelte
                type: file
              - path: /src/routes/settings/(nav)/assistants/[assistantId]/+page.ts
                type: file
              - path: /src/routes/settings/(nav)/assistants/[assistantId]/edit
                type: directory
                contents:
                - path: /src/routes/settings/(nav)/assistants/[assistantId]/edit/+page.server.ts
                  type: file
                - path: /src/routes/settings/(nav)/assistants/[assistantId]/edit/+page@settings.svelte
                  type: file
              - path: /src/routes/settings/(nav)/assistants/[assistantId]/avatar.jpg
                type: directory
                contents:
                - path: /src/routes/settings/(nav)/assistants/[assistantId]/avatar.jpg/+server.ts
                  type: file
              - path: /src/routes/settings/(nav)/assistants/[assistantId]/ReportModal.svelte
                type: file
          - path: /src/routes/settings/(nav)/+server.ts
            type: file
          - path: /src/routes/settings/(nav)/+layout.svelte
            type: file
        - path: /src/routes/settings/+layout.svelte
          type: file
      - path: /src/routes/tools
        type: directory
        contents:
        - path: /src/routes/tools/+layout.ts
          type: file
        - path: /src/routes/tools/[toolId]
          type: directory
          contents:
          - path: /src/routes/tools/[toolId]/+page.server.ts
            type: file
          - path: /src/routes/tools/[toolId]/+page.svelte
            type: file
          - path: /src/routes/tools/[toolId]/edit
            type: directory
            contents:
            - path: /src/routes/tools/[toolId]/edit/+page.server.ts
              type: file
            - path: /src/routes/tools/[toolId]/edit/+page.svelte
              type: file
          - path: /src/routes/tools/[toolId]/+layout.server.ts
            type: file
        - path: /src/routes/tools/+page.server.ts
          type: file
        - path: /src/routes/tools/+page.svelte
          type: file
        - path: /src/routes/tools/ToolEdit.svelte
          type: file
        - path: /src/routes/tools/new
          type: directory
          contents:
          - path: /src/routes/tools/new/+page.server.ts
            type: file
          - path: /src/routes/tools/new/+page.svelte
            type: file
        - path: /src/routes/tools/ToolInputComponent.svelte
          type: file
        - path: /src/routes/tools/+layout.svelte
          type: file
      - path: /src/routes/privacy
        type: directory
        contents:
        - path: /src/routes/privacy/+page.svelte
          type: file
      - path: /src/routes/+page.svelte
        type: file
      - path: /src/routes/assistants
        type: directory
        contents:
        - path: /src/routes/assistants/+page.server.ts
          type: file
        - path: /src/routes/assistants/+page.svelte
          type: file
      - path: /src/routes/+error.svelte
        type: file
      - path: /src/routes/healthcheck
        type: directory
        contents:
        - path: /src/routes/healthcheck/+server.ts
          type: file
      - path: /src/routes/admin
        type: directory
        contents:
        - path: /src/routes/admin/export
          type: directory
          contents:
          - path: /src/routes/admin/export/+server.ts
            type: file
        - path: /src/routes/admin/stats
          type: directory
          contents:
          - path: /src/routes/admin/stats/compute
            type: directory
            contents:
            - path: /src/routes/admin/stats/compute/+server.ts
              type: file
      - path: /src/routes/r
        type: directory
        contents:
        - path: /src/routes/r/[id]
          type: directory
          contents:
          - path: /src/routes/r/[id]/+page.ts
            type: file
      - path: /src/routes/logout
        type: directory
        contents:
        - path: /src/routes/logout/+page.server.ts
          type: file
      - path: /src/routes/models
        type: directory
        contents:
        - path: /src/routes/models/+page.svelte
          type: file
      - path: /src/routes/+layout.server.ts
        type: file
      - path: /src/routes/conversations
        type: directory
        contents:
        - path: /src/routes/conversations/+page.server.ts
          type: file
      - path: /src/routes/api
        type: directory
        contents:
        - path: /src/routes/api/assistant
          type: directory
          contents:
          - path: /src/routes/api/assistant/[id]
            type: directory
            contents:
            - path: /src/routes/api/assistant/[id]/+server.ts
              type: file
        - path: /src/routes/api/tools
          type: directory
          contents:
          - path: /src/routes/api/tools/[toolId]
            type: directory
            contents:
            - path: /src/routes/api/tools/[toolId]/+server.ts
              type: file
          - path: /src/routes/api/tools/search
            type: directory
            contents:
            - path: /src/routes/api/tools/search/+server.ts
              type: file
        - path: /src/routes/api/assistants
          type: directory
          contents:
          - path: /src/routes/api/assistants/+server.ts
            type: file
        - path: /src/routes/api/user
          type: directory
          contents:
          - path: /src/routes/api/user/assistants
            type: directory
            contents:
            - path: /src/routes/api/user/assistants/+server.ts
              type: file
          - path: /src/routes/api/user/+server.ts
            type: file
        - path: /src/routes/api/models
          type: directory
          contents:
          - path: /src/routes/api/models/+server.ts
            type: file
        - path: /src/routes/api/conversations
          type: directory
          contents:
          - path: /src/routes/api/conversations/+server.ts
            type: file
        - path: /src/routes/api/spaces-config
          type: directory
          contents:
          - path: /src/routes/api/spaces-config/+server.ts
            type: file
        - path: /src/routes/api/conversation
          type: directory
          contents:
          - path: /src/routes/api/conversation/[id]
            type: directory
            contents:
            - path: /src/routes/api/conversation/[id]/+server.ts
              type: file
      - path: /src/routes/login
        type: directory
        contents:
        - path: /src/routes/login/+page.server.ts
          type: file
        - path: /src/routes/login/callback
          type: directory
          contents:
          - path: /src/routes/login/callback/+page.server.ts
            type: file
          - path: /src/routes/login/callback/updateUser.spec.ts
            type: file
          - path: /src/routes/login/callback/updateUser.ts
            type: file
      - path: /src/routes/+layout.svelte
        type: file
      - path: /src/routes/conversation
        type: directory
        contents:
        - path: /src/routes/conversation/+server.ts
          type: file
        - path: /src/routes/conversation/[id]
          type: directory
          contents:
          - path: /src/routes/conversation/[id]/+page.server.ts
            type: file
          - path: /src/routes/conversation/[id]/+page.svelte
            type: file
          - path: /src/routes/conversation/[id]/stop-generating
            type: directory
            contents:
            - path: /src/routes/conversation/[id]/stop-generating/+server.ts
              type: file
          - path: /src/routes/conversation/[id]/+server.ts
            type: file
          - path: /src/routes/conversation/[id]/output
            type: directory
            contents:
            - path: /src/routes/conversation/[id]/output/[sha256]
              type: directory
              contents:
              - path: /src/routes/conversation/[id]/output/[sha256]/+server.ts
                type: file
          - path: /src/routes/conversation/[id]/message
            type: directory
            contents:
            - path: /src/routes/conversation/[id]/message/[messageId]
              type: directory
              contents:
              - path: /src/routes/conversation/[id]/message/[messageId]/vote
                type: directory
                contents:
                - path: /src/routes/conversation/[id]/message/[messageId]/vote/+server.ts
                  type: file
              - path: /src/routes/conversation/[id]/message/[messageId]/prompt
                type: directory
                contents:
                - path: /src/routes/conversation/[id]/message/[messageId]/prompt/+server.ts
                  type: file
          - path: /src/routes/conversation/[id]/share
            type: directory
            contents:
            - path: /src/routes/conversation/[id]/share/+server.ts
              type: file

</repo_structure.yaml>

<postcss.config.js>
export default {
	plugins: {
		tailwindcss: {},
		autoprefixer: {},
	},
};

</postcss.config.js>

<entrypoint.sh>
ENV_LOCAL_PATH=/app/.env.local

if test -z "${DOTENV_LOCAL}" ; then
    if ! test -f "${ENV_LOCAL_PATH}" ; then
        echo "DOTENV_LOCAL was not found in the ENV variables and .env.local is not set using a bind volume. Make sure to set environment variables properly. "
    fi;
else
    echo "DOTENV_LOCAL was found in the ENV variables. Creating .env.local file."
    cat <<< "$DOTENV_LOCAL" > ${ENV_LOCAL_PATH}
fi;

if [ "$INCLUDE_DB" = "true" ] ; then
    echo "Starting local MongoDB instance"
    nohup mongod &
fi;

export PUBLIC_VERSION=$(node -p "require('./package.json').version")

dotenv -e /app/.env -c -- node /app/build/index.js -- --host 0.0.0.0 --port 3000
</entrypoint.sh>

<src/app.d.ts>
/// <reference types="@sveltejs/kit" />
/// <reference types="unplugin-icons/types/svelte" />

import type { User } from "$lib/types/User";

// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		interface Locals {
			sessionId: string;
			user?: User & { logoutDisabled?: boolean };
		}

		interface Error {
			message: string;
			errorId?: ReturnType<typeof crypto.randomUUID>;
		}
		// interface PageData {}
		// interface Platform {}
	}
}

export {};

</src/app.d.ts>

<src/styles/main.css>
@import "./highlight-js.css";

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
	.btn {
		@apply inline-flex flex-shrink-0 cursor-pointer select-none items-center justify-center whitespace-nowrap outline-none transition-all focus:ring disabled:cursor-default;
	}
}

@layer utilities {
	.scrollbar-custom {
		@apply scrollbar-thin scrollbar-track-transparent scrollbar-thumb-black/10 scrollbar-thumb-rounded-full scrollbar-w-1 hover:scrollbar-thumb-black/20 dark:scrollbar-thumb-white/10 dark:hover:scrollbar-thumb-white/20;
	}
}

</src/styles/main.css>

<src/styles/highlight-js.css>
@import "highlight.js/styles/atom-one-dark";

</src/styles/highlight-js.css>

<src/ambient.d.ts>
declare module "*.ttf" {
	const value: ArrayBuffer;
	export default value;
}

</src/ambient.d.ts>

<src/lib/migrations/migrations.ts>
import { Database } from "$lib/server/database";
import { migrations } from "./routines";
import { acquireLock, releaseLock, isDBLocked, refreshLock } from "./lock";
import { isHuggingChat } from "$lib/utils/isHuggingChat";
import { logger } from "$lib/server/logger";

const LOCK_KEY = "migrations";

export async function checkAndRunMigrations() {
	// make sure all GUIDs are unique
	if (new Set(migrations.map((m) => m._id.toString())).size !== migrations.length) {
		throw new Error("Duplicate migration GUIDs found.");
	}

	// check if all migrations have already been run
	const migrationResults = await Database.getInstance()
		.getCollections()
		.migrationResults.find()
		.toArray();

	logger.info("[MIGRATIONS] Begin check...");

	// connect to the database
	const connectedClient = await Database.getInstance().getClient().connect();

	const lockId = await acquireLock(LOCK_KEY);

	if (!lockId) {
		// another instance already has the lock, so we exit early
		logger.info(
			"[MIGRATIONS] Another instance already has the lock. Waiting for DB to be unlocked."
		);

		// Todo: is this necessary? Can we just return?
		// block until the lock is released
		while (await isDBLocked(LOCK_KEY)) {
			await new Promise((resolve) => setTimeout(resolve, 1000));
		}
		return;
	}

	// once here, we have the lock
	// make sure to refresh it regularly while it's running
	const refreshInterval = setInterval(async () => {
		await refreshLock(LOCK_KEY, lockId);
	}, 1000 * 10);

	// iterate over all migrations
	for (const migration of migrations) {
		// check if the migration has already been applied
		const shouldRun =
			migration.runEveryTime ||
			!migrationResults.find((m) => m._id.toString() === migration._id.toString());

		// check if the migration has already been applied
		if (!shouldRun) {
			logger.info(`[MIGRATIONS] "${migration.name}" already applied. Skipping...`);
		} else {
			// check the modifiers to see if some cases match
			if (
				(migration.runForHuggingChat === "only" && !isHuggingChat) ||
				(migration.runForHuggingChat === "never" && isHuggingChat)
			) {
				logger.info(
					`[MIGRATIONS] "${migration.name}" should not be applied for this run. Skipping...`
				);
				continue;
			}

			// otherwise all is good and we can run the migration
			logger.info(
				`[MIGRATIONS] "${migration.name}" ${
					migration.runEveryTime ? "should run every time" : "not applied yet"
				}. Applying...`
			);

			await Database.getInstance()
				.getCollections()
				.migrationResults.updateOne(
					{ _id: migration._id },
					{
						$set: {
							name: migration.name,
							status: "ongoing",
						},
					},
					{ upsert: true }
				);

			const session = connectedClient.startSession();
			let result = false;

			try {
				await session.withTransaction(async () => {
					result = await migration.up(Database.getInstance());
				});
			} catch (e) {
				logger.info(`[MIGRATIONS]  "${migration.name}" failed!`);
				logger.error(e);
			} finally {
				await session.endSession();
			}

			await Database.getInstance()
				.getCollections()
				.migrationResults.updateOne(
					{ _id: migration._id },
					{
						$set: {
							name: migration.name,
							status: result ? "success" : "failure",
						},
					},
					{ upsert: true }
				);
		}
	}

	logger.info("[MIGRATIONS] All migrations applied. Releasing lock");

	clearInterval(refreshInterval);
	await releaseLock(LOCK_KEY, lockId);
}

</src/lib/migrations/migrations.ts>

<src/lib/migrations/lock.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";

/**
 * Returns the lock id if the lock was acquired, false otherwise
 */
export async function acquireLock(key: string): Promise<ObjectId | false> {
	try {
		const id = new ObjectId();

		const insert = await collections.semaphores.insertOne({
			_id: id,
			key,
			createdAt: new Date(),
			updatedAt: new Date(),
		});

		return insert.acknowledged ? id : false; // true if the document was inserted
	} catch (e) {
		// unique index violation, so there must already be a lock
		return false;
	}
}

export async function releaseLock(key: string, lockId: ObjectId) {
	await collections.semaphores.deleteOne({
		_id: lockId,
		key,
	});
}

export async function isDBLocked(key: string): Promise<boolean> {
	const res = await collections.semaphores.countDocuments({
		key,
	});
	return res > 0;
}

export async function refreshLock(key: string, lockId: ObjectId): Promise<boolean> {
	const result = await collections.semaphores.updateOne(
		{
			_id: lockId,
			key,
		},
		{
			$set: {
				updatedAt: new Date(),
			},
		}
	);

	return result.matchedCount > 0;
}

</src/lib/migrations/lock.ts>

<src/lib/migrations/routines/06-trim-message-updates.ts>
import type { Migration } from ".";
import { collections } from "$lib/server/database";
import { ObjectId, type WithId } from "mongodb";
import type { Conversation } from "$lib/types/Conversation";
import {
	MessageUpdateType,
	MessageWebSearchUpdateType,
	type MessageUpdate,
} from "$lib/types/MessageUpdate";
import type { Message } from "$lib/types/Message";
import { logger } from "$lib/server/logger";

// -----------

/** Converts the old message update to the new schema */
function convertMessageUpdate(message: Message, update: MessageUpdate): MessageUpdate | null {
	try {
		// trim final websearch update, and sources update

		if (update.type === "webSearch") {
			if (update.subtype === MessageWebSearchUpdateType.Sources) {
				return {
					type: MessageUpdateType.WebSearch,
					subtype: MessageWebSearchUpdateType.Sources,
					message: update.message,
					sources: update.sources.map(({ link, title }) => ({ link, title })),
				};
			} else if (update.subtype === MessageWebSearchUpdateType.Finished) {
				return {
					type: MessageUpdateType.WebSearch,
					subtype: MessageWebSearchUpdateType.Finished,
				};
			}
		}

		return update;
	} catch (error) {
		logger.error(error, "Error converting message update during migration. Skipping it..");
		return null;
	}
}

const trimMessageUpdates: Migration = {
	_id: new ObjectId("000000000006"),
	name: "Trim message updates to reduce stored size",
	up: async () => {
		const allConversations = collections.conversations.find({});

		let conversation: WithId<Pick<Conversation, "messages">> | null = null;
		while ((conversation = await allConversations.tryNext())) {
			const messages = conversation.messages.map((message) => {
				// Convert all of the existing updates to the new schema
				const updates = message.updates
					?.map((update) => convertMessageUpdate(message, update))
					.filter((update): update is MessageUpdate => Boolean(update));

				return { ...message, updates };
			});

			// Set the new messages array
			await collections.conversations.updateOne({ _id: conversation._id }, { $set: { messages } });
		}

		return true;
	},
	runEveryTime: false,
};

export default trimMessageUpdates;

</src/lib/migrations/routines/06-trim-message-updates.ts>

<src/lib/migrations/routines/02-update-assistants-models.ts>
import type { Migration } from ".";
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";

const updateAssistantsModels: Migration = {
	_id: new ObjectId("5f9f3f3f3f3f3f3f3f3f3f3f"),
	name: "Update deprecated models in assistants with the default model",
	up: async () => {
		const models = (await import("$lib/server/models")).models;
		const oldModels = (await import("$lib/server/models")).oldModels;
		const { assistants } = collections;

		const modelIds = models.map((el) => el.id);
		const defaultModelId = models[0].id;

		// Find all assistants whose modelId is not in modelIds, and update it
		const bulkOps = await assistants
			.find({ modelId: { $nin: modelIds } })
			.map((assistant) => {
				// has an old model
				let newModelId = defaultModelId;

				const oldModel = oldModels.find((m) => m.id === assistant.modelId);
				if (oldModel && oldModel.transferTo && !!models.find((m) => m.id === oldModel.transferTo)) {
					newModelId = oldModel.transferTo;
				}

				return {
					updateOne: {
						filter: { _id: assistant._id },
						update: { $set: { modelId: newModelId } },
					},
				};
			})
			.toArray();

		if (bulkOps.length > 0) {
			await assistants.bulkWrite(bulkOps);
		}

		return true;
	},
	runEveryTime: true,
	runForHuggingChat: "only",
};

export default updateAssistantsModels;

</src/lib/migrations/routines/02-update-assistants-models.ts>

<src/lib/migrations/routines/01-update-search-assistants.ts>
import type { Migration } from ".";
import { collections } from "$lib/server/database";
import { ObjectId, type AnyBulkWriteOperation } from "mongodb";
import type { Assistant } from "$lib/types/Assistant";
import { generateSearchTokens } from "$lib/utils/searchTokens";

const migration: Migration = {
	_id: new ObjectId("5f9f3e3e3e3e3e3e3e3e3e3e"),
	name: "Update search assistants",
	up: async () => {
		const { assistants } = collections;
		let ops: AnyBulkWriteOperation<Assistant>[] = [];

		for await (const assistant of assistants
			.find()
			.project<Pick<Assistant, "_id" | "name">>({ _id: 1, name: 1 })) {
			ops.push({
				updateOne: {
					filter: {
						_id: assistant._id,
					},
					update: {
						$set: {
							searchTokens: generateSearchTokens(assistant.name),
						},
					},
				},
			});

			if (ops.length >= 1000) {
				process.stdout.write(".");
				await assistants.bulkWrite(ops, { ordered: false });
				ops = [];
			}
		}

		if (ops.length) {
			await assistants.bulkWrite(ops, { ordered: false });
		}

		return true;
	},
	down: async () => {
		const { assistants } = collections;
		await assistants.updateMany({}, { $unset: { searchTokens: "" } });
		return true;
	},
};

export default migration;

</src/lib/migrations/routines/01-update-search-assistants.ts>

<src/lib/migrations/routines/07-reset-tools-in-settings.ts>
import type { Migration } from ".";
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";

const resetTools: Migration = {
	_id: new ObjectId("000000000007"),
	name: "Reset tools to empty",
	up: async () => {
		const { settings } = collections;

		await settings.updateMany({}, { $set: { tools: [] } });

		return true;
	},
	runEveryTime: false,
};

export default resetTools;

</src/lib/migrations/routines/07-reset-tools-in-settings.ts>

<src/lib/migrations/routines/03-add-tools-in-settings.ts>
import type { Migration } from ".";
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { logger } from "$lib/server/logger";

const addToolsToSettings: Migration = {
	_id: new ObjectId("5c9c4c4c4c4c4c4c4c4c4c4c"),
	name: "Add empty 'tools' record in settings",
	up: async () => {
		const { settings } = collections;

		// Find all assistants whose modelId is not in modelIds, and update it to use defaultModelId
		await settings.updateMany(
			{
				tools: { $exists: false },
			},
			{ $set: { tools: [] } }
		);

		settings
			.createIndex({ tools: 1 })
			.catch((e) => logger.error(e, "Error creating index during tools migration"));

		return true;
	},
	runEveryTime: false,
};

export default addToolsToSettings;

</src/lib/migrations/routines/03-add-tools-in-settings.ts>

<src/lib/migrations/routines/04-update-message-updates.ts>
import type { Migration } from ".";
import { collections } from "$lib/server/database";
import { ObjectId, type WithId } from "mongodb";
import type { Conversation } from "$lib/types/Conversation";
import type { WebSearchSource } from "$lib/types/WebSearch";
import {
	MessageUpdateStatus,
	MessageUpdateType,
	MessageWebSearchUpdateType,
	type MessageUpdate,
	type MessageWebSearchFinishedUpdate,
} from "$lib/types/MessageUpdate";
import type { Message } from "$lib/types/Message";
import { isMessageWebSearchSourcesUpdate } from "$lib/utils/messageUpdates";

// -----------
// Copy of the previous message update types
export type FinalAnswer = {
	type: "finalAnswer";
	text: string;
};

export type TextStreamUpdate = {
	type: "stream";
	token: string;
};

type WebSearchUpdate = {
	type: "webSearch";
	messageType: "update" | "error" | "sources";
	message: string;
	args?: string[];
	sources?: WebSearchSource[];
};

type StatusUpdate = {
	type: "status";
	status: "started" | "pending" | "finished" | "error" | "title";
	message?: string;
};

type ErrorUpdate = {
	type: "error";
	message: string;
	name: string;
};

type FileUpdate = {
	type: "file";
	sha: string;
};

type OldMessageUpdate =
	| FinalAnswer
	| TextStreamUpdate
	| WebSearchUpdate
	| StatusUpdate
	| ErrorUpdate
	| FileUpdate;

/** Converts the old message update to the new schema */
function convertMessageUpdate(message: Message, update: OldMessageUpdate): MessageUpdate | null {
	try {
		// Text and files
		if (update.type === "finalAnswer") {
			return {
				type: MessageUpdateType.FinalAnswer,
				text: update.text,
				interrupted: message.interrupted ?? false,
			};
		} else if (update.type === "stream") {
			return {
				type: MessageUpdateType.Stream,
				token: update.token,
			};
		} else if (update.type === "file") {
			return {
				type: MessageUpdateType.File,
				name: "Unknown",
				sha: update.sha,
				// assume jpeg but could be any image. should be harmless
				mime: "image/jpeg",
			};
		}

		// Status
		else if (update.type === "status") {
			if (update.status === "title") {
				return {
					type: MessageUpdateType.Title,
					title: update.message ?? "New Chat",
				};
			}
			if (update.status === "pending") return null;

			const status =
				update.status === "started"
					? MessageUpdateStatus.Started
					: update.status === "finished"
					? MessageUpdateStatus.Finished
					: MessageUpdateStatus.Error;
			return {
				type: MessageUpdateType.Status,
				status,
				message: update.message,
			};
		} else if (update.type === "error") {
			// Treat it as an error status update
			return {
				type: MessageUpdateType.Status,
				status: MessageUpdateStatus.Error,
				message: update.message,
			};
		}

		// Web Search
		else if (update.type === "webSearch") {
			if (update.messageType === "update") {
				return {
					type: MessageUpdateType.WebSearch,
					subtype: MessageWebSearchUpdateType.Update,
					message: update.message,
					args: update.args,
				};
			} else if (update.messageType === "error") {
				return {
					type: MessageUpdateType.WebSearch,
					subtype: MessageWebSearchUpdateType.Error,
					message: update.message,
					args: update.args,
				};
			} else if (update.messageType === "sources") {
				return {
					type: MessageUpdateType.WebSearch,
					subtype: MessageWebSearchUpdateType.Sources,
					message: update.message,
					sources: update.sources ?? [],
				};
			}
		}
		console.warn("Unknown message update during migration:", update);
		return null;
	} catch (error) {
		console.error("Error converting message update during migration. Skipping it... Error:", error);
		return null;
	}
}

const updateMessageUpdates: Migration = {
	_id: new ObjectId("5f9f7f7f7f7f7f7f7f7f7f7f"),
	name: "Convert message updates to the new schema",
	up: async () => {
		const allConversations = collections.conversations.find({});

		let conversation: WithId<Pick<Conversation, "messages">> | null = null;
		while ((conversation = await allConversations.tryNext())) {
			const messages = conversation.messages.map((message) => {
				// Convert all of the existing updates to the new schema
				const updates = message.updates
					?.map((update) => convertMessageUpdate(message, update as OldMessageUpdate))
					.filter((update): update is MessageUpdate => Boolean(update));

				// Add the new web search finished update if the sources update exists and webSearch is defined
				const webSearchSourcesUpdateIndex = updates?.findIndex(isMessageWebSearchSourcesUpdate);
				if (
					message.webSearch &&
					updates &&
					webSearchSourcesUpdateIndex &&
					webSearchSourcesUpdateIndex !== -1
				) {
					const webSearchFinishedUpdate: MessageWebSearchFinishedUpdate = {
						type: MessageUpdateType.WebSearch,
						subtype: MessageWebSearchUpdateType.Finished,
					};
					updates.splice(webSearchSourcesUpdateIndex + 1, 0, webSearchFinishedUpdate);
				}
				return { ...message, updates };
			});

			// Set the new messages array
			await collections.conversations.updateOne({ _id: conversation._id }, { $set: { messages } });
		}

		return true;
	},
	runEveryTime: false,
};

export default updateMessageUpdates;

</src/lib/migrations/routines/04-update-message-updates.ts>

<src/lib/migrations/routines/05-update-message-files.ts>
import { ObjectId, type WithId } from "mongodb";
import { collections } from "$lib/server/database";

import type { Migration } from ".";
import type { Conversation } from "$lib/types/Conversation";
import type { MessageFile } from "$lib/types/Message";

const updateMessageFiles: Migration = {
	_id: new ObjectId("5f9f5f5f5f5f5f5f5f5f5f5f"),
	name: "Convert message files to the new schema",
	up: async () => {
		const allConversations = collections.conversations.find({}, { projection: { messages: 1 } });

		let conversation: WithId<Pick<Conversation, "messages">> | null = null;
		while ((conversation = await allConversations.tryNext())) {
			const messages = conversation.messages.map((message) => {
				const files = (message.files as string[] | undefined)?.map<MessageFile>((file) => {
					// File is already in the new format
					if (typeof file !== "string") return file;

					// File was a hash pointing to a file in the bucket
					if (file.length === 64) {
						return {
							type: "hash",
							name: "unknown.jpg",
							value: file,
							mime: "image/jpeg",
						};
					}
					// File was a base64 string
					else {
						return {
							type: "base64",
							name: "unknown.jpg",
							value: file,
							mime: "image/jpeg",
						};
					}
				});

				return {
					...message,
					files,
				};
			});

			// Set the new messages array
			await collections.conversations.updateOne({ _id: conversation._id }, { $set: { messages } });
		}

		return true;
	},
	runEveryTime: false,
};

export default updateMessageFiles;

</src/lib/migrations/routines/05-update-message-files.ts>

<src/lib/migrations/routines/index.ts>
import type { ObjectId } from "mongodb";

import updateSearchAssistant from "./01-update-search-assistants";
import updateAssistantsModels from "./02-update-assistants-models";
import type { Database } from "$lib/server/database";
import addToolsToSettings from "./03-add-tools-in-settings";
import updateMessageUpdates from "./04-update-message-updates";
import updateMessageFiles from "./05-update-message-files";
import trimMessageUpdates from "./06-trim-message-updates";
import resetTools from "./07-reset-tools-in-settings";

export interface Migration {
	_id: ObjectId;
	name: string;
	up: (client: Database) => Promise<boolean>;
	down?: (client: Database) => Promise<boolean>;
	runForFreshInstall?: "only" | "never"; // leave unspecified to run for both
	runForHuggingChat?: "only" | "never"; // leave unspecified to run for both
	runEveryTime?: boolean;
}

export const migrations: Migration[] = [
	updateSearchAssistant,
	updateAssistantsModels,
	addToolsToSettings,
	updateMessageUpdates,
	updateMessageFiles,
	trimMessageUpdates,
	resetTools,
];

</src/lib/migrations/routines/index.ts>

<src/lib/migrations/migrations.spec.ts>
import { afterEach, assert, describe, expect, it } from "vitest";
import { migrations } from "./routines";
import { acquireLock, isDBLocked, refreshLock, releaseLock } from "./lock";
import { collections } from "$lib/server/database";

const LOCK_KEY = "migrations.test";

describe("migrations", () => {
	it("should not have duplicates guid", async () => {
		const guids = migrations.map((m) => m._id.toString());
		const uniqueGuids = [...new Set(guids)];
		expect(uniqueGuids.length).toBe(guids.length);
	});

	it("should acquire only one lock on DB", async () => {
		const results = await Promise.all(new Array(1000).fill(0).map(() => acquireLock(LOCK_KEY)));
		const locks = results.filter((r) => r);

		const semaphores = await collections.semaphores.find({}).toArray();

		expect(locks.length).toBe(1);
		expect(semaphores).toBeDefined();
		expect(semaphores.length).toBe(1);
		expect(semaphores?.[0].key).toBe(LOCK_KEY);
	});

	it("should read the lock correctly", async () => {
		const lockId = await acquireLock(LOCK_KEY);
		assert(lockId);
		expect(await isDBLocked(LOCK_KEY)).toBe(true);
		expect(!!(await acquireLock(LOCK_KEY))).toBe(false);
		await releaseLock(LOCK_KEY, lockId);
		expect(await isDBLocked(LOCK_KEY)).toBe(false);
	});

	it("should refresh the lock", async () => {
		const lockId = await acquireLock(LOCK_KEY);

		assert(lockId);

		// get the updatedAt time

		const updatedAtInitially = (await collections.semaphores.findOne({}))?.updatedAt;

		await refreshLock(LOCK_KEY, lockId);

		const updatedAtAfterRefresh = (await collections.semaphores.findOne({}))?.updatedAt;

		expect(updatedAtInitially).toBeDefined();
		expect(updatedAtAfterRefresh).toBeDefined();
		expect(updatedAtInitially).not.toBe(updatedAtAfterRefresh);
	});
});

afterEach(async () => {
	await collections.semaphores.deleteMany({});
	await collections.migrationResults.deleteMany({});
});

</src/lib/migrations/migrations.spec.ts>

<src/lib/types/ConvSidebar.ts>
export interface ConvSidebar {
	id: string;
	title: string;
	updatedAt: Date;
	model?: string;
	assistantId?: string;
	avatarHash?: string;
}

</src/lib/types/ConvSidebar.ts>

<src/lib/types/MessageUpdate.ts>
import type { WebSearchSource } from "$lib/types/WebSearch";
import type { ToolCall, ToolResult } from "$lib/types/Tool";

export type MessageUpdate =
	| MessageStatusUpdate
	| MessageTitleUpdate
	| MessageToolUpdate
	| MessageWebSearchUpdate
	| MessageStreamUpdate
	| MessageFileUpdate
	| MessageFinalAnswerUpdate;

export enum MessageUpdateType {
	Status = "status",
	Title = "title",
	Tool = "tool",
	WebSearch = "webSearch",
	Stream = "stream",
	File = "file",
	FinalAnswer = "finalAnswer",
}

// Status
export enum MessageUpdateStatus {
	Started = "started",
	Error = "error",
	Finished = "finished",
	KeepAlive = "keepAlive",
}
export interface MessageStatusUpdate {
	type: MessageUpdateType.Status;
	status: MessageUpdateStatus;
	message?: string;
}

// Web search
export enum MessageWebSearchUpdateType {
	Update = "update",
	Error = "error",
	Sources = "sources",
	Finished = "finished",
}
export interface BaseMessageWebSearchUpdate<TSubType extends MessageWebSearchUpdateType> {
	type: MessageUpdateType.WebSearch;
	subtype: TSubType;
}
export interface MessageWebSearchErrorUpdate
	extends BaseMessageWebSearchUpdate<MessageWebSearchUpdateType.Error> {
	message: string;
	args?: string[];
}
export interface MessageWebSearchGeneralUpdate
	extends BaseMessageWebSearchUpdate<MessageWebSearchUpdateType.Update> {
	message: string;
	args?: string[];
}
export interface MessageWebSearchSourcesUpdate
	extends BaseMessageWebSearchUpdate<MessageWebSearchUpdateType.Sources> {
	message: string;
	sources: WebSearchSource[];
}
export type MessageWebSearchFinishedUpdate =
	BaseMessageWebSearchUpdate<MessageWebSearchUpdateType.Finished>;
export type MessageWebSearchUpdate =
	| MessageWebSearchErrorUpdate
	| MessageWebSearchGeneralUpdate
	| MessageWebSearchSourcesUpdate
	| MessageWebSearchFinishedUpdate;

// Tool
export enum MessageToolUpdateType {
	/** A request to call a tool alongside it's parameters */
	Call = "call",
	/** The result of a tool call */
	Result = "result",
	/** Error while running tool */
	Error = "error",
	/** ETA update */
	ETA = "eta",
}

interface MessageToolBaseUpdate<TSubType extends MessageToolUpdateType> {
	type: MessageUpdateType.Tool;
	subtype: TSubType;
	uuid: string;
}
export interface MessageToolCallUpdate extends MessageToolBaseUpdate<MessageToolUpdateType.Call> {
	call: ToolCall;
}
export interface MessageToolResultUpdate
	extends MessageToolBaseUpdate<MessageToolUpdateType.Result> {
	result: ToolResult;
}
export interface MessageToolErrorUpdate extends MessageToolBaseUpdate<MessageToolUpdateType.Error> {
	message: string;
}

export interface MessageToolETAUpdate extends MessageToolBaseUpdate<MessageToolUpdateType.ETA> {
	eta: number;
}

export type MessageToolUpdate =
	| MessageToolCallUpdate
	| MessageToolResultUpdate
	| MessageToolErrorUpdate
	| MessageToolETAUpdate;

// Everything else
export interface MessageTitleUpdate {
	type: MessageUpdateType.Title;
	title: string;
}
export interface MessageStreamUpdate {
	type: MessageUpdateType.Stream;
	token: string;
}
export interface MessageFileUpdate {
	type: MessageUpdateType.File;
	name: string;
	sha: string;
	mime: string;
}
export interface MessageFinalAnswerUpdate {
	type: MessageUpdateType.FinalAnswer;
	text: string;
	interrupted: boolean;
}

</src/lib/types/MessageUpdate.ts>

<src/lib/types/MigrationResult.ts>
import type { ObjectId } from "mongodb";

export interface MigrationResult {
	_id: ObjectId;
	name: string;
	status: "success" | "failure" | "ongoing";
}

</src/lib/types/MigrationResult.ts>

<src/lib/types/Report.ts>
import type { ObjectId } from "mongodb";
import type { User } from "./User";
import type { Assistant } from "./Assistant";
import type { Timestamps } from "./Timestamps";

export interface Report extends Timestamps {
	_id: ObjectId;
	createdBy: User["_id"] | string;
	object: "assistant" | "tool";
	contentId: Assistant["_id"];
	reason?: string;
}

</src/lib/types/Report.ts>

<src/lib/types/ConversationStats.ts>
import type { Timestamps } from "./Timestamps";

export interface ConversationStats extends Timestamps {
	date: {
		at: Date;
		span: "day" | "week" | "month";
		field: "updatedAt" | "createdAt";
	};
	type: "conversation" | "message";
	/**  _id => number of conversations/messages in the month */
	distinct: "sessionId" | "userId" | "userOrSessionId" | "_id";
	count: number;
}

</src/lib/types/ConversationStats.ts>

<src/lib/types/Tool.ts>
import type { ObjectId } from "mongodb";
import type { User } from "./User";
import type { Timestamps } from "./Timestamps";
import type { BackendToolContext } from "$lib/server/tools";
import type { MessageUpdate } from "./MessageUpdate";
import { z } from "zod";

export const ToolColor = z.union([
	z.literal("purple"),
	z.literal("blue"),
	z.literal("green"),
	z.literal("yellow"),
	z.literal("red"),
]);

export const ToolIcon = z.union([
	z.literal("wikis"),
	z.literal("tools"),
	z.literal("camera"),
	z.literal("code"),
	z.literal("email"),
	z.literal("cloud"),
	z.literal("terminal"),
	z.literal("game"),
	z.literal("chat"),
	z.literal("speaker"),
	z.literal("video"),
]);

export const ToolOutputComponents = z
	.string()
	.toLowerCase()
	.pipe(
		z.union([
			z.literal("textbox"),
			z.literal("markdown"),
			z.literal("image"),
			z.literal("gallery"),
			z.literal("number"),
			z.literal("audio"),
			z.literal("video"),
			z.literal("file"),
			z.literal("json"),
		])
	);

export type ToolOutputComponents = z.infer<typeof ToolOutputComponents>;

export type ToolLogoColor = z.infer<typeof ToolColor>;
export type ToolLogoIcon = z.infer<typeof ToolIcon>;

export type ToolIOType = "str" | "int" | "float" | "bool" | "file";

export type ToolInputRequired = {
	paramType: "required";
	name: string;
	description?: string;
};

export type ToolInputOptional = {
	paramType: "optional";
	name: string;
	description?: string;
	default: string | number | boolean;
};

export type ToolInputFixed = {
	paramType: "fixed";
	name: string;
	value: string | number | boolean;
};

type ToolInputBase = ToolInputRequired | ToolInputOptional | ToolInputFixed;

export type ToolInputFile = ToolInputBase & {
	type: "file";
	mimeTypes: string;
};

export type ToolInputSimple = ToolInputBase & {
	type: Exclude<ToolIOType, "file">;
};

export type ToolInput = ToolInputFile | ToolInputSimple;

export interface BaseTool {
	_id: ObjectId;

	name: string; // name that will be shown to the AI

	baseUrl?: string; // namespace for the tool
	endpoint: string | null; // endpoint to call in gradio, if null we expect to override this function in code
	outputComponent: string | null; // Gradio component type to use for the output
	outputComponentIdx: number | null; // index of the output component

	inputs: Array<ToolInput>;
	showOutput: boolean; // show output in chat or not

	call: BackendCall;

	// for displaying in the UI
	displayName: string;
	color: ToolLogoColor;
	icon: ToolLogoIcon;
	description: string;
}

export interface ConfigTool extends BaseTool {
	type: "config";
	isOnByDefault?: true;
	isLocked?: true;
	isHidden?: true;
}

export interface CommunityTool extends BaseTool, Timestamps {
	type: "community";

	createdById: User["_id"] | string; // user id or session
	createdByName?: User["username"];

	// used to compute popular & trending
	useCount: number;
	last24HoursUseCount: number;

	featured: boolean;
	searchTokens: string[];
}

// no call function in db
export type CommunityToolDB = Omit<CommunityTool, "call">;

export type CommunityToolEditable = Omit<
	CommunityToolDB,
	| "_id"
	| "useCount"
	| "last24HoursUseCount"
	| "createdById"
	| "createdByName"
	| "featured"
	| "searchTokens"
	| "type"
	| "createdAt"
	| "updatedAt"
>;

export type Tool = ConfigTool | CommunityTool;

export type ToolFront = Pick<Tool, "type" | "name" | "displayName" | "description"> & {
	_id: string;
	isOnByDefault: boolean;
	isLocked: boolean;
	mimeTypes: string[];
	timeToUseMS?: number;
};

export enum ToolResultStatus {
	Success = "success",
	Error = "error",
}
export interface ToolResultSuccess {
	status: ToolResultStatus.Success;
	call: ToolCall;
	outputs: Record<string, unknown>[];
	display?: boolean;
}
export interface ToolResultError {
	status: ToolResultStatus.Error;
	call: ToolCall;
	message: string;
	display?: boolean;
}
export type ToolResult = ToolResultSuccess | ToolResultError;

export interface ToolCall {
	name: string;
	parameters: Record<string, string | number | boolean>;
}

export type BackendCall = (
	params: Record<string, string | number | boolean>,
	context: BackendToolContext,
	uuid: string
) => AsyncGenerator<MessageUpdate, Omit<ToolResultSuccess, "status" | "call" | "type">, undefined>;

</src/lib/types/Tool.ts>

<src/lib/types/MessageEvent.ts>
import type { Session } from "./Session";
import type { Timestamps } from "./Timestamps";
import type { User } from "./User";

export interface MessageEvent extends Pick<Timestamps, "createdAt"> {
	userId: User["_id"] | Session["sessionId"];
	ip?: string;
}

</src/lib/types/MessageEvent.ts>

<src/lib/types/Template.ts>
import type { Message } from "./Message";
import type { Tool, ToolResult } from "./Tool";

export type ChatTemplateInput = {
	messages: Pick<Message, "from" | "content" | "files">[];
	preprompt?: string;
	tools?: Tool[];
	toolResults?: ToolResult[];
	continueMessage?: boolean;
};

</src/lib/types/Template.ts>

<src/lib/types/Settings.ts>
import { defaultModel } from "$lib/server/models";
import type { Assistant } from "./Assistant";
import type { Timestamps } from "./Timestamps";
import type { User } from "./User";

export interface Settings extends Timestamps {
	userId?: User["_id"];
	sessionId?: string;

	/**
	 * Note: Only conversations with this settings explicitly set to true should be shared.
	 *
	 * This setting is explicitly set to true when users accept the ethics modal.
	 * */
	shareConversationsWithModelAuthors: boolean;
	ethicsModalAcceptedAt: Date | null;
	activeModel: string;
	hideEmojiOnSidebar?: boolean;

	// model name and system prompts
	customPrompts?: Record<string, string>;

	assistants?: Assistant["_id"][];
	tools?: string[];
	disableStream: boolean;
}

export type SettingsEditable = Omit<Settings, "ethicsModalAcceptedAt" | "createdAt" | "updatedAt">;
// TODO: move this to a constant file along with other constants
export const DEFAULT_SETTINGS = {
	shareConversationsWithModelAuthors: true,
	activeModel: defaultModel.id,
	hideEmojiOnSidebar: false,
	customPrompts: {},
	assistants: [],
	tools: [],
	disableStream: false,
} satisfies SettingsEditable;

</src/lib/types/Settings.ts>

<src/lib/types/WebSearch.ts>
import type { ObjectId } from "mongodb";
import type { Conversation } from "./Conversation";
import type { Timestamps } from "./Timestamps";
import type { HeaderElement } from "$lib/server/websearch/markdown/types";

export interface WebSearch extends Timestamps {
	_id?: ObjectId;
	convId?: Conversation["_id"];

	prompt: string;

	searchQuery: string;
	results: WebSearchSource[];
	contextSources: WebSearchUsedSource[];
}

export interface WebSearchSource {
	title?: string;
	link: string;
}
export interface WebSearchScrapedSource extends WebSearchSource {
	page: WebSearchPage;
}
export interface WebSearchPage {
	title: string;
	siteName?: string;
	author?: string;
	description?: string;
	createdAt?: string;
	modifiedAt?: string;
	markdownTree: HeaderElement;
}

export interface WebSearchUsedSource extends WebSearchScrapedSource {
	context: string;
}

export type WebSearchMessageSources = {
	type: "sources";
	sources: WebSearchSource[];
};

// eslint-disable-next-line no-shadow
export enum WebSearchProvider {
	GOOGLE = "Google",
	YOU = "You.com",
	SEARXNG = "SearXNG",
	BING = "Bing",
}

</src/lib/types/WebSearch.ts>

<src/lib/types/Model.ts>
import type { BackendModel } from "$lib/server/models";

export type Model = Pick<
	BackendModel,
	| "id"
	| "name"
	| "displayName"
	| "websiteUrl"
	| "datasetName"
	| "promptExamples"
	| "parameters"
	| "description"
	| "logoUrl"
	| "modelUrl"
	| "tokenizer"
	| "datasetUrl"
	| "preprompt"
	| "multimodal"
	| "unlisted"
	| "tools"
>;

</src/lib/types/Model.ts>

<src/lib/types/AbortedGeneration.ts>
// Ideally shouldn't be needed, see https://github.com/huggingface/chat-ui/pull/88#issuecomment-1523173850

import type { Conversation } from "./Conversation";
import type { Timestamps } from "./Timestamps";

export interface AbortedGeneration extends Timestamps {
	conversationId: Conversation["_id"];
}

</src/lib/types/AbortedGeneration.ts>

<src/lib/types/Message.ts>
import type { MessageUpdate } from "./MessageUpdate";
import type { Timestamps } from "./Timestamps";
import type { WebSearch } from "./WebSearch";
import type { v4 } from "uuid";

export type Message = Partial<Timestamps> & {
	from: "user" | "assistant" | "system";
	id: ReturnType<typeof v4>;
	content: string;
	updates?: MessageUpdate[];
	webSearchId?: WebSearch["_id"]; // legacy version
	webSearch?: WebSearch;
	score?: -1 | 0 | 1;
	/**
	 * Either contains the base64 encoded image data
	 * or the hash of the file stored on the server
	 **/
	files?: MessageFile[];
	interrupted?: boolean;

	// needed for conversation trees
	ancestors?: Message["id"][];

	// goes one level deep
	children?: Message["id"][];

	// the index of the current child in the children array of the message if the message has more than one child
	currentChildIndex?: number;
};

export type MessageFile = {
	type: "hash" | "base64";
	name: string;
	value: string;
	mime: string;
};

</src/lib/types/Message.ts>

<src/lib/types/Session.ts>
import type { ObjectId } from "bson";
import type { Timestamps } from "./Timestamps";
import type { User } from "./User";

export interface Session extends Timestamps {
	_id: ObjectId;
	sessionId: string;
	userId: User["_id"];
	userAgent?: string;
	ip?: string;
	expiresAt: Date;
}

</src/lib/types/Session.ts>

<src/lib/types/SharedConversation.ts>
import type { Conversation } from "./Conversation";

export type SharedConversation = Pick<
	Conversation,
	| "model"
	| "embeddingModel"
	| "title"
	| "rootMessageId"
	| "messages"
	| "preprompt"
	| "assistantId"
	| "createdAt"
	| "updatedAt"
> & {
	_id: string;
	hash: string;
};

</src/lib/types/SharedConversation.ts>

<src/lib/types/Assistant.ts>
import type { ObjectId } from "mongodb";
import type { User } from "./User";
import type { Timestamps } from "./Timestamps";

export interface Assistant extends Timestamps {
	_id: ObjectId;
	createdById: User["_id"] | string; // user id or session
	createdByName?: User["username"];
	avatar?: string;
	name: string;
	description?: string;
	modelId: string;
	exampleInputs: string[];
	preprompt: string;
	userCount?: number;
	featured?: boolean;
	rag?: {
		allowAllDomains: boolean;
		allowedDomains: string[];
		allowedLinks: string[];
	};
	generateSettings?: {
		temperature?: number;
		top_p?: number;
		repetition_penalty?: number;
		top_k?: number;
	};
	dynamicPrompt?: boolean;
	searchTokens: string[];
	last24HoursCount: number;
	tools?: string[];
}

// eslint-disable-next-line no-shadow
export enum SortKey {
	POPULAR = "popular",
	TRENDING = "trending",
}

</src/lib/types/Assistant.ts>

<src/lib/types/TokenCache.ts>
import type { Timestamps } from "./Timestamps";

export interface TokenCache extends Timestamps {
	tokenHash: string; // sha256 of the bearer token
	userId: string; // the matching hf user id
}

</src/lib/types/TokenCache.ts>

<src/lib/types/Semaphore.ts>
import type { Timestamps } from "./Timestamps";

export interface Semaphore extends Timestamps {
	key: string;
}

</src/lib/types/Semaphore.ts>

<src/lib/types/Timestamps.ts>
export interface Timestamps {
	createdAt: Date;
	updatedAt: Date;
}

</src/lib/types/Timestamps.ts>

<src/lib/types/Conversation.ts>
import type { ObjectId } from "mongodb";
import type { Message } from "./Message";
import type { Timestamps } from "./Timestamps";
import type { User } from "./User";
import type { Assistant } from "./Assistant";

export interface Conversation extends Timestamps {
	_id: ObjectId;

	sessionId?: string;
	userId?: User["_id"];

	model: string;
	embeddingModel: string;

	title: string;
	rootMessageId?: Message["id"];
	messages: Message[];

	meta?: {
		fromShareId?: string;
	};

	preprompt?: string;
	assistantId?: Assistant["_id"];

	userAgent?: string;
}

</src/lib/types/Conversation.ts>

<src/lib/types/AssistantStats.ts>
import type { Timestamps } from "./Timestamps";
import type { Assistant } from "./Assistant";

export interface AssistantStats extends Timestamps {
	assistantId: Assistant["_id"];
	date: {
		at: Date;
		span: "hour";
	};
	count: number;
}

</src/lib/types/AssistantStats.ts>

<src/lib/types/User.ts>
import type { ObjectId } from "mongodb";
import type { Timestamps } from "./Timestamps";

export interface User extends Timestamps {
	_id: ObjectId;

	username?: string;
	name: string;
	email?: string;
	avatarUrl: string | undefined;
	hfUserId: string;
	isAdmin?: boolean;
	isEarlyAccess?: boolean;
}

</src/lib/types/User.ts>

<src/lib/types/UrlDependency.ts>
/* eslint-disable no-shadow */
export enum UrlDependency {
	ConversationList = "conversation:list",
	Conversation = "conversation",
}

</src/lib/types/UrlDependency.ts>

<src/lib/shareConversation.ts>
import { base } from "$app/paths";
import { ERROR_MESSAGES, error } from "$lib/stores/errors";
import { share } from "./utils/share";
import { page } from "$app/stores";
import { get } from "svelte/store";
import { getShareUrl } from "./utils/getShareUrl";
export async function shareConversation(id: string, title: string) {
	try {
		if (id.length === 7) {
			const url = get(page).url;
			await share(getShareUrl(url, id), title, true);
		} else {
			const res = await fetch(`${base}/conversation/${id}/share`, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
			});

			if (!res.ok) {
				error.set("Error while sharing conversation, try again.");
				console.error("Error while sharing conversation: " + (await res.text()));
				return;
			}

			const { url } = await res.json();
			await share(url, title, true);
		}
	} catch (err) {
		error.set(ERROR_MESSAGES.default);
		console.error(err);
	}
}

</src/lib/shareConversation.ts>

<src/lib/constants/publicSepToken.ts>
export const PUBLIC_SEP_TOKEN = "</s>";

</src/lib/constants/publicSepToken.ts>

<src/lib/stores/errors.ts>
import { writable } from "svelte/store";

export const ERROR_MESSAGES = {
	default: "Oops, something went wrong.",
	authOnly: "You have to be logged in.",
	rateLimited: "You are sending too many messages. Try again later.",
};

export const error = writable<string | null>(null);

</src/lib/stores/errors.ts>

<src/lib/stores/settings.ts>
import { browser } from "$app/environment";
import { invalidate } from "$app/navigation";
import { base } from "$app/paths";
import { UrlDependency } from "$lib/types/UrlDependency";
import type { ObjectId } from "mongodb";
import { getContext, setContext } from "svelte";
import { type Writable, writable, get } from "svelte/store";

type SettingsStore = {
	shareConversationsWithModelAuthors: boolean;
	hideEmojiOnSidebar: boolean;
	ethicsModalAccepted: boolean;
	ethicsModalAcceptedAt: Date | null;
	activeModel: string;
	customPrompts: Record<string, string>;
	recentlySaved: boolean;
	assistants: Array<ObjectId | string>;
	tools?: Array<string>;
	disableStream: boolean;
};

type SettingsStoreWritable = Writable<SettingsStore> & {
	instantSet: (settings: Partial<SettingsStore>) => Promise<void>;
};

export function useSettingsStore() {
	return getContext<SettingsStoreWritable>("settings");
}

export function createSettingsStore(initialValue: Omit<SettingsStore, "recentlySaved">) {
	const baseStore = writable({ ...initialValue, recentlySaved: false });

	let timeoutId: NodeJS.Timeout;

	async function setSettings(settings: Partial<SettingsStore>) {
		baseStore.update((s) => ({
			...s,
			...settings,
		}));

		clearTimeout(timeoutId);

		if (browser) {
			timeoutId = setTimeout(async () => {
				await fetch(`${base}/settings`, {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						...get(baseStore),
						...settings,
					}),
				});

				invalidate(UrlDependency.ConversationList);
				// set savedRecently to true for 3s
				baseStore.update((s) => ({
					...s,
					recentlySaved: true,
				}));
				setTimeout(() => {
					baseStore.update((s) => ({
						...s,
						recentlySaved: false,
					}));
				}, 3000);
				invalidate(UrlDependency.ConversationList);
			}, 300);
			// debounce server calls by 300ms
		}
	}
	async function instantSet(settings: Partial<SettingsStore>) {
		baseStore.update((s) => ({
			...s,
			...settings,
		}));

		if (browser) {
			await fetch(`${base}/settings`, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					...get(baseStore),
					...settings,
				}),
			});
			invalidate(UrlDependency.ConversationList);
		}
	}

	const newStore = {
		subscribe: baseStore.subscribe,
		set: setSettings,
		instantSet,
		update: (fn: (s: SettingsStore) => SettingsStore) => {
			setSettings(fn(get(baseStore)));
		},
	} satisfies SettingsStoreWritable;

	setContext("settings", newStore);

	return newStore;
}

</src/lib/stores/settings.ts>

<src/lib/stores/webSearchParameters.ts>
import { writable } from "svelte/store";
export interface WebSearchParameters {
	useSearch: boolean;
	nItems: number;
}
export const webSearchParameters = writable<WebSearchParameters>({
	useSearch: false,
	nItems: 5,
});

</src/lib/stores/webSearchParameters.ts>

<src/lib/stores/titleUpdate.ts>
import { writable } from "svelte/store";

export interface TitleUpdate {
	convId: string;
	title: string;
}

export default writable<TitleUpdate | null>(null);

</src/lib/stores/titleUpdate.ts>

<src/lib/stores/isAborted.ts>
import { writable } from "svelte/store";

export const isAborted = writable<boolean>(false);

</src/lib/stores/isAborted.ts>

<src/lib/stores/pendingMessage.ts>
import { writable } from "svelte/store";

export const pendingMessage = writable<
	| {
			content: string;
			files: File[];
	  }
	| undefined
>();

</src/lib/stores/pendingMessage.ts>

<src/lib/stores/convTree.ts>
import type { Message } from "$lib/types/Message";
import { getContext, setContext } from "svelte";
import { writable, type Writable } from "svelte/store";

// used to store the id of the message that is the currently displayed leaf of the conversation tree
// (that is the last message in the current branch of the conversation tree)

interface ConvTreeStore {
	leaf: Message["id"] | null;
	editing: Message["id"] | null;
}

export function useConvTreeStore() {
	return getContext<Writable<ConvTreeStore>>("convTreeStore");
}

export function createConvTreeStore() {
	const convTreeStore = writable<ConvTreeStore>({
		leaf: null,
		editing: null,
	});
	setContext("convTreeStore", convTreeStore);

	return convTreeStore;
}

</src/lib/stores/convTree.ts>

<src/lib/buildPrompt.ts>
import type { EndpointParameters } from "./server/endpoints/endpoints";
import type { BackendModel } from "./server/models";
import type { Tool, ToolResult } from "./types/Tool";

type buildPromptOptions = Pick<EndpointParameters, "messages" | "preprompt" | "continueMessage"> & {
	model: BackendModel;
	tools?: Tool[];
	toolResults?: ToolResult[];
};

export async function buildPrompt({
	messages,
	model,
	preprompt,
	continueMessage,
	tools,
	toolResults,
}: buildPromptOptions): Promise<string> {
	const filteredMessages = messages;

	if (filteredMessages[0].from === "system" && preprompt) {
		filteredMessages[0].content = preprompt;
	}

	let prompt = model
		.chatPromptRender({
			messages: filteredMessages,
			preprompt,
			tools,
			toolResults,
			continueMessage,
		})
		// Not super precise, but it's truncated in the model's backend anyway
		.split(" ")
		.slice(-(model.parameters?.truncate ?? 0))
		.join(" ");

	if (continueMessage && model.parameters?.stop) {
		let trimmedPrompt = prompt.trimEnd();
		let hasRemovedStop = true;
		while (hasRemovedStop) {
			hasRemovedStop = false;
			for (const stopToken of model.parameters.stop) {
				if (trimmedPrompt.endsWith(stopToken)) {
					trimmedPrompt = trimmedPrompt.slice(0, -stopToken.length);
					hasRemovedStop = true;
					break;
				}
			}
			trimmedPrompt = trimmedPrompt.trimEnd();
		}
		prompt = trimmedPrompt;
	}

	return prompt;
}

</src/lib/buildPrompt.ts>

<src/lib/server/sentenceSimilarity.ts>
import { dot } from "@huggingface/transformers";
import type { EmbeddingBackendModel } from "$lib/server/embeddingModels";
import type { Embedding } from "$lib/server/embeddingEndpoints/embeddingEndpoints";

// see here: https://github.com/nmslib/hnswlib/blob/359b2ba87358224963986f709e593d799064ace6/README.md?plain=1#L34
export function innerProduct(embeddingA: Embedding, embeddingB: Embedding) {
	return 1.0 - dot(embeddingA, embeddingB);
}

export async function getSentenceSimilarity(
	embeddingModel: EmbeddingBackendModel,
	query: string,
	sentences: string[]
): Promise<{ distance: number; embedding: Embedding; idx: number }[]> {
	const inputs = [
		`${embeddingModel.preQuery}${query}`,
		...sentences.map((sentence) => `${embeddingModel.prePassage}${sentence}`),
	];

	const embeddingEndpoint = await embeddingModel.getEndpoint();
	const output = await embeddingEndpoint({ inputs }).catch((err) => {
		throw Error("Failed to generate embeddings for sentence similarity", { cause: err });
	});

	const queryEmbedding: Embedding = output[0];
	const sentencesEmbeddings: Embedding[] = output.slice(1);

	return sentencesEmbeddings.map((sentenceEmbedding, idx) => ({
		distance: innerProduct(queryEmbedding, sentenceEmbedding),
		embedding: sentenceEmbedding,
		idx,
	}));
}

</src/lib/server/sentenceSimilarity.ts>

<src/lib/server/embeddingModels.ts>
import { env } from "$env/dynamic/private";

import { z } from "zod";
import { sum } from "$lib/utils/sum";
import {
	embeddingEndpoints,
	embeddingEndpointSchema,
	type EmbeddingEndpoint,
} from "$lib/server/embeddingEndpoints/embeddingEndpoints";
import { embeddingEndpointTransformersJS } from "$lib/server/embeddingEndpoints/transformersjs/embeddingEndpoints";

import JSON5 from "json5";

const modelConfig = z.object({
	/** Used as an identifier in DB */
	id: z.string().optional(),
	/** Used to link to the model page, and for inference */
	name: z.string().min(1),
	displayName: z.string().min(1).optional(),
	description: z.string().min(1).optional(),
	websiteUrl: z.string().url().optional(),
	modelUrl: z.string().url().optional(),
	endpoints: z.array(embeddingEndpointSchema).nonempty(),
	chunkCharLength: z.number().positive(),
	maxBatchSize: z.number().positive().optional(),
	preQuery: z.string().default(""),
	prePassage: z.string().default(""),
});

// Default embedding model for backward compatibility
const rawEmbeddingModelJSON =
	env.TEXT_EMBEDDING_MODELS ||
	`[
	{
	  "name": "Xenova/gte-small",
	  "chunkCharLength": 512,
	  "endpoints": [
		{ "type": "transformersjs" }
	  ]
	}
]`;

const embeddingModelsRaw = z.array(modelConfig).parse(JSON5.parse(rawEmbeddingModelJSON));

const processEmbeddingModel = async (m: z.infer<typeof modelConfig>) => ({
	...m,
	id: m.id || m.name,
});

const addEndpoint = (m: Awaited<ReturnType<typeof processEmbeddingModel>>) => ({
	...m,
	getEndpoint: async (): Promise<EmbeddingEndpoint> => {
		if (!m.endpoints) {
			return embeddingEndpointTransformersJS({
				type: "transformersjs",
				weight: 1,
				model: m,
			});
		}

		const totalWeight = sum(m.endpoints.map((e) => e.weight));

		let random = Math.random() * totalWeight;

		for (const endpoint of m.endpoints) {
			if (random < endpoint.weight) {
				const args = { ...endpoint, model: m };

				switch (args.type) {
					case "tei":
						return embeddingEndpoints.tei(args);
					case "transformersjs":
						return embeddingEndpoints.transformersjs(args);
					case "openai":
						return embeddingEndpoints.openai(args);
					case "hfapi":
						return embeddingEndpoints.hfapi(args);
					default:
						throw new Error(`Unknown endpoint type: ${args}`);
				}
			}

			random -= endpoint.weight;
		}

		throw new Error(`Failed to select embedding endpoint`);
	},
});

export const embeddingModels = await Promise.all(
	embeddingModelsRaw.map((e) => processEmbeddingModel(e).then(addEndpoint))
);

export const defaultEmbeddingModel = embeddingModels[0];

const validateEmbeddingModel = (_models: EmbeddingBackendModel[], key: "id" | "name") => {
	return z.enum([_models[0][key], ..._models.slice(1).map((m) => m[key])]);
};

export const validateEmbeddingModelById = (_models: EmbeddingBackendModel[]) => {
	return validateEmbeddingModel(_models, "id");
};

export const validateEmbeddingModelByName = (_models: EmbeddingBackendModel[]) => {
	return validateEmbeddingModel(_models, "name");
};

export type EmbeddingBackendModel = typeof defaultEmbeddingModel;

</src/lib/server/embeddingModels.ts>

<src/lib/server/tools/outputs.ts>
import type { ToolIOType, ToolOutputComponents } from "$lib/types/Tool";

export const ToolOutputPaths: Record<
	ToolOutputComponents,
	{
		type: ToolIOType;
		path: string;
	}
> = {
	textbox: {
		type: "str",
		path: "$",
	},
	markdown: {
		type: "str",
		path: "$",
	},
	number: {
		type: "float",
		path: "$",
	},
	image: {
		type: "file",
		path: "$.url",
	},
	gallery: {
		type: "file",
		path: "$[*].image.url",
	},
	audio: {
		type: "file",
		path: "$.url",
	},
	video: {
		type: "file",
		path: "$.video.url",
	},
	file: {
		type: "file",
		path: "$.url",
	},
	json: {
		type: "str",
		path: "$",
	},
};

export const isValidOutputComponent = (
	outputComponent: string
): outputComponent is keyof typeof ToolOutputPaths => {
	return Object.keys(ToolOutputPaths).includes(outputComponent);
};

</src/lib/server/tools/outputs.ts>

<src/lib/server/tools/web/search.ts>
import type { ConfigTool } from "$lib/types/Tool";
import { ObjectId } from "mongodb";
import { runWebSearch } from "../../websearch/runWebSearch";

const websearch: ConfigTool = {
	_id: new ObjectId("00000000000000000000000A"),
	type: "config",
	description: "Search the web for answers to the user's query",
	color: "blue",
	icon: "wikis",
	displayName: "Web Search",
	name: "websearch",
	endpoint: null,
	inputs: [
		{
			name: "query",
			type: "str",
			description:
				"A search query which will be used to fetch the most relevant snippets regarding the user's query",
			paramType: "required",
		},
	],
	outputComponent: null,
	outputComponentIdx: null,
	showOutput: false,
	async *call({ query }, { conv, assistant, messages }) {
		const webSearchToolResults = yield* runWebSearch(conv, messages, assistant?.rag, String(query));
		const chunks = webSearchToolResults?.contextSources
			.map(({ context }) => context)
			.join("\n------------\n");

		return {
			outputs: [{ websearch: chunks }],
			display: false,
		};
	},
};

export default websearch;

</src/lib/server/tools/web/search.ts>

<src/lib/server/tools/web/url.ts>
import { stringifyMarkdownElementTree } from "$lib/server/websearch/markdown/utils/stringify";
import { scrapeUrl } from "$lib/server/websearch/scrape/scrape";
import type { ConfigTool } from "$lib/types/Tool";
import { ObjectId } from "mongodb";

const fetchUrl: ConfigTool = {
	_id: new ObjectId("00000000000000000000000B"),
	type: "config",
	description: "Fetch the contents of a URL",
	color: "blue",
	icon: "cloud",
	displayName: "Fetch URL",
	name: "fetchUrl",
	endpoint: null,
	inputs: [
		{
			name: "url",
			type: "str",
			description: "The URL of the webpage to fetch",
			paramType: "required",
		},
	],
	outputComponent: null,
	outputComponentIdx: null,
	showOutput: false,
	async *call({ url }) {
		const blocks = String(url).split("\n");
		const urlStr = blocks[blocks.length - 1];

		const { title, markdownTree } = await scrapeUrl(urlStr, Infinity);

		return {
			outputs: [{ title, text: stringifyMarkdownElementTree(markdownTree) }],
			display: false,
		};
	},
};

export default fetchUrl;

</src/lib/server/tools/web/url.ts>

<src/lib/server/tools/calculator.ts>
import type { ConfigTool } from "$lib/types/Tool";
import { ObjectId } from "mongodb";
import vm from "node:vm";

const calculator: ConfigTool = {
	_id: new ObjectId("00000000000000000000000C"),
	type: "config",
	description: "Calculate the result of a mathematical expression",
	color: "blue",
	icon: "code",
	displayName: "Calculator",
	name: "calculator",
	endpoint: null,
	inputs: [
		{
			name: "equation",
			type: "str",
			description:
				"A mathematical expression to be evaluated. The result of the expression will be returned.",
			paramType: "required",
		},
	],
	outputComponent: null,
	outputComponentIdx: null,
	showOutput: false,
	async *call({ equation }) {
		try {
			const blocks = String(equation).split("\n");
			const query = blocks[blocks.length - 1].replace(/[^-()\d/*+.]/g, "");

			return {
				outputs: [{ calculator: `${query} = ${vm.runInNewContext(query)}` }],
			};
		} catch (cause) {
			throw new Error("Invalid expression", { cause });
		}
	},
};

export default calculator;

</src/lib/server/tools/calculator.ts>

<src/lib/server/tools/utils.ts>
import { env } from "$env/dynamic/private";
import { Client } from "@gradio/client";
import { SignJWT } from "jose";
import JSON5 from "json5";
import {
	MessageToolUpdateType,
	MessageUpdateType,
	type MessageToolUpdate,
} from "$lib/types/MessageUpdate";
import { logger } from "$lib/server/logger";
export async function* callSpace<TInput extends unknown[], TOutput extends unknown[]>(
	name: string,
	func: string,
	parameters: TInput,
	ipToken: string | undefined,
	uuid: string
): AsyncGenerator<MessageToolUpdate, TOutput, undefined> {
	class CustomClient extends Client {
		fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {
			init = init || {};
			init.headers = {
				...(init.headers || {}),
				...(ipToken ? { "X-IP-Token": ipToken } : {}),
			};
			return super.fetch(input, init);
		}
	}
	const client = await CustomClient.connect(name, {
		hf_token: (env.HF_TOKEN ?? env.HF_ACCESS_TOKEN) as unknown as `hf_${string}`,
		events: ["status", "data"],
	});

	const job = client.submit(func, parameters);

	let data;
	for await (const output of job) {
		if (output.type === "data") {
			data = output.data as TOutput;
		}
		if (output.type === "status") {
			if (output.stage === "error") {
				logger.error(output.message);
				throw new Error(output.message);
			}
			if (output.eta) {
				yield {
					type: MessageUpdateType.Tool,
					subtype: MessageToolUpdateType.ETA,
					eta: output.eta,
					uuid,
				};
			}
		}
	}

	if (!data) {
		throw new Error("No data found in tool call");
	}

	return data;
}

export async function getIpToken(ip: string, username?: string) {
	const ipTokenSecret = env.IP_TOKEN_SECRET;
	if (!ipTokenSecret) {
		return;
	}
	return await new SignJWT({ ip, user: username })
		.setProtectedHeader({ alg: "HS256" })
		.setIssuedAt()
		.setExpirationTime("1m")
		.sign(new TextEncoder().encode(ipTokenSecret));
}

export { toolHasName } from "$lib/utils/tools";

export async function extractJson(text: string): Promise<unknown[]> {
	const calls: string[] = [];

	let codeBlocks = Array.from(text.matchAll(/```json\n(.*?)```/gs))
		.map(([, block]) => block)
		// remove trailing comma
		.map((block) => block.trim().replace(/,$/, ""));

	// if there is no code block, try to find the first json object
	// by trimming the string and trying to parse with JSON5
	if (codeBlocks.length === 0) {
		const start = [text.indexOf("["), text.indexOf("{")]
			.filter((i) => i !== -1)
			.reduce((a, b) => Math.max(a, b), -Infinity);
		const end = [text.lastIndexOf("]"), text.lastIndexOf("}")]
			.filter((i) => i !== -1)
			.reduce((a, b) => Math.min(a, b), Infinity);

		if (start === -Infinity || end === Infinity) {
			return [""];
		}

		const json = text.substring(start, end + 1);
		codeBlocks = [json];
	}

	// grab only the capture group from the regex match
	for (const block of codeBlocks) {
		// make it an array if it's not already
		let call = JSON5.parse(block);
		if (!Array.isArray(call)) {
			call = [call];
		}
		calls.push(call);
	}
	return calls.flat();
}

</src/lib/server/tools/utils.ts>

<src/lib/server/tools/directlyAnswer.ts>
import type { ConfigTool } from "$lib/types/Tool";
import { ObjectId } from "mongodb";

const directlyAnswer: ConfigTool = {
	_id: new ObjectId("00000000000000000000000D"),
	type: "config",
	description: "Answer the user's query directly",
	color: "blue",
	icon: "chat",
	displayName: "Directly Answer",
	isOnByDefault: true,
	isLocked: true,
	isHidden: true,
	name: "directlyAnswer",
	endpoint: null,
	inputs: [],
	outputComponent: null,
	outputComponentIdx: null,
	showOutput: false,
	async *call() {
		return {
			outputs: [],
			display: false,
		};
	},
};

export default directlyAnswer;

</src/lib/server/tools/directlyAnswer.ts>

<src/lib/server/tools/index.ts>
import { MessageUpdateType } from "$lib/types/MessageUpdate";
import {
	ToolColor,
	ToolIcon,
	ToolOutputComponents,
	type BackendCall,
	type BaseTool,
	type ConfigTool,
	type ToolInput,
} from "$lib/types/Tool";
import type { TextGenerationContext } from "../textGeneration/types";

import { z } from "zod";
import JSON5 from "json5";
import { env } from "$env/dynamic/private";

import jp from "jsonpath";
import calculator from "./calculator";
import directlyAnswer from "./directlyAnswer";
import fetchUrl from "./web/url";
import websearch from "./web/search";
import { callSpace, getIpToken } from "./utils";
import { uploadFile } from "../files/uploadFile";
import type { MessageFile } from "$lib/types/Message";
import { sha256 } from "$lib/utils/sha256";
import { ObjectId } from "mongodb";
import { isValidOutputComponent, ToolOutputPaths } from "./outputs";
import { downloadFile } from "../files/downloadFile";
import { fileTypeFromBlob } from "file-type";

export type BackendToolContext = Pick<
	TextGenerationContext,
	"conv" | "messages" | "assistant" | "ip" | "username"
> & { preprompt?: string };

const IOType = z.union([z.literal("str"), z.literal("int"), z.literal("float"), z.literal("bool")]);

const toolInputBaseSchema = z.union([
	z.object({
		name: z.string().min(1).max(80),
		description: z.string().max(200).optional(),
		paramType: z.literal("required"),
	}),
	z.object({
		name: z.string().min(1).max(80),
		description: z.string().max(200).optional(),
		paramType: z.literal("optional"),
		default: z
			.union([z.string().max(300), z.number(), z.boolean(), z.undefined()])
			.transform((val) => (val === undefined ? "" : val)),
	}),
	z.object({
		name: z.string().min(1).max(80),
		paramType: z.literal("fixed"),
		value: z
			.union([z.string().max(300), z.number(), z.boolean(), z.undefined()])
			.transform((val) => (val === undefined ? "" : val)),
	}),
]);

const toolInputSchema = toolInputBaseSchema.and(
	z.object({ type: IOType }).or(
		z.object({
			type: z.literal("file"),
			mimeTypes: z.string().min(1),
		})
	)
);

export const editableToolSchema = z
	.object({
		name: z
			.string()
			.regex(/^[a-zA-Z_][a-zA-Z0-9_]*$/) // only allow letters, numbers, and underscores, and start with a letter or underscore
			.min(1)
			.max(40),
		// only allow huggingface spaces either through namespace or direct URLs
		baseUrl: z.union([
			z.string().regex(/^[^/]+\/[^/]+$/),
			z
				.string()
				.regex(/^https:\/\/huggingface\.co\/spaces\/[a-zA-Z0-9-]+\/[a-zA-Z0-9-]+$/)
				.transform((url) => url.split("/").slice(-2).join("/")),
		]),
		endpoint: z.string().min(1).max(100),
		inputs: z.array(toolInputSchema),
		outputComponent: z.string().min(1).max(100),
		showOutput: z.boolean(),
		displayName: z.string().min(1).max(40),
		color: ToolColor,
		icon: ToolIcon,
		description: z.string().min(1).max(100),
	})
	.transform((tool) => ({
		...tool,
		outputComponentIdx: parseInt(tool.outputComponent.split(";")[0]),
		outputComponent: ToolOutputComponents.parse(tool.outputComponent.split(";")[1]),
	}));
export const configTools = z
	.array(
		z
			.object({
				name: z.string(),
				description: z.string(),
				endpoint: z.union([z.string(), z.null()]),
				inputs: z.array(toolInputSchema),
				outputComponent: ToolOutputComponents.or(z.null()),
				outputComponentIdx: z.number().int().default(0),
				showOutput: z.boolean(),
				_id: z
					.string()
					.length(24)
					.regex(/^[0-9a-fA-F]{24}$/)
					.transform((val) => new ObjectId(val)),
				baseUrl: z.string().optional(),
				displayName: z.string(),
				color: ToolColor,
				icon: ToolIcon,
				isOnByDefault: z.optional(z.literal(true)),
				isLocked: z.optional(z.literal(true)),
				isHidden: z.optional(z.literal(true)),
			})
			.transform((val) => ({
				type: "config" as const,
				...val,
				call: getCallMethod(val),
			}))
	)
	// add the extra hardcoded tools
	.transform((val) => [...val, calculator, directlyAnswer, fetchUrl, websearch]);

export function getCallMethod(tool: Omit<BaseTool, "call">): BackendCall {
	return async function* (params, ctx, uuid) {
		if (
			tool.endpoint === null ||
			!tool.baseUrl ||
			!tool.outputComponent ||
			tool.outputComponentIdx === null
		) {
			throw new Error(`Tool function ${tool.name} has no endpoint`);
		}

		const ipToken = await getIpToken(ctx.ip, ctx.username);

		function coerceInput(value: unknown, type: ToolInput["type"]) {
			const valueStr = String(value);
			switch (type) {
				case "str":
					return valueStr;
				case "int":
					return parseInt(valueStr);
				case "float":
					return parseFloat(valueStr);
				case "bool":
					return valueStr === "true";
				default:
					throw new Error(`Unsupported type ${type}`);
			}
		}
		const inputs = tool.inputs.map(async (input) => {
			if (input.type === "file" && input.paramType !== "required") {
				throw new Error("File inputs are always required and cannot be optional or fixed");
			}

			if (input.paramType === "fixed") {
				return coerceInput(input.value, input.type);
			} else if (input.paramType === "optional") {
				return coerceInput(params[input.name] ?? input.default, input.type);
			} else if (input.paramType === "required") {
				if (params[input.name] === undefined) {
					throw new Error(`Missing required input ${input.name}`);
				}

				if (input.type === "file") {
					// todo: parse file here !
					// structure is {input|output}-{msgIdx}-{fileIdx}-{filename}

					const filename = params[input.name];

					if (!filename || typeof filename !== "string") {
						throw new Error(`Filename is not a string`);
					}

					const messages = ctx.messages;

					const msgIdx = parseInt(filename.split("_")[1]);
					const fileIdx = parseInt(filename.split("_")[2]);

					if (Number.isNaN(msgIdx) || Number.isNaN(fileIdx)) {
						throw Error(`Message index or file index is missing`);
					}

					if (msgIdx >= messages.length) {
						throw Error(`Message index ${msgIdx} is out of bounds`);
					}

					const file = messages[msgIdx].files?.[fileIdx];

					if (!file) {
						throw Error(`File index ${fileIdx} is out of bounds`);
					}

					const blob = await downloadFile(file.value, ctx.conv._id)
						.then((file) => fetch(`data:${file.mime};base64,${file.value}`))
						.then((res) => res.blob())
						.catch((err) => {
							throw Error("Failed to download file", { cause: err });
						});

					return blob;
				} else {
					return coerceInput(params[input.name], input.type);
				}
			}
		});

		const outputs = yield* callSpace(
			tool.baseUrl,
			tool.endpoint,
			await Promise.all(inputs),
			ipToken,
			uuid
		);

		if (!isValidOutputComponent(tool.outputComponent)) {
			throw new Error(`Tool output component is not defined`);
		}

		const { type, path } = ToolOutputPaths[tool.outputComponent];

		if (!path || !type) {
			throw new Error(`Tool output type ${tool.outputComponent} is not supported`);
		}

		const files: MessageFile[] = [];

		const toolOutputs: Array<Record<string, string>> = [];

		if (outputs.length <= tool.outputComponentIdx) {
			throw new Error(`Tool output component index is out of bounds`);
		}

		// if its not an object, return directly
		if (
			outputs[tool.outputComponentIdx] !== undefined &&
			typeof outputs[tool.outputComponentIdx] !== "object"
		) {
			return {
				outputs: [{ [tool.name + "-0"]: outputs[tool.outputComponentIdx] }],
				display: tool.showOutput,
			};
		}

		await Promise.all(
			jp
				.query(outputs[tool.outputComponentIdx], path)
				.map(async (output: string | string[], idx) => {
					const arrayedOutput = Array.isArray(output) ? output : [output];
					if (type === "file") {
						// output files are actually URLs

						await Promise.all(
							arrayedOutput.map(async (output, idx) => {
								await fetch(output)
									.then((res) => res.blob())
									.then(async (blob) => {
										const { ext, mime } = (await fileTypeFromBlob(blob)) ?? { ext: "octet-stream" };

										return new File(
											[blob],
											`${idx}-${await sha256(JSON.stringify(params))}.${ext}`,
											{
												type: mime,
											}
										);
									})
									.then((file) => uploadFile(file, ctx.conv))
									.then((file) => files.push(file));
							})
						);

						toolOutputs.push({
							[tool.name +
							"-" +
							idx.toString()]: `Only and always answer: 'I used the tool ${tool.displayName}, here is the result.' Don't add anything else.`,
						});
					} else {
						for (const output of arrayedOutput) {
							toolOutputs.push({
								[tool.name + "-" + idx.toString()]: output,
							});
						}
					}
				})
		);

		for (const file of files) {
			yield {
				type: MessageUpdateType.File,
				name: file.name,
				sha: file.value,
				mime: file.mime,
			};
		}

		return { outputs: toolOutputs, display: tool.showOutput };
	};
}

export const toolFromConfigs = configTools.parse(JSON5.parse(env.TOOLS)) satisfies ConfigTool[];

</src/lib/server/tools/index.ts>

<src/lib/server/endpoints/cohere/endpointCohere.ts>
import { z } from "zod";
import { env } from "$env/dynamic/private";
import type { Endpoint } from "../endpoints";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import type { Cohere, CohereClient } from "cohere-ai";
import { buildPrompt } from "$lib/buildPrompt";
import { ToolResultStatus, type ToolCall } from "$lib/types/Tool";
import { pipeline, Writable, type Readable } from "node:stream";
import { toolHasName } from "$lib/utils/tools";

export const endpointCohereParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("cohere"),
	apiKey: z.string().default(env.COHERE_API_TOKEN),
	clientName: z.string().optional(),
	raw: z.boolean().default(false),
});

export async function endpointCohere(
	input: z.input<typeof endpointCohereParametersSchema>
): Promise<Endpoint> {
	const { apiKey, clientName, model, raw } = endpointCohereParametersSchema.parse(input);

	let cohere: CohereClient;

	try {
		cohere = new (await import("cohere-ai")).CohereClient({
			token: apiKey,
			clientName,
		});
	} catch (e) {
		throw new Error("Failed to import cohere-ai", { cause: e });
	}

	return async ({ messages, preprompt, generateSettings, continueMessage, tools, toolResults }) => {
		let system = preprompt;
		if (messages?.[0]?.from === "system") {
			system = messages[0].content;
		}

		// Tools must use [A-z_] for their names and directly_answer is banned
		// It's safe to convert the tool names because we treat - and _ the same
		tools = tools
			?.filter((tool) => !toolHasName("directly_answer", tool))
			.map((tool) => ({ ...tool, name: tool.name.replaceAll("-", "_") }));

		const parameters = { ...model.parameters, ...generateSettings };

		return (async function* () {
			let stream;
			let tokenId = 0;

			if (raw) {
				const prompt = await buildPrompt({
					messages,
					model,
					preprompt: system,
					continueMessage,
					tools,
					toolResults,
				});

				stream = await cohere.chatStream({
					message: prompt,
					rawPrompting: true,
					model: model.id ?? model.name,
					p: parameters?.top_p,
					k: parameters?.top_k,
					maxTokens: parameters?.max_new_tokens,
					temperature: parameters?.temperature,
					stopSequences: parameters?.stop,
					frequencyPenalty: parameters?.frequency_penalty,
				});
			} else {
				const formattedMessages = messages
					.filter((message) => message.from !== "system")
					.map((message) => ({
						role: message.from === "user" ? "USER" : "CHATBOT",
						message: message.content,
					})) satisfies Cohere.Message[];

				stream = await cohere
					.chatStream({
						model: model.id ?? model.name,
						chatHistory: formattedMessages.slice(0, -1),
						message: formattedMessages[formattedMessages.length - 1].message,
						preamble: system,
						p: parameters?.top_p,
						k: parameters?.top_k,
						maxTokens: parameters?.max_new_tokens,
						temperature: parameters?.temperature,
						stopSequences: parameters?.stop,
						frequencyPenalty: parameters?.frequency_penalty,
						tools,
						toolResults:
							toolResults?.length && toolResults?.length > 0
								? toolResults?.map((toolResult) => {
										if (toolResult.status === ToolResultStatus.Error) {
											return { call: toolResult.call, outputs: [{ error: toolResult.message }] };
										}
										return { call: toolResult.call, outputs: toolResult.outputs };
								  })
								: undefined,
					})
					.catch(async (err) => {
						if (!err.body) throw err;

						// Decode the error message and throw
						const message = await convertStreamToBuffer(err.body).catch(() => {
							throw err;
						});
						throw Error(message, { cause: err });
					});
			}

			for await (const output of stream) {
				if (output.eventType === "text-generation") {
					yield {
						token: {
							id: tokenId++,
							text: output.text,
							logprob: 0,
							special: false,
						},
						generated_text: null,
						details: null,
					} satisfies TextGenerationStreamOutput;
				} else if (output.eventType === "tool-calls-generation") {
					yield {
						token: {
							id: tokenId++,
							text: "",
							logprob: 0,
							special: true,
							toolCalls: output.toolCalls as ToolCall[],
						},
						generated_text: null,
						details: null,
					};
				} else if (output.eventType === "stream-end") {
					if (["ERROR", "ERROR_TOXIC", "ERROR_LIMIT"].includes(output.finishReason)) {
						throw new Error(output.finishReason);
					}
					yield {
						token: {
							id: tokenId++,
							text: "",
							logprob: 0,
							special: true,
						},
						generated_text: output.response.text,
						details: null,
					};
				}
			}
		})();
	};
}

async function convertStreamToBuffer(webReadableStream: Readable) {
	return new Promise<string>((resolve, reject) => {
		const chunks: Buffer[] = [];

		pipeline(
			webReadableStream,
			new Writable({
				write(chunk, _, callback) {
					chunks.push(chunk);
					callback();
				},
			}),
			(err) => {
				if (err) {
					reject(err);
				} else {
					resolve(Buffer.concat(chunks).toString("utf-8"));
				}
			}
		);
	});
}

</src/lib/server/endpoints/cohere/endpointCohere.ts>

<src/lib/server/endpoints/endpoints.ts>
import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";
import type { TextGenerationStreamOutput, TextGenerationStreamToken } from "@huggingface/inference";
import { endpointTgi, endpointTgiParametersSchema } from "./tgi/endpointTgi";
import { z } from "zod";
import endpointAws, { endpointAwsParametersSchema } from "./aws/endpointAws";
import { endpointOAIParametersSchema, endpointOai } from "./openai/endpointOai";
import endpointLlamacpp, { endpointLlamacppParametersSchema } from "./llamacpp/endpointLlamacpp";
import endpointOllama, { endpointOllamaParametersSchema } from "./ollama/endpointOllama";
import endpointVertex, { endpointVertexParametersSchema } from "./google/endpointVertex";
import endpointGenAI, { endpointGenAIParametersSchema } from "./google/endpointGenAI";
import { endpointBedrock, endpointBedrockParametersSchema } from "./aws/endpointBedrock";

import {
	endpointAnthropic,
	endpointAnthropicParametersSchema,
} from "./anthropic/endpointAnthropic";
import {
	endpointAnthropicVertex,
	endpointAnthropicVertexParametersSchema,
} from "./anthropic/endpointAnthropicVertex";
import type { Model } from "$lib/types/Model";
import endpointCloudflare, {
	endpointCloudflareParametersSchema,
} from "./cloudflare/endpointCloudflare";
import { endpointCohere, endpointCohereParametersSchema } from "./cohere/endpointCohere";
import endpointLangserve, {
	endpointLangserveParametersSchema,
} from "./langserve/endpointLangserve";

import type { Tool, ToolCall, ToolResult } from "$lib/types/Tool";

export type EndpointMessage = Omit<Message, "id">;

// parameters passed when generating text
export interface EndpointParameters {
	messages: EndpointMessage[];
	preprompt?: Conversation["preprompt"];
	continueMessage?: boolean; // used to signal that the last message will be extended
	generateSettings?: Partial<Model["parameters"]>;
	tools?: Tool[];
	toolResults?: ToolResult[];
	isMultimodal?: boolean;
}

interface CommonEndpoint {
	weight: number;
}
type TextGenerationStreamOutputWithTools = TextGenerationStreamOutput & {
	token: TextGenerationStreamToken & { toolCalls?: ToolCall[] };
};
// type signature for the endpoint
export type Endpoint = (
	params: EndpointParameters
) => Promise<AsyncGenerator<TextGenerationStreamOutputWithTools, void, void>>;

// generator function that takes in parameters for defining the endpoint and return the endpoint
export type EndpointGenerator<T extends CommonEndpoint> = (parameters: T) => Endpoint;

// list of all endpoint generators
export const endpoints = {
	tgi: endpointTgi,
	anthropic: endpointAnthropic,
	anthropicvertex: endpointAnthropicVertex,
	bedrock: endpointBedrock,
	aws: endpointAws,
	openai: endpointOai,
	llamacpp: endpointLlamacpp,
	ollama: endpointOllama,
	vertex: endpointVertex,
	genai: endpointGenAI,
	cloudflare: endpointCloudflare,
	cohere: endpointCohere,
	langserve: endpointLangserve,
};

export const endpointSchema = z.discriminatedUnion("type", [
	endpointAnthropicParametersSchema,
	endpointAnthropicVertexParametersSchema,
	endpointAwsParametersSchema,
	endpointBedrockParametersSchema,
	endpointOAIParametersSchema,
	endpointTgiParametersSchema,
	endpointLlamacppParametersSchema,
	endpointOllamaParametersSchema,
	endpointVertexParametersSchema,
	endpointGenAIParametersSchema,
	endpointCloudflareParametersSchema,
	endpointCohereParametersSchema,
	endpointLangserveParametersSchema,
]);
export default endpoints;

</src/lib/server/endpoints/endpoints.ts>

<src/lib/server/endpoints/llamacpp/endpointLlamacpp.ts>
import { env } from "$env/dynamic/private";
import { buildPrompt } from "$lib/buildPrompt";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import type { Endpoint } from "../endpoints";
import { z } from "zod";
import { logger } from "$lib/server/logger";

export const endpointLlamacppParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("llamacpp"),
	url: z.string().url().default("http://127.0.0.1:8080"), // legacy, feel free to remove in breaking change update
	baseURL: z.string().url().optional(),
	accessToken: z
		.string()
		.min(1)
		.default(env.HF_TOKEN ?? env.HF_ACCESS_TOKEN),
});

export function endpointLlamacpp(
	input: z.input<typeof endpointLlamacppParametersSchema>
): Endpoint {
	const { baseURL, url, model } = endpointLlamacppParametersSchema.parse(input);
	return async ({ messages, preprompt, continueMessage, generateSettings }) => {
		const prompt = await buildPrompt({
			messages,
			continueMessage,
			preprompt,
			model,
		});

		const parameters = { ...model.parameters, ...generateSettings };

		const r = await fetch(`${baseURL ?? url}/completion`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				prompt,
				stream: true,
				temperature: parameters.temperature,
				top_p: parameters.top_p,
				top_k: parameters.top_k,
				stop: parameters.stop,
				repeat_penalty: parameters.repetition_penalty,
				n_predict: parameters.max_new_tokens,
				cache_prompt: true,
			}),
		});

		if (!r.ok) {
			throw new Error(`Failed to generate text: ${await r.text()}`);
		}

		const encoder = new TextDecoderStream();
		const reader = r.body?.pipeThrough(encoder).getReader();

		return (async function* () {
			let stop = false;
			let generatedText = "";
			let tokenId = 0;
			let accumulatedData = ""; // Buffer to accumulate data chunks

			while (!stop) {
				// Read the stream and log the outputs to console
				const out = (await reader?.read()) ?? { done: false, value: undefined };

				// If it's done, we cancel
				if (out.done) {
					reader?.cancel();
					return;
				}

				if (!out.value) {
					return;
				}

				// Accumulate the data chunk
				accumulatedData += out.value;

				// Process each complete JSON object in the accumulated data
				while (accumulatedData.includes("\n")) {
					// Assuming each JSON object ends with a newline
					const endIndex = accumulatedData.indexOf("\n");
					let jsonString = accumulatedData.substring(0, endIndex).trim();

					// Remove the processed part from the buffer
					accumulatedData = accumulatedData.substring(endIndex + 1);

					if (jsonString.startsWith("data: ")) {
						jsonString = jsonString.slice(6);
						let data = null;

						try {
							data = JSON.parse(jsonString);
						} catch (e) {
							logger.error(e, "Failed to parse JSON");
							logger.error(jsonString, "Problematic JSON string:");
							continue; // Skip this iteration and try the next chunk
						}

						// Handle the parsed data
						if (data.content || data.stop) {
							generatedText += data.content;
							const output: TextGenerationStreamOutput = {
								token: {
									id: tokenId++,
									text: data.content ?? "",
									logprob: 0,
									special: false,
								},
								generated_text: data.stop ? generatedText : null,
								details: null,
							};
							if (data.stop) {
								stop = true;
								output.token.special = true;
								reader?.cancel();
							}
							yield output;
						}
					}
				}
			}
		})();
	};
}

export default endpointLlamacpp;

</src/lib/server/endpoints/llamacpp/endpointLlamacpp.ts>

<src/lib/server/endpoints/google/endpointVertex.ts>
import {
	VertexAI,
	HarmCategory,
	HarmBlockThreshold,
	type Content,
	type TextPart,
} from "@google-cloud/vertexai";
import type { Endpoint } from "../endpoints";
import { z } from "zod";
import type { Message } from "$lib/types/Message";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import { createImageProcessorOptionsValidator, makeImageProcessor } from "../images";

export const endpointVertexParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(), // allow optional and validate against emptiness
	type: z.literal("vertex"),
	location: z.string().default("europe-west1"),
	project: z.string(),
	apiEndpoint: z.string().optional(),
	safetyThreshold: z
		.enum([
			HarmBlockThreshold.HARM_BLOCK_THRESHOLD_UNSPECIFIED,
			HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
			HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
			HarmBlockThreshold.BLOCK_NONE,
			HarmBlockThreshold.BLOCK_ONLY_HIGH,
		])
		.optional(),
	tools: z.array(z.any()).optional(),
	multimodal: z
		.object({
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: [
					"image/png",
					"image/jpeg",
					"image/webp",
					"image/avif",
					"image/tiff",
					"image/gif",
				],
				preferredMimeType: "image/webp",
				maxSizeInMB: Infinity,
				maxWidth: 4096,
				maxHeight: 4096,
			}),
		})
		.default({}),
});

export function endpointVertex(input: z.input<typeof endpointVertexParametersSchema>): Endpoint {
	const { project, location, model, apiEndpoint, safetyThreshold, tools, multimodal } =
		endpointVertexParametersSchema.parse(input);

	const vertex_ai = new VertexAI({
		project,
		location,
		apiEndpoint,
	});

	return async ({ messages, preprompt, generateSettings }) => {
		const parameters = { ...model.parameters, ...generateSettings };

		const hasFiles = messages.some((message) => message.files && message.files.length > 0);

		const generativeModel = vertex_ai.getGenerativeModel({
			model: model.id ?? model.name,
			safetySettings: safetyThreshold
				? [
						{
							category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
							threshold: safetyThreshold,
						},
						{
							category: HarmCategory.HARM_CATEGORY_HARASSMENT,
							threshold: safetyThreshold,
						},
						{
							category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
							threshold: safetyThreshold,
						},
						{
							category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
							threshold: safetyThreshold,
						},
						{
							category: HarmCategory.HARM_CATEGORY_UNSPECIFIED,
							threshold: safetyThreshold,
						},
				  ]
				: undefined,
			generationConfig: {
				maxOutputTokens: parameters?.max_new_tokens ?? 4096,
				stopSequences: parameters?.stop,
				temperature: parameters?.temperature ?? 1,
			},
			// tools and multimodal are mutually exclusive
			tools: !hasFiles ? tools : undefined,
		});

		// Preprompt is the same as the first system message.
		let systemMessage = preprompt;
		if (messages[0].from === "system") {
			systemMessage = messages[0].content;
			messages.shift();
		}

		const vertexMessages = await Promise.all(
			messages.map(async ({ from, content, files }: Omit<Message, "id">): Promise<Content> => {
				const imageProcessor = makeImageProcessor(multimodal.image);
				const processedFiles =
					files && files.length > 0
						? await Promise.all(files.map(async (file) => imageProcessor(file)))
						: [];

				return {
					role: from === "user" ? "user" : "model",
					parts: [
						...processedFiles.map((processedFile) => ({
							inlineData: {
								data: processedFile.image.toString("base64"),
								mimeType: processedFile.mime,
							},
						})),
						{
							text: content,
						},
					],
				};
			})
		);

		const result = await generativeModel.generateContentStream({
			contents: vertexMessages,
			systemInstruction: systemMessage
				? {
						role: "system",
						parts: [
							{
								text: systemMessage,
							},
						],
				  }
				: undefined,
		});

		let tokenId = 0;
		return (async function* () {
			let generatedText = "";

			for await (const data of result.stream) {
				if (!data?.candidates?.length) break; // Handle case where no candidates are present

				const candidate = data.candidates[0];
				if (!candidate.content?.parts?.length) continue; // Skip if no parts are present

				const firstPart = candidate.content.parts.find((part) => "text" in part) as
					| TextPart
					| undefined;
				if (!firstPart) continue; // Skip if no text part is found

				const isLastChunk = !!candidate.finishReason;

				const content = firstPart.text;
				generatedText += content;
				const output: TextGenerationStreamOutput = {
					token: {
						id: tokenId++,
						text: content,
						logprob: 0,
						special: isLastChunk,
					},
					generated_text: isLastChunk ? generatedText : null,
					details: null,
				};
				yield output;

				if (isLastChunk) break;
			}
		})();
	};
}
export default endpointVertex;

</src/lib/server/endpoints/google/endpointVertex.ts>

<src/lib/server/endpoints/google/endpointGenAI.ts>
import { GoogleGenerativeAI, HarmBlockThreshold, HarmCategory } from "@google/generative-ai";
import type { Content, Part, SafetySetting, TextPart } from "@google/generative-ai";
import { z } from "zod";
import type { Message, MessageFile } from "$lib/types/Message";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import type { Endpoint } from "../endpoints";
import { createImageProcessorOptionsValidator, makeImageProcessor } from "../images";
import type { ImageProcessorOptions } from "../images";
import { env } from "$env/dynamic/private";

export const endpointGenAIParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("genai"),
	apiKey: z.string().default(env.GOOGLE_GENAI_API_KEY),
	safetyThreshold: z
		.enum([
			HarmBlockThreshold.HARM_BLOCK_THRESHOLD_UNSPECIFIED,
			HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
			HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
			HarmBlockThreshold.BLOCK_NONE,
			HarmBlockThreshold.BLOCK_ONLY_HIGH,
		])
		.optional(),
	multimodal: z
		.object({
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: ["image/png", "image/jpeg", "image/webp"],
				preferredMimeType: "image/webp",
				// The 4 / 3 compensates for the 33% increase in size when converting to base64
				maxSizeInMB: (5 / 4) * 3,
				maxWidth: 4096,
				maxHeight: 4096,
			}),
		})
		.default({}),
});

export function endpointGenAI(input: z.input<typeof endpointGenAIParametersSchema>): Endpoint {
	const { model, apiKey, safetyThreshold, multimodal } = endpointGenAIParametersSchema.parse(input);

	const genAI = new GoogleGenerativeAI(apiKey);

	const safetySettings = safetyThreshold
		? Object.keys(HarmCategory)
				.filter((cat) => cat !== HarmCategory.HARM_CATEGORY_UNSPECIFIED)
				.reduce((acc, val) => {
					acc.push({
						category: val as HarmCategory,
						threshold: safetyThreshold,
					});
					return acc;
				}, [] as SafetySetting[])
		: undefined;

	return async ({ messages, preprompt, generateSettings }) => {
		const parameters = { ...model.parameters, ...generateSettings };

		const generativeModel = genAI.getGenerativeModel({
			model: model.id ?? model.name,
			safetySettings,
			generationConfig: {
				maxOutputTokens: parameters?.max_new_tokens ?? 4096,
				stopSequences: parameters?.stop,
				temperature: parameters?.temperature ?? 1,
			},
		});

		let systemMessage = preprompt;
		if (messages[0].from === "system") {
			systemMessage = messages[0].content;
			messages.shift();
		}

		const genAIMessages = await Promise.all(
			messages.map(async ({ from, content, files }: Omit<Message, "id">): Promise<Content> => {
				return {
					role: from === "user" ? "user" : "model",
					parts: [
						...(await Promise.all(
							(files ?? []).map((file) => fileToImageBlock(file, multimodal.image))
						)),
						{ text: content },
					],
				};
			})
		);

		const result = await generativeModel.generateContentStream({
			contents: genAIMessages,
			systemInstruction:
				systemMessage && systemMessage.trim() !== ""
					? {
							role: "system",
							parts: [{ text: systemMessage }],
					  }
					: undefined,
		});

		let tokenId = 0;
		return (async function* () {
			let generatedText = "";

			for await (const data of result.stream) {
				if (!data?.candidates?.length) break; // Handle case where no candidates are present

				const candidate = data.candidates[0];
				if (!candidate.content?.parts?.length) continue; // Skip if no parts are present

				const firstPart = candidate.content.parts.find((part) => "text" in part) as
					| TextPart
					| undefined;
				if (!firstPart) continue; // Skip if no text part is found

				const content = firstPart.text;
				generatedText += content;

				const output: TextGenerationStreamOutput = {
					token: {
						id: tokenId++,
						text: content,
						logprob: 0,
						special: false,
					},
					generated_text: null,
					details: null,
				};
				yield output;
			}

			const output: TextGenerationStreamOutput = {
				token: {
					id: tokenId++,
					text: "",
					logprob: 0,
					special: true,
				},
				generated_text: generatedText,
				details: null,
			};
			yield output;
		})();
	};
}

async function fileToImageBlock(
	file: MessageFile,
	opts: ImageProcessorOptions<"image/png" | "image/jpeg" | "image/webp">
): Promise<Part> {
	const processor = makeImageProcessor(opts);
	const { image, mime } = await processor(file);

	return {
		inlineData: {
			mimeType: mime,
			data: image.toString("base64"),
		},
	};
}

export default endpointGenAI;

</src/lib/server/endpoints/google/endpointGenAI.ts>

<src/lib/server/endpoints/images.ts>
import type { Sharp } from "sharp";
import sharp from "sharp";
import type { MessageFile } from "$lib/types/Message";
import { z, type util } from "zod";

export interface ImageProcessorOptions<TMimeType extends string = string> {
	supportedMimeTypes: TMimeType[];
	preferredMimeType: TMimeType;
	maxSizeInMB: number;
	maxWidth: number;
	maxHeight: number;
}
export type ImageProcessor<TMimeType extends string = string> = (file: MessageFile) => Promise<{
	image: Buffer;
	mime: TMimeType;
}>;

export function createImageProcessorOptionsValidator<TMimeType extends string = string>(
	defaults: ImageProcessorOptions<TMimeType>
) {
	return z
		.object({
			supportedMimeTypes: z
				.array(
					z.enum<string, [TMimeType, ...TMimeType[]]>([
						defaults.supportedMimeTypes[0],
						...defaults.supportedMimeTypes.slice(1),
					])
				)
				.default(defaults.supportedMimeTypes),
			preferredMimeType: z
				.enum([defaults.supportedMimeTypes[0], ...defaults.supportedMimeTypes.slice(1)])
				.default(defaults.preferredMimeType as util.noUndefined<TMimeType>),
			maxSizeInMB: z.number().positive().default(defaults.maxSizeInMB),
			maxWidth: z.number().int().positive().default(defaults.maxWidth),
			maxHeight: z.number().int().positive().default(defaults.maxHeight),
		})
		.default(defaults);
}

export function makeImageProcessor<TMimeType extends string = string>(
	options: ImageProcessorOptions<TMimeType>
): ImageProcessor<TMimeType> {
	return async (file) => {
		const { supportedMimeTypes, preferredMimeType, maxSizeInMB, maxWidth, maxHeight } = options;
		const { mime, value } = file;

		const buffer = Buffer.from(value, "base64");
		let sharpInst = sharp(buffer);

		const metadata = await sharpInst.metadata();
		if (!metadata) throw Error("Failed to read image metadata");
		const { width, height } = metadata;
		if (width === undefined || height === undefined) throw Error("Failed to read image size");

		const tooLargeInSize = width > maxWidth || height > maxHeight;
		const tooLargeInBytes = buffer.byteLength > maxSizeInMB * 1000 * 1000;

		const outputMime = chooseMimeType(supportedMimeTypes, preferredMimeType, mime, {
			preferSizeReduction: tooLargeInBytes,
		});

		// Resize if necessary
		if (tooLargeInSize || tooLargeInBytes) {
			const size = chooseImageSize({
				mime: outputMime,
				width,
				height,
				maxWidth,
				maxHeight,
				maxSizeInMB,
			});
			if (size.width !== width || size.height !== height) {
				sharpInst = resizeImage(sharpInst, size.width, size.height);
			}
		}

		// Convert format if necessary
		// We always want to convert the image when the file was too large in bytes
		// so we can guarantee that ideal options are used, which are expected when
		// choosing the image size
		if (outputMime !== mime || tooLargeInBytes) {
			sharpInst = convertImage(sharpInst, outputMime);
		}

		const processedImage = await sharpInst.toBuffer();
		return { image: processedImage, mime: outputMime };
	};
}

const outputFormats = ["png", "jpeg", "webp", "avif", "tiff", "gif"] as const;
type OutputImgFormat = (typeof outputFormats)[number];
const isOutputFormat = (format: string): format is (typeof outputFormats)[number] =>
	outputFormats.includes(format as OutputImgFormat);

export function convertImage(sharpInst: Sharp, outputMime: string): Sharp {
	const [type, format] = outputMime.split("/");
	if (type !== "image") throw Error(`Requested non-image mime type: ${outputMime}`);
	if (!isOutputFormat(format)) {
		throw Error(`Requested to convert to an unsupported format: ${format}`);
	}

	return sharpInst[format]();
}

// heic/heif requires proprietary license
// TODO: blocking heif may be incorrect considering it also supports av1, so we should instead
// detect the compression method used via sharp().metadata().compression
// TODO: consider what to do about animated formats: apng, gif, animated webp, ...
const blocklistedMimes = ["image/heic", "image/heif"];

/** Sorted from largest to smallest */
const mimesBySizeDesc = [
	"image/png",
	"image/tiff",
	"image/gif",
	"image/jpeg",
	"image/webp",
	"image/avif",
];

/**
 * Defaults to preferred format or uses existing mime if supported
 * When preferSizeReduction is true, it will choose the smallest format that is supported
 **/
function chooseMimeType<T extends readonly string[]>(
	supportedMimes: T,
	preferredMime: string,
	mime: string,
	{ preferSizeReduction }: { preferSizeReduction: boolean }
): T[number] {
	if (!supportedMimes.includes(preferredMime)) {
		const supportedMimesStr = supportedMimes.join(", ");
		throw Error(
			`Preferred format "${preferredMime}" not found in supported mimes: ${supportedMimesStr}`
		);
	}

	const [type] = mime.split("/");
	if (type !== "image") throw Error(`Received non-image mime type: ${mime}`);

	if (supportedMimes.includes(mime) && !preferSizeReduction) return mime;

	if (blocklistedMimes.includes(mime)) throw Error(`Received blocklisted mime type: ${mime}`);

	const smallestMime = mimesBySizeDesc.findLast((m) => supportedMimes.includes(m));
	return smallestMime ?? preferredMime;
}

interface ImageSizeOptions {
	mime: string;
	width: number;
	height: number;
	maxWidth: number;
	maxHeight: number;
	maxSizeInMB: number;
}

/** Resizes the image to fit within the specified size in MB by guessing the output size */
export function chooseImageSize({
	mime,
	width,
	height,
	maxWidth,
	maxHeight,
	maxSizeInMB,
}: ImageSizeOptions): { width: number; height: number } {
	const biggestDiscrepency = Math.max(1, width / maxWidth, height / maxHeight);

	let selectedWidth = Math.ceil(width / biggestDiscrepency);
	let selectedHeight = Math.ceil(height / biggestDiscrepency);

	do {
		const estimatedSize = estimateImageSizeInBytes(mime, selectedWidth, selectedHeight);
		if (estimatedSize < maxSizeInMB * 1024 * 1024) {
			return { width: selectedWidth, height: selectedHeight };
		}
		selectedWidth = Math.floor(selectedWidth / 1.1);
		selectedHeight = Math.floor(selectedHeight / 1.1);
	} while (selectedWidth > 1 && selectedHeight > 1);

	throw Error(`Failed to resize image to fit within ${maxSizeInMB}MB`);
}

const mimeToCompressionRatio: Record<string, number> = {
	"image/png": 1 / 2,
	"image/jpeg": 1 / 10,
	"image/webp": 1 / 4,
	"image/avif": 1 / 5,
	"image/tiff": 1,
	"image/gif": 1 / 5,
};

/**
 * Guesses the side of an image in MB based on its format and dimensions
 * Should guess the worst case
 **/
function estimateImageSizeInBytes(mime: string, width: number, height: number): number {
	const compressionRatio = mimeToCompressionRatio[mime];
	if (!compressionRatio) throw Error(`Unsupported image format: ${mime}`);

	const bitsPerPixel = 32; // Assuming 32-bit color depth for 8-bit R G B A
	const bytesPerPixel = bitsPerPixel / 8;
	const uncompressedSize = width * height * bytesPerPixel;

	return uncompressedSize * compressionRatio;
}

export function resizeImage(sharpInst: Sharp, maxWidth: number, maxHeight: number): Sharp {
	return sharpInst.resize({ width: maxWidth, height: maxHeight, fit: "inside" });
}

</src/lib/server/endpoints/images.ts>

<src/lib/server/endpoints/cloudflare/endpointCloudflare.ts>
import { z } from "zod";
import type { Endpoint } from "../endpoints";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import { env } from "$env/dynamic/private";
import { logger } from "$lib/server/logger";

export const endpointCloudflareParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("cloudflare"),
	accountId: z.string().default(env.CLOUDFLARE_ACCOUNT_ID),
	apiToken: z.string().default(env.CLOUDFLARE_API_TOKEN),
});

export async function endpointCloudflare(
	input: z.input<typeof endpointCloudflareParametersSchema>
): Promise<Endpoint> {
	const { accountId, apiToken, model } = endpointCloudflareParametersSchema.parse(input);

	if (!model.id.startsWith("@")) {
		model.id = "@hf/" + model.id;
	}

	const apiURL = `https://api.cloudflare.com/client/v4/accounts/${accountId}/ai/run/${model.id}`;

	return async ({ messages, preprompt, generateSettings }) => {
		let messagesFormatted = messages.map((message) => ({
			role: message.from,
			content: message.content,
		}));

		if (messagesFormatted?.[0]?.role !== "system") {
			messagesFormatted = [{ role: "system", content: preprompt ?? "" }, ...messagesFormatted];
		}

		const parameters = { ...model.parameters, ...generateSettings };

		const payload = JSON.stringify({
			messages: messagesFormatted,
			stream: true,
			max_tokens: parameters?.max_new_tokens,
			temperature: parameters?.temperature,
			top_p: parameters?.top_p,
			top_k: parameters?.top_k,
			repetition_penalty: parameters?.repetition_penalty,
		});

		const res = await fetch(apiURL, {
			method: "POST",
			headers: {
				Authorization: `Bearer ${apiToken}`,
				"Content-Type": "application/json",
			},
			body: payload,
		});

		if (!res.ok) {
			throw new Error(`Failed to generate text: ${await res.text()}`);
		}

		const encoder = new TextDecoderStream();
		const reader = res.body?.pipeThrough(encoder).getReader();

		return (async function* () {
			let stop = false;
			let generatedText = "";
			let tokenId = 0;
			let accumulatedData = ""; // Buffer to accumulate data chunks

			while (!stop) {
				const out = await reader?.read();

				// If it's done, we cancel
				if (out?.done) {
					reader?.cancel();
					return;
				}

				if (!out?.value) {
					return;
				}

				// Accumulate the data chunk
				accumulatedData += out.value;

				// Process each complete JSON object in the accumulated data
				while (accumulatedData.includes("\n")) {
					// Assuming each JSON object ends with a newline
					const endIndex = accumulatedData.indexOf("\n");
					let jsonString = accumulatedData.substring(0, endIndex).trim();

					// Remove the processed part from the buffer
					accumulatedData = accumulatedData.substring(endIndex + 1);

					if (jsonString.startsWith("data: ")) {
						jsonString = jsonString.slice(6);
						let data = null;

						if (jsonString === "[DONE]") {
							stop = true;

							yield {
								token: {
									id: tokenId++,
									text: "",
									logprob: 0,
									special: true,
								},
								generated_text: generatedText,
								details: null,
							} satisfies TextGenerationStreamOutput;
							reader?.cancel();

							continue;
						}

						try {
							data = JSON.parse(jsonString);
						} catch (e) {
							logger.error(e, "Failed to parse JSON");
							logger.error(jsonString, "Problematic JSON string:");
							continue; // Skip this iteration and try the next chunk
						}

						// Handle the parsed data
						if (data.response) {
							generatedText += data.response ?? "";
							const output: TextGenerationStreamOutput = {
								token: {
									id: tokenId++,
									text: data.response ?? "",
									logprob: 0,
									special: false,
								},
								generated_text: null,
								details: null,
							};
							yield output;
						}
					}
				}
			}
		})();
	};
}

export default endpointCloudflare;

</src/lib/server/endpoints/cloudflare/endpointCloudflare.ts>

<src/lib/server/endpoints/tgi/endpointTgi.ts>
import { env } from "$env/dynamic/private";
import { buildPrompt } from "$lib/buildPrompt";
import { textGenerationStream } from "@huggingface/inference";
import type { Endpoint, EndpointMessage } from "../endpoints";
import { z } from "zod";
import {
	createImageProcessorOptionsValidator,
	makeImageProcessor,
	type ImageProcessor,
} from "../images";

export const endpointTgiParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("tgi"),
	url: z.string().url(),
	accessToken: z.string().default(env.HF_TOKEN ?? env.HF_ACCESS_TOKEN),
	authorization: z.string().optional(),
	multimodal: z
		.object({
			// Assumes IDEFICS
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: ["image/jpeg", "image/webp"],
				preferredMimeType: "image/webp",
				maxSizeInMB: 5,
				maxWidth: 224,
				maxHeight: 224,
			}),
		})
		.default({}),
});

export function endpointTgi(input: z.input<typeof endpointTgiParametersSchema>): Endpoint {
	const { url, accessToken, model, authorization, multimodal } =
		endpointTgiParametersSchema.parse(input);
	const imageProcessor = makeImageProcessor(multimodal.image);

	return async ({
		messages,
		preprompt,
		continueMessage,
		generateSettings,
		tools,
		toolResults,
		isMultimodal,
	}) => {
		const messagesWithResizedFiles = await Promise.all(
			messages.map((message) => prepareMessage(Boolean(isMultimodal), message, imageProcessor))
		);

		const prompt = await buildPrompt({
			messages: messagesWithResizedFiles,
			preprompt,
			model,
			continueMessage,
			tools,
			toolResults,
		});

		return textGenerationStream(
			{
				parameters: { ...model.parameters, ...generateSettings, return_full_text: false },
				model: url,
				inputs: prompt,
				accessToken,
			},
			{
				use_cache: false,
				fetch: async (endpointUrl, info) => {
					if (info && authorization && !accessToken) {
						// Set authorization header if it is defined and HF_TOKEN is empty
						info.headers = {
							...info.headers,
							Authorization: authorization,
						};
					}
					return fetch(endpointUrl, info);
				},
			}
		);
	};
}

const whiteImage = {
	mime: "image/png",
	image: Buffer.from(
		"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAAQABADAREAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD+/igAoAKACgD/2Q==",
		"base64"
	),
};

async function prepareMessage(
	isMultimodal: boolean,
	message: EndpointMessage,
	imageProcessor: ImageProcessor
): Promise<EndpointMessage> {
	if (!isMultimodal) return message;

	const files = await Promise.all(message.files?.map(imageProcessor) ?? [whiteImage]);
	const markdowns = files.map(
		(file) => `![](data:${file.mime};base64,${file.image.toString("base64")})`
	);
	const content = message.content + "\n" + markdowns.join("\n ");

	return { ...message, content };
}

</src/lib/server/endpoints/tgi/endpointTgi.ts>

<src/lib/server/endpoints/langserve/endpointLangserve.ts>
import { buildPrompt } from "$lib/buildPrompt";
import { z } from "zod";
import type { Endpoint } from "../endpoints";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import { logger } from "$lib/server/logger";

export const endpointLangserveParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("langserve"),
	url: z.string().url(),
});

export function endpointLangserve(
	input: z.input<typeof endpointLangserveParametersSchema>
): Endpoint {
	const { url, model } = endpointLangserveParametersSchema.parse(input);

	return async ({ messages, preprompt, continueMessage }) => {
		const prompt = await buildPrompt({
			messages,
			continueMessage,
			preprompt,
			model,
		});

		const r = await fetch(`${url}/stream`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				input: { text: prompt },
			}),
		});

		if (!r.ok) {
			throw new Error(`Failed to generate text: ${await r.text()}`);
		}

		const encoder = new TextDecoderStream();
		const reader = r.body?.pipeThrough(encoder).getReader();

		return (async function* () {
			let stop = false;
			let generatedText = "";
			let tokenId = 0;
			let accumulatedData = ""; // Buffer to accumulate data chunks

			while (!stop) {
				// Read the stream and log the outputs to console
				const out = (await reader?.read()) ?? { done: false, value: undefined };

				// If it's done, we cancel
				if (out.done) {
					reader?.cancel();
					return;
				}

				if (!out.value) {
					return;
				}

				// Accumulate the data chunk
				accumulatedData += out.value;
				// Keep read data to check event type
				const eventData = out.value;

				// Process each complete JSON object in the accumulated data
				while (accumulatedData.includes("\n")) {
					// Assuming each JSON object ends with a newline
					const endIndex = accumulatedData.indexOf("\n");
					let jsonString = accumulatedData.substring(0, endIndex).trim();
					// Remove the processed part from the buffer

					accumulatedData = accumulatedData.substring(endIndex + 1);

					// Stopping with end event
					if (eventData.startsWith("event: end")) {
						stop = true;
						yield {
							token: {
								id: tokenId++,
								text: "",
								logprob: 0,
								special: true,
							},
							generated_text: generatedText,
							details: null,
						} satisfies TextGenerationStreamOutput;
						reader?.cancel();
						continue;
					}

					if (eventData.startsWith("event: data") && jsonString.startsWith("data: ")) {
						jsonString = jsonString.slice(6);
						let data = null;

						// Handle the parsed data
						try {
							data = JSON.parse(jsonString);
						} catch (e) {
							logger.error(e, "Failed to parse JSON");
							logger.error(jsonString, "Problematic JSON string:");
							continue; // Skip this iteration and try the next chunk
						}
						// Assuming content within data is a plain string
						if (data) {
							generatedText += data;
							const output: TextGenerationStreamOutput = {
								token: {
									id: tokenId++,
									text: data,
									logprob: 0,
									special: false,
								},
								generated_text: null,
								details: null,
							};
							yield output;
						}
					}
				}
			}
		})();
	};
}

export default endpointLangserve;

</src/lib/server/endpoints/langserve/endpointLangserve.ts>

<src/lib/server/endpoints/anthropic/endpointAnthropicVertex.ts>
import { z } from "zod";
import type { Endpoint } from "../endpoints";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import { createImageProcessorOptionsValidator } from "../images";
import { endpointMessagesToAnthropicMessages } from "./utils";

export const endpointAnthropicVertexParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("anthropic-vertex"),
	region: z.string().default("us-central1"),
	projectId: z.string(),
	defaultHeaders: z.record(z.string()).optional(),
	defaultQuery: z.record(z.string()).optional(),
	multimodal: z
		.object({
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: ["image/png", "image/jpeg", "image/webp"],
				preferredMimeType: "image/webp",
				// The 4 / 3 compensates for the 33% increase in size when converting to base64
				maxSizeInMB: (5 / 4) * 3,
				maxWidth: 4096,
				maxHeight: 4096,
			}),
		})
		.default({}),
});

export async function endpointAnthropicVertex(
	input: z.input<typeof endpointAnthropicVertexParametersSchema>
): Promise<Endpoint> {
	const { region, projectId, model, defaultHeaders, defaultQuery, multimodal } =
		endpointAnthropicVertexParametersSchema.parse(input);
	let AnthropicVertex;
	try {
		AnthropicVertex = (await import("@anthropic-ai/vertex-sdk")).AnthropicVertex;
	} catch (e) {
		throw new Error("Failed to import @anthropic-ai/vertex-sdk", { cause: e });
	}

	const anthropic = new AnthropicVertex({
		baseURL: `https://${region}-aiplatform.googleapis.com/v1`,
		region,
		projectId,
		defaultHeaders,
		defaultQuery,
	});

	return async ({ messages, preprompt }) => {
		let system = preprompt;
		if (messages?.[0]?.from === "system") {
			system = messages[0].content;
		}

		let tokenId = 0;
		return (async function* () {
			const stream = anthropic.messages.stream({
				model: model.id ?? model.name,
				messages: await endpointMessagesToAnthropicMessages(messages, multimodal),
				max_tokens: model.parameters?.max_new_tokens,
				temperature: model.parameters?.temperature,
				top_p: model.parameters?.top_p,
				top_k: model.parameters?.top_k,
				stop_sequences: model.parameters?.stop,
				system,
			});
			while (true) {
				const result = await Promise.race([stream.emitted("text"), stream.emitted("end")]);

				// Stream end
				if (result === undefined) {
					yield {
						token: {
							id: tokenId++,
							text: "",
							logprob: 0,
							special: true,
						},
						generated_text: await stream.finalText(),
						details: null,
					} satisfies TextGenerationStreamOutput;
					return;
				}

				// Text delta
				yield {
					token: {
						id: tokenId++,
						text: result as unknown as string,
						special: false,
						logprob: 0,
					},
					generated_text: null,
					details: null,
				} satisfies TextGenerationStreamOutput;
			}
		})();
	};
}

</src/lib/server/endpoints/anthropic/endpointAnthropicVertex.ts>

<src/lib/server/endpoints/anthropic/endpointAnthropic.ts>
import { z } from "zod";
import type { Endpoint } from "../endpoints";
import { env } from "$env/dynamic/private";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import { createImageProcessorOptionsValidator } from "../images";
import { endpointMessagesToAnthropicMessages } from "./utils";

export const endpointAnthropicParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("anthropic"),
	baseURL: z.string().url().default("https://api.anthropic.com"),
	apiKey: z.string().default(env.ANTHROPIC_API_KEY ?? "sk-"),
	defaultHeaders: z.record(z.string()).optional(),
	defaultQuery: z.record(z.string()).optional(),
	multimodal: z
		.object({
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: ["image/png", "image/jpeg", "image/webp"],
				preferredMimeType: "image/webp",
				// The 4 / 3 compensates for the 33% increase in size when converting to base64
				maxSizeInMB: (5 / 4) * 3,
				maxWidth: 4096,
				maxHeight: 4096,
			}),
		})
		.default({}),
});

export async function endpointAnthropic(
	input: z.input<typeof endpointAnthropicParametersSchema>
): Promise<Endpoint> {
	const { baseURL, apiKey, model, defaultHeaders, defaultQuery, multimodal } =
		endpointAnthropicParametersSchema.parse(input);
	let Anthropic;
	try {
		Anthropic = (await import("@anthropic-ai/sdk")).default;
	} catch (e) {
		throw new Error("Failed to import @anthropic-ai/sdk", { cause: e });
	}

	const anthropic = new Anthropic({
		apiKey,
		baseURL,
		defaultHeaders,
		defaultQuery,
	});

	return async ({ messages, preprompt, generateSettings }) => {
		let system = preprompt;
		if (messages?.[0]?.from === "system") {
			system = messages[0].content;
		}

		let tokenId = 0;

		const parameters = { ...model.parameters, ...generateSettings };

		return (async function* () {
			const stream = anthropic.messages.stream({
				model: model.id ?? model.name,
				messages: await endpointMessagesToAnthropicMessages(messages, multimodal),
				max_tokens: parameters?.max_new_tokens,
				temperature: parameters?.temperature,
				top_p: parameters?.top_p,
				top_k: parameters?.top_k,
				stop_sequences: parameters?.stop,
				system,
			});
			while (true) {
				const result = await Promise.race([stream.emitted("text"), stream.emitted("end")]);

				// Stream end
				if (result === undefined) {
					yield {
						token: {
							id: tokenId++,
							text: "",
							logprob: 0,
							special: true,
						},
						generated_text: await stream.finalText(),
						details: null,
					} satisfies TextGenerationStreamOutput;
					return;
				}

				// Text delta
				yield {
					token: {
						id: tokenId++,
						text: result as unknown as string,
						special: false,
						logprob: 0,
					},
					generated_text: null,
					details: null,
				} satisfies TextGenerationStreamOutput;
			}
		})();
	};
}

</src/lib/server/endpoints/anthropic/endpointAnthropic.ts>

<src/lib/server/endpoints/anthropic/utils.ts>
import { makeImageProcessor, type ImageProcessorOptions } from "../images";
import type { EndpointMessage } from "../endpoints";
import type { MessageFile } from "$lib/types/Message";
import type { ImageBlockParam, MessageParam } from "@anthropic-ai/sdk/resources/messages.mjs";

export async function fileToImageBlock(
	file: MessageFile,
	opts: ImageProcessorOptions<"image/png" | "image/jpeg" | "image/webp">
): Promise<ImageBlockParam> {
	const processor = makeImageProcessor(opts);
	const { image, mime } = await processor(file);

	return {
		type: "image",
		source: {
			type: "base64",
			media_type: mime,
			data: image.toString("base64"),
		},
	};
}

type NonSystemMessage = EndpointMessage & { from: "user" | "assistant" };

export async function endpointMessagesToAnthropicMessages(
	messages: EndpointMessage[],
	multimodal: { image: ImageProcessorOptions<"image/png" | "image/jpeg" | "image/webp"> }
): Promise<MessageParam[]> {
	return await Promise.all(
		messages
			.filter((message): message is NonSystemMessage => message.from !== "system")
			.map<Promise<MessageParam>>(async (message) => {
				return {
					role: message.from,
					content: [
						...(await Promise.all(
							(message.files ?? []).map((file) => fileToImageBlock(file, multimodal.image))
						)),
						{ type: "text", text: message.content },
					],
				};
			})
	);
}

</src/lib/server/endpoints/anthropic/utils.ts>

<src/lib/server/endpoints/aws/endpointAws.ts>
import { buildPrompt } from "$lib/buildPrompt";
import { textGenerationStream } from "@huggingface/inference";
import { z } from "zod";
import type { Endpoint } from "../endpoints";

export const endpointAwsParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("aws"),
	url: z.string().url(),
	accessKey: z
		.string({
			description:
				"An AWS Access Key ID. If not provided, the default AWS identity resolution will be used",
		})
		.min(1)
		.optional(),
	secretKey: z
		.string({
			description:
				"An AWS Access Key Secret. If not provided, the default AWS identity resolution will be used",
		})
		.min(1)
		.optional(),
	sessionToken: z.string().optional(),
	service: z.union([z.literal("sagemaker"), z.literal("lambda")]).default("sagemaker"),
	region: z.string().optional(),
});

export async function endpointAws(
	input: z.input<typeof endpointAwsParametersSchema>
): Promise<Endpoint> {
	let createSignedFetcher;
	try {
		createSignedFetcher = (await import("aws-sigv4-fetch")).createSignedFetcher;
	} catch (e) {
		throw new Error("Failed to import aws-sigv4-fetch");
	}

	const { url, accessKey, secretKey, sessionToken, model, region, service } =
		endpointAwsParametersSchema.parse(input);

	const signedFetch = createSignedFetcher({
		service,
		region,
		credentials:
			accessKey && secretKey
				? { accessKeyId: accessKey, secretAccessKey: secretKey, sessionToken }
				: undefined,
	});

	return async ({ messages, preprompt, continueMessage, generateSettings }) => {
		const prompt = await buildPrompt({
			messages,
			continueMessage,
			preprompt,
			model,
		});

		return textGenerationStream(
			{
				parameters: { ...model.parameters, ...generateSettings, return_full_text: false },
				model: url,
				inputs: prompt,
			},
			{
				use_cache: false,
				fetch: signedFetch,
			}
		);
	};
}

export default endpointAws;

</src/lib/server/endpoints/aws/endpointAws.ts>

<src/lib/server/endpoints/aws/endpointBedrock.ts>
import { z } from "zod";
import type { Endpoint } from "../endpoints";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import { createImageProcessorOptionsValidator, makeImageProcessor } from "../images";
import type { EndpointMessage } from "../endpoints";
import type { MessageFile } from "$lib/types/Message";

export const endpointBedrockParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	type: z.literal("bedrock"),
	region: z.string().default("us-east-1"),
	model: z.any(),
	anthropicVersion: z.string().default("bedrock-2023-05-31"),
	multimodal: z
		.object({
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: [
					"image/png",
					"image/jpeg",
					"image/webp",
					"image/avif",
					"image/tiff",
					"image/gif",
				],
				preferredMimeType: "image/webp",
				maxSizeInMB: Infinity,
				maxWidth: 4096,
				maxHeight: 4096,
			}),
		})
		.default({}),
});

export async function endpointBedrock(
	input: z.input<typeof endpointBedrockParametersSchema>
): Promise<Endpoint> {
	const { region, model, anthropicVersion, multimodal } =
		endpointBedrockParametersSchema.parse(input);

	let BedrockRuntimeClient, InvokeModelWithResponseStreamCommand;
	try {
		({ BedrockRuntimeClient, InvokeModelWithResponseStreamCommand } = await import(
			"@aws-sdk/client-bedrock-runtime"
		));
	} catch (error) {
		throw new Error("Failed to import @aws-sdk/client-bedrock-runtime. Make sure it's installed.");
	}

	const client = new BedrockRuntimeClient({
		region,
	});
	const imageProcessor = makeImageProcessor(multimodal.image);

	return async ({ messages, preprompt, generateSettings }) => {
		let system = preprompt;
		// Use the first message as the system prompt if it's of type "system"
		if (messages?.[0]?.from === "system") {
			system = messages[0].content;
			messages = messages.slice(1); // Remove the first system message from the array
		}

		const formattedMessages = await prepareMessages(messages, imageProcessor);

		let tokenId = 0;
		const parameters = { ...model.parameters, ...generateSettings };
		return (async function* () {
			const command = new InvokeModelWithResponseStreamCommand({
				body: Buffer.from(
					JSON.stringify({
						anthropic_version: anthropicVersion,
						max_tokens: parameters.max_new_tokens ? parameters.max_new_tokens : 4096,
						messages: formattedMessages,
						system,
					}),
					"utf-8"
				),
				contentType: "application/json",
				accept: "application/json",
				modelId: model.id,
				trace: "DISABLED",
			});

			const response = await client.send(command);

			let text = "";

			for await (const item of response.body ?? []) {
				const chunk = JSON.parse(new TextDecoder().decode(item.chunk?.bytes));
				const chunk_type = chunk.type;

				if (chunk_type === "content_block_delta") {
					text += chunk.delta.text;
					yield {
						token: {
							id: tokenId++,
							text: chunk.delta.text,
							logprob: 0,
							special: false,
						},
						generated_text: null,
						details: null,
					} satisfies TextGenerationStreamOutput;
				} else if (chunk_type === "message_stop") {
					yield {
						token: {
							id: tokenId++,
							text: "",
							logprob: 0,
							special: true,
						},
						generated_text: text,
						details: null,
					} satisfies TextGenerationStreamOutput;
				}
			}
		})();
	};
}

// Prepare the messages excluding system prompts
async function prepareMessages(
	messages: EndpointMessage[],
	imageProcessor: ReturnType<typeof makeImageProcessor>
) {
	const formattedMessages = [];

	for (const message of messages) {
		const content = [];

		if (message.files?.length) {
			content.push(...(await prepareFiles(imageProcessor, message.files)));
		}
		content.push({ type: "text", text: message.content });

		const lastMessage = formattedMessages[formattedMessages.length - 1];
		if (lastMessage && lastMessage.role === message.from) {
			// If the last message has the same role, merge the content
			lastMessage.content.push(...content);
		} else {
			formattedMessages.push({ role: message.from, content });
		}
	}
	return formattedMessages;
}

// Process files and convert them to base64 encoded strings
async function prepareFiles(
	imageProcessor: ReturnType<typeof makeImageProcessor>,
	files: MessageFile[]
) {
	const processedFiles = await Promise.all(files.map(imageProcessor));
	return processedFiles.map((file) => ({
		type: "image",
		source: { type: "base64", media_type: "image/jpeg", data: file.image.toString("base64") },
	}));
}

</src/lib/server/endpoints/aws/endpointBedrock.ts>

<src/lib/server/endpoints/ollama/endpointOllama.ts>
import { buildPrompt } from "$lib/buildPrompt";
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import type { Endpoint } from "../endpoints";
import { z } from "zod";

export const endpointOllamaParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("ollama"),
	url: z.string().url().default("http://127.0.0.1:11434"),
	ollamaName: z.string().min(1).optional(),
});

export function endpointOllama(input: z.input<typeof endpointOllamaParametersSchema>): Endpoint {
	const { url, model, ollamaName } = endpointOllamaParametersSchema.parse(input);

	return async ({ messages, preprompt, continueMessage, generateSettings }) => {
		const prompt = await buildPrompt({
			messages,
			continueMessage,
			preprompt,
			model,
		});

		const parameters = { ...model.parameters, ...generateSettings };

		const requestInfo = await fetch(`${url}/api/tags`, {
			method: "GET",
			headers: {
				"Content-Type": "application/json",
			},
		});

		const tags = await requestInfo.json();

		if (!tags.models.some((m: { name: string }) => m.name === ollamaName)) {
			// if its not in the tags, pull but dont wait for the answer
			fetch(`${url}/api/pull`, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					name: ollamaName ?? model.name,
					stream: false,
				}),
			});

			throw new Error("Currently pulling model from Ollama, please try again later.");
		}

		const r = await fetch(`${url}/api/generate`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				prompt,
				model: ollamaName ?? model.name,
				raw: true,
				options: {
					top_p: parameters.top_p,
					top_k: parameters.top_k,
					temperature: parameters.temperature,
					repeat_penalty: parameters.repetition_penalty,
					stop: parameters.stop,
					num_predict: parameters.max_new_tokens,
				},
			}),
		});

		if (!r.ok) {
			throw new Error(`Failed to generate text: ${await r.text()}`);
		}

		const encoder = new TextDecoderStream();
		const reader = r.body?.pipeThrough(encoder).getReader();

		return (async function* () {
			let generatedText = "";
			let tokenId = 0;
			let stop = false;
			while (!stop) {
				// read the stream and log the outputs to console
				const out = (await reader?.read()) ?? { done: false, value: undefined };
				// we read, if it's done we cancel
				if (out.done) {
					reader?.cancel();
					return;
				}

				if (!out.value) {
					return;
				}

				let data = null;
				try {
					data = JSON.parse(out.value);
				} catch (e) {
					return;
				}
				if (!data.done) {
					generatedText += data.response;

					yield {
						token: {
							id: tokenId++,
							text: data.response ?? "",
							logprob: 0,
							special: false,
						},
						generated_text: null,
						details: null,
					} satisfies TextGenerationStreamOutput;
				} else {
					stop = true;
					yield {
						token: {
							id: tokenId++,
							text: data.response ?? "",
							logprob: 0,
							special: true,
						},
						generated_text: generatedText,
						details: null,
					} satisfies TextGenerationStreamOutput;
				}
			}
		})();
	};
}

export default endpointOllama;

</src/lib/server/endpoints/ollama/endpointOllama.ts>

<src/lib/server/endpoints/preprocessMessages.ts>
import type { Message } from "$lib/types/Message";
import { format } from "date-fns";
import type { EndpointMessage } from "./endpoints";
import { downloadFile } from "../files/downloadFile";
import type { ObjectId } from "mongodb";

export async function preprocessMessages(
	messages: Message[],
	webSearch: Message["webSearch"],
	convId: ObjectId
): Promise<EndpointMessage[]> {
	return Promise.resolve(messages)
		.then((msgs) => addWebSearchContext(msgs, webSearch))
		.then((msgs) => downloadFiles(msgs, convId));
}

function addWebSearchContext(messages: Message[], webSearch: Message["webSearch"]) {
	const webSearchContext = webSearch?.contextSources
		.map(({ context }) => context.trim())
		.join("\n\n----------\n\n");

	// No web search context available, skip
	if (!webSearch || !webSearchContext?.trim()) return messages;
	// No messages available, skip
	if (messages.length === 0) return messages;

	const lastQuestion = messages.findLast((el) => el.from === "user")?.content ?? "";
	const previousQuestions = messages
		.filter((el) => el.from === "user")
		.slice(0, -1)
		.map((el) => el.content);
	const currentDate = format(new Date(), "MMMM d, yyyy");

	const finalMessage = {
		...messages[messages.length - 1],
		content: `I searched the web using the query: ${webSearch.searchQuery}.
Today is ${currentDate} and here are the results:
=====================
${webSearchContext}
=====================
${previousQuestions.length > 0 ? `Previous questions: \n- ${previousQuestions.join("\n- ")}` : ""}
Answer the question: ${lastQuestion}`,
	};

	return [...messages.slice(0, -1), finalMessage];
}

async function downloadFiles(messages: Message[], convId: ObjectId): Promise<EndpointMessage[]> {
	return Promise.all(
		messages.map<Promise<EndpointMessage>>((message) =>
			Promise.all((message.files ?? []).map((file) => downloadFile(file.value, convId))).then(
				(files) => ({ ...message, files })
			)
		)
	);
}

</src/lib/server/endpoints/preprocessMessages.ts>

<src/lib/server/endpoints/openai/endpointOai.ts>
import { z } from "zod";
import { openAICompletionToTextGenerationStream } from "./openAICompletionToTextGenerationStream";
import { openAIChatToTextGenerationStream } from "./openAIChatToTextGenerationStream";
import type { CompletionCreateParamsStreaming } from "openai/resources/completions";
import type { ChatCompletionCreateParamsStreaming } from "openai/resources/chat/completions";
import { buildPrompt } from "$lib/buildPrompt";
import { env } from "$env/dynamic/private";
import type { Endpoint } from "../endpoints";
import type OpenAI from "openai";
import { createImageProcessorOptionsValidator, makeImageProcessor } from "../images";
import type { MessageFile } from "$lib/types/Message";
import type { EndpointMessage } from "../endpoints";

export const endpointOAIParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("openai"),
	baseURL: z.string().url().default("https://api.openai.com/v1"),
	apiKey: z.string().default(env.OPENAI_API_KEY ?? "sk-"),
	completion: z
		.union([z.literal("completions"), z.literal("chat_completions")])
		.default("chat_completions"),
	defaultHeaders: z.record(z.string()).optional(),
	defaultQuery: z.record(z.string()).optional(),
	extraBody: z.record(z.any()).optional(),
	multimodal: z
		.object({
			image: createImageProcessorOptionsValidator({
				supportedMimeTypes: [
					"image/png",
					"image/jpeg",
					"image/webp",
					"image/avif",
					"image/tiff",
					"image/gif",
				],
				preferredMimeType: "image/webp",
				maxSizeInMB: Infinity,
				maxWidth: 4096,
				maxHeight: 4096,
			}),
		})
		.default({}),
});

export async function endpointOai(
	input: z.input<typeof endpointOAIParametersSchema>
): Promise<Endpoint> {
	const {
		baseURL,
		apiKey,
		completion,
		model,
		defaultHeaders,
		defaultQuery,
		multimodal,
		extraBody,
	} = endpointOAIParametersSchema.parse(input);

	/* eslint-disable-next-line no-shadow */
	let OpenAI;
	try {
		OpenAI = (await import("openai")).OpenAI;
	} catch (e) {
		throw new Error("Failed to import OpenAI", { cause: e });
	}

	const openai = new OpenAI({
		apiKey: apiKey ?? "sk-",
		baseURL,
		defaultHeaders,
		defaultQuery,
	});

	const imageProcessor = makeImageProcessor(multimodal.image);

	if (completion === "completions") {
		return async ({ messages, preprompt, continueMessage, generateSettings }) => {
			const prompt = await buildPrompt({
				messages,
				continueMessage,
				preprompt,
				model,
			});

			const parameters = { ...model.parameters, ...generateSettings };
			const body: CompletionCreateParamsStreaming = {
				model: model.id ?? model.name,
				prompt,
				stream: true,
				max_tokens: parameters?.max_new_tokens,
				stop: parameters?.stop,
				temperature: parameters?.temperature,
				top_p: parameters?.top_p,
				frequency_penalty: parameters?.repetition_penalty,
			};

			const openAICompletion = await openai.completions.create(body, {
				body: { ...body, ...extraBody },
			});

			return openAICompletionToTextGenerationStream(openAICompletion);
		};
	} else if (completion === "chat_completions") {
		return async ({ messages, preprompt, generateSettings }) => {
			let messagesOpenAI: OpenAI.Chat.Completions.ChatCompletionMessageParam[] =
				await prepareMessages(messages, imageProcessor);

			if (messagesOpenAI?.[0]?.role !== "system") {
				messagesOpenAI = [{ role: "system", content: "" }, ...messagesOpenAI];
			}

			if (messagesOpenAI?.[0]) {
				messagesOpenAI[0].content = preprompt ?? "";
			}

			const parameters = { ...model.parameters, ...generateSettings };
			const body: ChatCompletionCreateParamsStreaming = {
				model: model.id ?? model.name,
				messages: messagesOpenAI,
				stream: true,
				max_tokens: parameters?.max_new_tokens,
				stop: parameters?.stop,
				temperature: parameters?.temperature,
				top_p: parameters?.top_p,
				frequency_penalty: parameters?.repetition_penalty,
			};

			const openChatAICompletion = await openai.chat.completions.create(body, {
				body: { ...body, ...extraBody },
			});

			return openAIChatToTextGenerationStream(openChatAICompletion);
		};
	} else {
		throw new Error("Invalid completion type");
	}
}

async function prepareMessages(
	messages: EndpointMessage[],
	imageProcessor: ReturnType<typeof makeImageProcessor>
): Promise<OpenAI.Chat.Completions.ChatCompletionMessageParam[]> {
	return Promise.all(
		messages.map(async (message) => {
			if (message.from === "user") {
				return {
					role: message.from,
					content: [
						...(await prepareFiles(imageProcessor, message.files ?? [])),
						{ type: "text", text: message.content },
					],
				};
			}
			return {
				role: message.from,
				content: message.content,
			};
		})
	);
}

async function prepareFiles(
	imageProcessor: ReturnType<typeof makeImageProcessor>,
	files: MessageFile[]
): Promise<OpenAI.Chat.Completions.ChatCompletionContentPartImage[]> {
	const processedFiles = await Promise.all(files.map(imageProcessor));
	return processedFiles.map((file) => ({
		type: "image_url" as const,
		image_url: {
			url: `data:${file.mime};base64,${file.image.toString("base64")}`,
		},
	}));
}

</src/lib/server/endpoints/openai/endpointOai.ts>

<src/lib/server/endpoints/openai/openAIChatToTextGenerationStream.ts>
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import type OpenAI from "openai";
import type { Stream } from "openai/streaming";

/**
 * Transform a stream of OpenAI.Chat.ChatCompletion into a stream of TextGenerationStreamOutput
 */
export async function* openAIChatToTextGenerationStream(
	completionStream: Stream<OpenAI.Chat.Completions.ChatCompletionChunk>
) {
	let generatedText = "";
	let tokenId = 0;
	for await (const completion of completionStream) {
		const { choices } = completion;
		const content = choices[0]?.delta?.content ?? "";
		const last = choices[0]?.finish_reason === "stop" || choices[0]?.finish_reason === "length";
		if (content) {
			generatedText = generatedText + content;
		}
		const output: TextGenerationStreamOutput = {
			token: {
				id: tokenId++,
				text: content ?? "",
				logprob: 0,
				special: last,
			},
			generated_text: last ? generatedText : null,
			details: null,
		};
		yield output;
	}
}

</src/lib/server/endpoints/openai/openAIChatToTextGenerationStream.ts>

<src/lib/server/endpoints/openai/openAICompletionToTextGenerationStream.ts>
import type { TextGenerationStreamOutput } from "@huggingface/inference";
import type OpenAI from "openai";
import type { Stream } from "openai/streaming";

/**
 * Transform a stream of OpenAI.Completions.Completion into a stream of TextGenerationStreamOutput
 */
export async function* openAICompletionToTextGenerationStream(
	completionStream: Stream<OpenAI.Completions.Completion>
) {
	let generatedText = "";
	let tokenId = 0;
	for await (const completion of completionStream) {
		const { choices } = completion;
		const text = choices[0]?.text ?? "";
		const last = choices[0]?.finish_reason === "stop" || choices[0]?.finish_reason === "length";
		if (text) {
			generatedText = generatedText + text;
		}
		const output: TextGenerationStreamOutput = {
			token: {
				id: tokenId++,
				text,
				logprob: 0,
				special: last,
			},
			generated_text: last ? generatedText : null,
			details: null,
		};
		yield output;
	}
}

</src/lib/server/endpoints/openai/openAICompletionToTextGenerationStream.ts>

<src/lib/server/textGeneration/title.ts>
import { env } from "$env/dynamic/private";
import { generateFromDefaultEndpoint } from "$lib/server/generateFromDefaultEndpoint";
import type { EndpointMessage } from "../endpoints/endpoints";
import { logger } from "$lib/server/logger";
import { MessageUpdateType, type MessageUpdate } from "$lib/types/MessageUpdate";
import type { Conversation } from "$lib/types/Conversation";

export async function* generateTitleForConversation(
	conv: Conversation
): AsyncGenerator<MessageUpdate, undefined, undefined> {
	try {
		const userMessage = conv.messages.find((m) => m.from === "user");
		// HACK: detect if the conversation is new
		if (conv.title !== "New Chat" || !userMessage) return;

		const prompt = userMessage.content;
		const title = (await generateTitle(prompt)) ?? "New Chat";

		yield {
			type: MessageUpdateType.Title,
			title,
		};
	} catch (cause) {
		logger.error(Error("Failed whilte generating title for conversation", { cause }));
	}
}

export async function generateTitle(prompt: string) {
	if (env.LLM_SUMMARIZATION !== "true") {
		return prompt.split(/\s+/g).slice(0, 5).join(" ");
	}

	const messages: Array<EndpointMessage> = [
		{
			from: "system",
			content:
				"You are a summarization AI. You'll never answer a user's question directly, but instead summarize the user's request into a single short sentence of four words or less. Always start your answer with an emoji relevant to the summary",
		},
		{ from: "user", content: "Who is the president of Gabon?" },
		{ from: "assistant", content: "🇬🇦 President of Gabon" },
		{ from: "user", content: "Who is Julien Chaumond?" },
		{ from: "assistant", content: "🧑 Julien Chaumond" },
		{ from: "user", content: "what is 1 + 1?" },
		{ from: "assistant", content: "🔢 Simple math operation" },
		{ from: "user", content: "What are the latest news?" },
		{ from: "assistant", content: "📰 Latest news" },
		{ from: "user", content: "How to make a great cheesecake?" },
		{ from: "assistant", content: "🍰 Cheesecake recipe" },
		{ from: "user", content: "what is your favorite movie? do a short answer." },
		{ from: "assistant", content: "🎥 Favorite movie" },
		{ from: "user", content: "Explain the concept of artificial intelligence in one sentence" },
		{ from: "assistant", content: "🤖 AI definition" },
		{ from: "user", content: "Draw a cute cat" },
		{ from: "assistant", content: "🐱 Cute cat drawing" },
		{ from: "user", content: prompt },
	];

	return await generateFromDefaultEndpoint({
		messages,
		preprompt:
			"You are a summarization AI. Summarize the user's request into a single short sentence of four words or less. Do not try to answer it, only summarize the user's query. Always start your answer with an emoji relevant to the summary",
		generateSettings: {
			max_new_tokens: 15,
		},
	})
		.then((summary) => {
			// add an emoji if none is found in the first three characters
			if (!/\p{Emoji}/u.test(summary.slice(0, 3))) {
				return "💬 " + summary;
			}
			return summary;
		})
		.catch((e) => {
			logger.error(e);
			return null;
		});
}

</src/lib/server/textGeneration/title.ts>

<src/lib/server/textGeneration/types.ts>
import type { ProcessedModel } from "../models";
import type { Endpoint } from "../endpoints/endpoints";
import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";
import type { Assistant } from "$lib/types/Assistant";

export interface TextGenerationContext {
	model: ProcessedModel;
	endpoint: Endpoint;
	conv: Conversation;
	messages: Message[];
	assistant?: Pick<Assistant, "rag" | "dynamicPrompt" | "generateSettings" | "tools">;
	isContinue: boolean;
	webSearch: boolean;
	toolsPreference: Array<string>;
	promptedAt: Date;
	ip: string;
	username?: string;
}

</src/lib/server/textGeneration/types.ts>

<src/lib/server/textGeneration/assistant.ts>
import { isURLLocal } from "../isURLLocal";
import { env } from "$env/dynamic/private";
import { collections } from "$lib/server/database";
import type { Assistant } from "$lib/types/Assistant";
import type { ObjectId } from "mongodb";

export async function processPreprompt(preprompt: string) {
	const urlRegex = /{{\s?url=(.*?)\s?}}/g;

	for (const match of preprompt.matchAll(urlRegex)) {
		try {
			const url = new URL(match[1]);
			if ((await isURLLocal(url)) && env.ENABLE_LOCAL_FETCH !== "true") {
				throw new Error("URL couldn't be fetched, it resolved to a local address.");
			}

			const res = await fetch(url.href);

			if (!res.ok) {
				throw new Error("URL couldn't be fetched, error " + res.status);
			}
			const text = await res.text();
			preprompt = preprompt.replaceAll(match[0], text);
		} catch (e) {
			preprompt = preprompt.replaceAll(match[0], (e as Error).message);
		}
	}

	return preprompt;
}

export async function getAssistantById(id?: ObjectId) {
	return collections.assistants
		.findOne<Pick<Assistant, "rag" | "dynamicPrompt" | "generateSettings" | "tools">>(
			{ _id: id },
			{ projection: { rag: 1, dynamicPrompt: 1, generateSettings: 1, tools: 1 } }
		)
		.then((a) => a ?? undefined);
}

export function assistantHasWebSearch(assistant?: Pick<Assistant, "rag"> | null) {
	return (
		env.ENABLE_ASSISTANTS_RAG === "true" &&
		!!assistant?.rag &&
		(assistant.rag.allowedLinks.length > 0 ||
			assistant.rag.allowedDomains.length > 0 ||
			assistant.rag.allowAllDomains)
	);
}

export function assistantHasDynamicPrompt(assistant?: Pick<Assistant, "dynamicPrompt">) {
	return env.ENABLE_ASSISTANTS_RAG === "true" && Boolean(assistant?.dynamicPrompt);
}

</src/lib/server/textGeneration/assistant.ts>

<src/lib/server/textGeneration/tools.ts>
import { ToolResultStatus, type ToolCall, type Tool, type ToolResult } from "$lib/types/Tool";
import { v4 as uuidV4 } from "uuid";
import { getCallMethod, toolFromConfigs, type BackendToolContext } from "../tools";
import {
	MessageToolUpdateType,
	MessageUpdateStatus,
	MessageUpdateType,
	type MessageUpdate,
} from "$lib/types/MessageUpdate";
import type { TextGenerationContext } from "./types";

import directlyAnswer from "../tools/directlyAnswer";
import websearch from "../tools/web/search";
import { z } from "zod";
import { logger } from "../logger";
import { extractJson, toolHasName } from "../tools/utils";
import { mergeAsyncGenerators } from "$lib/utils/mergeAsyncGenerators";
import { MetricsServer } from "../metrics";
import { stringifyError } from "$lib/utils/stringifyError";
import { collections } from "../database";
import { ObjectId } from "mongodb";
import type { Message } from "$lib/types/Message";
import type { Assistant } from "$lib/types/Assistant";
import { assistantHasWebSearch } from "./assistant";

export async function getTools(
	toolsPreference: Array<string>,
	assistant: Pick<Assistant, "rag" | "tools"> | undefined
): Promise<Tool[]> {
	let preferences = toolsPreference;

	if (assistant) {
		if (assistant?.tools?.length) {
			preferences = assistant.tools;

			if (assistantHasWebSearch(assistant)) {
				preferences.push(websearch._id.toString());
			}
		} else {
			if (assistantHasWebSearch(assistant)) {
				return [websearch, directlyAnswer];
			}
			return [directlyAnswer];
		}
	}

	// filter based on tool preferences, add the tools that are on by default
	const activeConfigTools = toolFromConfigs.filter((el) => {
		if (el.isLocked && el.isOnByDefault && !assistant) return true;
		return preferences?.includes(el._id.toString()) ?? (el.isOnByDefault && !assistant);
	});

	// find tool where the id is in preferences
	const activeCommunityTools = await collections.tools
		.find({
			_id: { $in: preferences.map((el) => new ObjectId(el)) },
		})
		.toArray()
		.then((el) => el.map((el) => ({ ...el, call: getCallMethod(el) })));

	return [...activeConfigTools, ...activeCommunityTools];
}

async function* callTool(
	ctx: BackendToolContext,
	tools: Tool[],
	call: ToolCall
): AsyncGenerator<MessageUpdate, ToolResult | undefined, undefined> {
	const uuid = uuidV4();

	const tool = tools.find((el) => toolHasName(call.name, el));
	if (!tool) {
		return { call, status: ToolResultStatus.Error, message: `Could not find tool "${call.name}"` };
	}

	// Special case for directly_answer tool where we ignore
	if (toolHasName(directlyAnswer.name, tool)) return;

	const startTime = Date.now();
	MetricsServer.getMetrics().tool.toolUseCount.inc({ tool: call.name });

	yield {
		type: MessageUpdateType.Tool,
		subtype: MessageToolUpdateType.Call,
		uuid,
		call,
	};

	try {
		const toolResult = yield* tool.call(call.parameters, ctx, uuid);

		yield {
			type: MessageUpdateType.Tool,
			subtype: MessageToolUpdateType.Result,
			uuid,
			result: { ...toolResult, call, status: ToolResultStatus.Success },
		};

		MetricsServer.getMetrics().tool.toolUseDuration.observe(
			{ tool: call.name },
			Date.now() - startTime
		);

		await collections.tools.findOneAndUpdate({ _id: tool._id }, { $inc: { useCount: 1 } });

		return { ...toolResult, call, status: ToolResultStatus.Success };
	} catch (error) {
		MetricsServer.getMetrics().tool.toolUseCountError.inc({ tool: call.name });
		logger.error(error, `Failed while running tool ${call.name}. ${stringifyError(error)}`);

		yield {
			type: MessageUpdateType.Tool,
			subtype: MessageToolUpdateType.Error,
			uuid,
			message:
				"An error occurred while calling the tool " + call.name + ": " + stringifyError(error),
		};

		return {
			call,
			status: ToolResultStatus.Error,
			message:
				"An error occurred while calling the tool " + call.name + ": " + stringifyError(error),
		};
	}
}

export async function* runTools(
	ctx: TextGenerationContext,
	tools: Tool[],
	preprompt?: string
): AsyncGenerator<MessageUpdate, ToolResult[], undefined> {
	const { endpoint, conv, messages, assistant, ip, username } = ctx;
	const calls: ToolCall[] = [];

	const pickToolStartTime = Date.now();
	// append a message with the list of all available files

	const files = messages.reduce((acc, curr, idx) => {
		if (curr.files) {
			const prefix = (curr.from === "user" ? "input" : "ouput") + "_" + idx;
			acc.push(
				...curr.files.map(
					(file, fileIdx) => `${prefix}_${fileIdx}.${file?.name?.split(".")?.pop()?.toLowerCase()}`
				)
			);
		}
		return acc;
	}, [] as string[]);

	let formattedMessages = messages.map((message, msgIdx) => {
		let content = message.content;

		if (message.files && message.files.length > 0) {
			content +=
				"\n\nAdded files: \n - " +
				message.files
					.map((file, fileIdx) => {
						const prefix = message.from === "user" ? "input" : "output";
						const fileName = file.name.split(".").pop()?.toLowerCase();

						return `${prefix}_${msgIdx}_${fileIdx}.${fileName}`;
					})
					.join("\n - ");
		}

		return {
			...message,
			content,
		} satisfies Message;
	});

	const fileMsg = {
		id: crypto.randomUUID(),
		from: "system",
		content:
			"Here is the list of available filenames that can be used as input for tools. Use the filenames that are in this list. \n The filename structure is as follows : {input for user|output for tool}_{message index in the conversation}_{file index in the list of files}.{file extension} \n - " +
			files.join("\n - ") +
			"\n\n\n",
	} satisfies Message;

	// put fileMsg before last if files.length > 0
	formattedMessages = files.length
		? [...formattedMessages.slice(0, -1), fileMsg, ...formattedMessages.slice(-1)]
		: messages;

	// do the function calling bits here
	for await (const output of await endpoint({
		messages: formattedMessages,
		preprompt,
		generateSettings: assistant?.generateSettings,
		tools: tools.map((tool) => ({
			...tool,
			inputs: tool.inputs.map((input) => ({
				...input,
				type: input.type === "file" ? "str" : input.type,
			})),
		})),
	})) {
		// model natively supports tool calls
		if (output.token.toolCalls) {
			calls.push(...output.token.toolCalls);
			continue;
		}

		// look for a code blocks of ```json and parse them
		// if they're valid json, add them to the calls array
		if (output.generated_text) {
			try {
				const rawCalls = await extractJson(output.generated_text);
				const newCalls = rawCalls
					.filter(isExternalToolCall)
					.map((call) => externalToToolCall(call, tools))
					.filter((call) => call !== undefined) as ToolCall[];

				calls.push(...newCalls);
			} catch (e) {
				logger.error(e, "Error while parsing tool calls, please retry");
				// error parsing the calls
				yield {
					type: MessageUpdateType.Status,
					status: MessageUpdateStatus.Error,
					message: "Error while parsing tool calls, please retry",
				};
			}
		}
	}

	MetricsServer.getMetrics().tool.timeToChooseTools.observe(
		{ model: conv.model },
		Date.now() - pickToolStartTime
	);

	const toolContext: BackendToolContext = { conv, messages, preprompt, assistant, ip, username };
	const toolResults: (ToolResult | undefined)[] = yield* mergeAsyncGenerators(
		calls.map((call) => callTool(toolContext, tools, call))
	);
	return toolResults.filter((result): result is ToolResult => result !== undefined);
}

const externalToolCall = z.object({
	tool_name: z.string(),
	parameters: z.record(z.any()),
});

type ExternalToolCall = z.infer<typeof externalToolCall>;

function isExternalToolCall(call: unknown): call is ExternalToolCall {
	return externalToolCall.safeParse(call).success;
}

function externalToToolCall(call: ExternalToolCall, tools: Tool[]): ToolCall | undefined {
	// Convert - to _ since some models insist on using _ instead of -
	const tool = tools.find((tool) => toolHasName(call.tool_name, tool));

	if (!tool) {
		logger.debug(`Model requested tool that does not exist: "${call.tool_name}". Skipping tool...`);
		return;
	}

	const parametersWithDefaults: Record<string, string> = {};

	for (const input of tool.inputs) {
		const value = call.parameters[input.name];

		// Required so ensure it's there, otherwise return undefined
		if (input.paramType === "required") {
			if (value === undefined) {
				logger.debug(
					`Model requested tool "${call.tool_name}" but was missing required parameter "${input.name}". Skipping tool...`
				);
				return;
			}
			parametersWithDefaults[input.name] = value;
			continue;
		}

		// Optional so use default if not there
		parametersWithDefaults[input.name] = value;

		if (input.paramType === "optional") {
			parametersWithDefaults[input.name] ??= input.default.toString();
		}
	}

	return {
		name: call.tool_name,
		parameters: parametersWithDefaults,
	};
}

</src/lib/server/textGeneration/tools.ts>

<src/lib/server/textGeneration/generate.ts>
import type { ToolResult } from "$lib/types/Tool";
import { MessageUpdateType, type MessageUpdate } from "$lib/types/MessageUpdate";
import { AbortedGenerations } from "../abortedGenerations";
import type { TextGenerationContext } from "./types";
import type { EndpointMessage } from "../endpoints/endpoints";

type GenerateContext = Omit<TextGenerationContext, "messages"> & { messages: EndpointMessage[] };

export async function* generate(
	{ model, endpoint, conv, messages, assistant, isContinue, promptedAt }: GenerateContext,
	toolResults: ToolResult[],
	preprompt?: string
): AsyncIterable<MessageUpdate> {
	for await (const output of await endpoint({
		messages,
		preprompt,
		continueMessage: isContinue,
		generateSettings: assistant?.generateSettings,
		toolResults,
	})) {
		// text generation completed
		if (output.generated_text) {
			let interrupted =
				!output.token.special && !model.parameters.stop?.includes(output.token.text);

			let text = output.generated_text.trimEnd();
			for (const stopToken of model.parameters.stop ?? []) {
				if (!text.endsWith(stopToken)) continue;

				interrupted = false;
				text = text.slice(0, text.length - stopToken.length);
			}

			yield { type: MessageUpdateType.FinalAnswer, text, interrupted };
			continue;
		}

		// ignore special tokens
		if (output.token.special) continue;

		// pass down normal token
		yield { type: MessageUpdateType.Stream, token: output.token.text };

		// abort check
		const date = AbortedGenerations.getInstance().getList().get(conv._id.toString());
		if (date && date > promptedAt) break;

		// no output check
		if (!output) break;
	}
}

</src/lib/server/textGeneration/generate.ts>

<src/lib/server/textGeneration/index.ts>
import { runWebSearch } from "$lib/server/websearch/runWebSearch";
import { preprocessMessages } from "../endpoints/preprocessMessages";

import { generateTitleForConversation } from "./title";
import {
	assistantHasDynamicPrompt,
	assistantHasWebSearch,
	getAssistantById,
	processPreprompt,
} from "./assistant";
import { getTools, runTools } from "./tools";
import type { WebSearch } from "$lib/types/WebSearch";
import {
	type MessageUpdate,
	MessageUpdateType,
	MessageUpdateStatus,
} from "$lib/types/MessageUpdate";
import { generate } from "./generate";
import { mergeAsyncGenerators } from "$lib/utils/mergeAsyncGenerators";
import type { TextGenerationContext } from "./types";
import type { ToolResult } from "$lib/types/Tool";
import { toolHasName } from "../tools/utils";

async function* keepAlive(done: AbortSignal): AsyncGenerator<MessageUpdate, undefined, undefined> {
	while (!done.aborted) {
		yield {
			type: MessageUpdateType.Status,
			status: MessageUpdateStatus.KeepAlive,
		};
		await new Promise((resolve) => setTimeout(resolve, 5000));
	}
}

export async function* textGeneration(ctx: TextGenerationContext) {
	const done = new AbortController();

	const titleGen = generateTitleForConversation(ctx.conv);
	const textGen = textGenerationWithoutTitle(ctx, done);
	const keepAliveGen = keepAlive(done.signal);

	// keep alive until textGen is done

	yield* mergeAsyncGenerators([titleGen, textGen, keepAliveGen]);
}

async function* textGenerationWithoutTitle(
	ctx: TextGenerationContext,
	done: AbortController
): AsyncGenerator<MessageUpdate, undefined, undefined> {
	yield {
		type: MessageUpdateType.Status,
		status: MessageUpdateStatus.Started,
	};

	ctx.assistant ??= await getAssistantById(ctx.conv.assistantId);
	const { model, conv, messages, assistant, isContinue, webSearch, toolsPreference } = ctx;
	const convId = conv._id;

	let webSearchResult: WebSearch | undefined;

	// run websearch if:
	// - it's not continuing a previous message
	// - AND the model doesn't support tools and websearch is selected
	// - OR the assistant has websearch enabled (no tools for assistants for now)
	if (
		!isContinue &&
		((!model.tools && webSearch && !conv.assistantId) || assistantHasWebSearch(assistant))
	) {
		webSearchResult = yield* runWebSearch(conv, messages, assistant?.rag);
	}

	let preprompt = conv.preprompt;
	if (assistantHasDynamicPrompt(assistant) && preprompt) {
		preprompt = await processPreprompt(preprompt);
		if (messages[0].from === "system") messages[0].content = preprompt;
	}

	let toolResults: ToolResult[] = [];

	if (model.tools) {
		const tools = await getTools(toolsPreference, ctx.assistant);
		const toolCallsRequired = tools.some((tool) => !toolHasName("directly_answer", tool));
		if (toolCallsRequired) toolResults = yield* runTools(ctx, tools, preprompt);
	}

	const processedMessages = await preprocessMessages(messages, webSearchResult, convId);
	yield* generate({ ...ctx, messages: processedMessages }, toolResults, preprompt);
	done.abort();
}

</src/lib/server/textGeneration/index.ts>

<src/lib/server/usageLimits.ts>
import { z } from "zod";
import { env } from "$env/dynamic/private";
import JSON5 from "json5";

// RATE_LIMIT is the legacy way to define messages per minute limit
export const usageLimitsSchema = z
	.object({
		conversations: z.coerce.number().optional(), // how many conversations
		messages: z.coerce.number().optional(), // how many messages in a conversation
		assistants: z.coerce.number().optional(), // how many assistants
		messageLength: z.coerce.number().optional(), // how long can a message be before we cut it off
		messagesPerMinute: z
			.preprocess((val) => {
				if (val === undefined) {
					return env.RATE_LIMIT;
				}
				return val;
			}, z.coerce.number().optional())
			.optional(), // how many messages per minute
		tools: z.coerce.number().optional(), // how many tools
	})
	.optional();

export const usageLimits = usageLimitsSchema.parse(JSON5.parse(env.USAGE_LIMITS));

</src/lib/server/usageLimits.ts>

<src/lib/server/exitHandler.ts>
import { randomUUID } from "$lib/utils/randomUuid";
import { timeout } from "$lib/utils/timeout";
import { logger } from "./logger";

type ExitHandler = () => void | Promise<void>;
type ExitHandlerUnsubscribe = () => void;

const listeners = new Map<string, ExitHandler>();

export function onExit(cb: ExitHandler): ExitHandlerUnsubscribe {
	const uuid = randomUUID();
	listeners.set(uuid, cb);
	return () => {
		listeners.delete(uuid);
	};
}

async function runExitHandler(handler: ExitHandler): Promise<void> {
	return timeout(Promise.resolve().then(handler), 30_000).catch((err) => {
		logger.error(err, "Exit handler failed to run");
	});
}

export function initExitHandler() {
	let signalCount = 0;
	const exitHandler = async () => {
		signalCount++;
		if (signalCount === 1) {
			logger.info("Received signal... Exiting");
			await Promise.all(Array.from(listeners.values()).map(runExitHandler));
			logger.info("All exit handlers ran... Waiting for svelte server to exit");
		}
		if (signalCount === 3) {
			logger.warn("Received 3 signals... Exiting immediately");
			process.exit(1);
		}
	};

	process.on("SIGINT", exitHandler);
	process.on("SIGTERM", exitHandler);
}

</src/lib/server/exitHandler.ts>

<src/lib/server/generateFromDefaultEndpoint.ts>
import { smallModel } from "$lib/server/models";
import type { EndpointMessage } from "./endpoints/endpoints";

export async function generateFromDefaultEndpoint({
	messages,
	preprompt,
	generateSettings,
}: {
	messages: EndpointMessage[];
	preprompt?: string;
	generateSettings?: Record<string, unknown>;
}): Promise<string> {
	const endpoint = await smallModel.getEndpoint();

	const tokenStream = await endpoint({ messages, preprompt, generateSettings });

	for await (const output of tokenStream) {
		// if not generated_text is here it means the generation is not done
		if (output.generated_text) {
			let generated_text = output.generated_text;
			for (const stop of [...(smallModel.parameters?.stop ?? []), "<|endoftext|>"]) {
				if (generated_text.endsWith(stop)) {
					generated_text = generated_text.slice(0, -stop.length).trimEnd();
				}
			}
			return generated_text;
		}
	}
	throw new Error("Generation failed");
}

</src/lib/server/generateFromDefaultEndpoint.ts>

<src/lib/server/websearch/embed/embed.ts>
import { MetricsServer } from "$lib/server/metrics";
import type { WebSearchScrapedSource, WebSearchUsedSource } from "$lib/types/WebSearch";
import type { EmbeddingBackendModel } from "../../embeddingModels";
import { getSentenceSimilarity, innerProduct } from "../../sentenceSimilarity";
import { MarkdownElementType, type MarkdownElement } from "../markdown/types";
import { stringifyMarkdownElement } from "../markdown/utils/stringify";
import { getCombinedSentenceSimilarity } from "./combine";
import { flattenTree } from "./tree";

const MIN_CHARS = 3_000;
const SOFT_MAX_CHARS = 8_000;

export async function findContextSources(
	sources: WebSearchScrapedSource[],
	prompt: string,
	embeddingModel: EmbeddingBackendModel
) {
	const startTime = Date.now();

	const sourcesMarkdownElems = sources.map((source) => flattenTree(source.page.markdownTree));
	const markdownElems = sourcesMarkdownElems.flat();

	// When using CPU embedding (transformersjs), join sentences together to the max character limit
	// to reduce inference time
	const embeddingFunc =
		embeddingModel.endpoints[0].type === "transformersjs"
			? getCombinedSentenceSimilarity
			: getSentenceSimilarity;

	const embeddings = await embeddingFunc(
		embeddingModel,
		prompt,
		markdownElems
			.map(stringifyMarkdownElement)
			// Safety in case the stringified markdown elements are too long
			// but chunking should have happened earlier
			.map((elem) => elem.slice(0, embeddingModel.chunkCharLength))
	);

	const topEmbeddings = embeddings
		.sort((a, b) => a.distance - b.distance)
		.filter((embedding) => markdownElems[embedding.idx].type !== MarkdownElementType.Header);

	let totalChars = 0;
	const selectedMarkdownElems = new Set<MarkdownElement>();
	const selectedEmbeddings: number[][] = [];
	for (const embedding of topEmbeddings) {
		const elem = markdownElems[embedding.idx];

		// Ignore elements that are too similar to already selected elements
		const tooSimilar = selectedEmbeddings.some(
			(selectedEmbedding) => innerProduct(selectedEmbedding, embedding.embedding) < 0.01
		);
		if (tooSimilar) continue;

		// Add element
		if (!selectedMarkdownElems.has(elem)) {
			selectedMarkdownElems.add(elem);
			selectedEmbeddings.push(embedding.embedding);
			totalChars += elem.content.length;
		}

		// Add element's parent (header)
		if (elem.parent && !selectedMarkdownElems.has(elem.parent)) {
			selectedMarkdownElems.add(elem.parent);
			totalChars += elem.parent.content.length;
		}

		if (totalChars > SOFT_MAX_CHARS) break;
		if (totalChars > MIN_CHARS && embedding.distance > 0.25) break;
	}

	const contextSources = sourcesMarkdownElems
		.map<WebSearchUsedSource>((elems, idx) => {
			const sourceSelectedElems = elems.filter((elem) => selectedMarkdownElems.has(elem));
			const context = sourceSelectedElems.map(stringifyMarkdownElement).join("\n");
			const source = sources[idx];
			return { ...source, context };
		})
		.filter((contextSource) => contextSource.context.length > 0);

	MetricsServer.getMetrics().webSearch.embeddingDuration.observe(Date.now() - startTime);

	return contextSources;
}

</src/lib/server/websearch/embed/embed.ts>

<src/lib/server/websearch/embed/combine.ts>
import type { EmbeddingBackendModel } from "$lib/server/embeddingModels";
import { getSentenceSimilarity } from "$lib/server/sentenceSimilarity";

/**
 * Combines sentences together to reach the maximum character limit of the embedding model
 * Improves performance considerably when using CPU embedding
 */
export async function getCombinedSentenceSimilarity(
	embeddingModel: EmbeddingBackendModel,
	query: string,
	sentences: string[]
): ReturnType<typeof getSentenceSimilarity> {
	const combinedSentences = sentences.reduce<{ text: string; indices: number[] }[]>(
		(acc, sentence, idx) => {
			const lastSentence = acc[acc.length - 1];
			if (!lastSentence) return [{ text: sentence, indices: [idx] }];
			if (lastSentence.text.length + sentence.length < embeddingModel.chunkCharLength) {
				lastSentence.text += ` ${sentence}`;
				lastSentence.indices.push(idx);
				return acc;
			}
			return [...acc, { text: sentence, indices: [idx] }];
		},
		[]
	);

	const embeddings = await getSentenceSimilarity(
		embeddingModel,
		query,
		combinedSentences.map(({ text }) => text)
	);

	return embeddings.flatMap((embedding, idx) => {
		const { indices } = combinedSentences[idx];
		return indices.map((i) => ({ ...embedding, idx: i }));
	});
}

</src/lib/server/websearch/embed/combine.ts>

<src/lib/server/websearch/embed/tree.ts>
import type { MarkdownElement } from "../markdown/types";

export function flattenTree(elem: MarkdownElement): MarkdownElement[] {
	if ("children" in elem) return [elem, ...elem.children.flatMap(flattenTree)];
	return [elem];
}

</src/lib/server/websearch/embed/tree.ts>

<src/lib/server/websearch/markdown/fromHtml.ts>
import { collapseString, sanitizeString } from "./utils/nlp";
import { stringifyHTMLElements, stringifyHTMLElementsUnformatted } from "./utils/stringify";
import { MarkdownElementType, tagNameMap, type HeaderElement, type MarkdownElement } from "./types";
import type { SerializedHTMLElement } from "../scrape/types";

interface ConversionState {
	defaultType:
		| MarkdownElementType.Paragraph
		| MarkdownElementType.BlockQuote
		| MarkdownElementType.UnorderedListItem
		| MarkdownElementType.OrderedListItem;
	listDepth: number;
	blockQuoteDepth: number;
}
export function htmlElementToMarkdownElements(
	parent: HeaderElement,
	elem: SerializedHTMLElement | string,
	prevState: ConversionState = {
		defaultType: MarkdownElementType.Paragraph,
		listDepth: 0,
		blockQuoteDepth: 0,
	}
): MarkdownElement | MarkdownElement[] {
	// Found text so create an element based on the previous state
	if (typeof elem === "string") {
		if (elem.trim().length === 0) return [];
		if (
			prevState.defaultType === MarkdownElementType.UnorderedListItem ||
			prevState.defaultType === MarkdownElementType.OrderedListItem
		) {
			return {
				parent,
				type: prevState.defaultType,
				content: elem,
				depth: prevState.listDepth,
			};
		}
		if (prevState.defaultType === MarkdownElementType.BlockQuote) {
			return {
				parent,
				type: prevState.defaultType,
				content: elem,
				depth: prevState.blockQuoteDepth,
			};
		}
		return { parent, type: prevState.defaultType, content: elem };
	}

	const type = tagNameMap[elem.tagName] ?? MarkdownElementType.Paragraph;

	// Update the state based on the current element
	const state: ConversionState = { ...prevState };
	if (type === MarkdownElementType.UnorderedList || type === MarkdownElementType.OrderedList) {
		state.listDepth += 1;
		state.defaultType =
			type === MarkdownElementType.UnorderedList
				? MarkdownElementType.UnorderedListItem
				: MarkdownElementType.OrderedListItem;
	}
	if (type === MarkdownElementType.BlockQuote) {
		state.defaultType = MarkdownElementType.BlockQuote;
		state.blockQuoteDepth += 1;
	}

	// Headers
	if (type === MarkdownElementType.Header) {
		return {
			parent,
			type,
			level: Number(elem.tagName[1]),
			content: collapseString(stringifyHTMLElements(elem.content)),
			children: [],
		};
	}

	// Code blocks
	if (type === MarkdownElementType.CodeBlock) {
		return {
			parent,
			type,
			content: sanitizeString(stringifyHTMLElementsUnformatted(elem.content)),
		};
	}

	// Typical case, we want to flatten the DOM and only create elements when we see text
	return elem.content.flatMap((el) => htmlElementToMarkdownElements(parent, el, state));
}

export function mergeAdjacentElements(elements: MarkdownElement[]): MarkdownElement[] {
	return elements.reduce<MarkdownElement[]>((acc, elem) => {
		const last = acc[acc.length - 1];
		if (last && last.type === MarkdownElementType.Paragraph && last.type === elem.type) {
			last.content += elem.content;
			return acc;
		}
		return [...acc, elem];
	}, []);
}

</src/lib/server/websearch/markdown/fromHtml.ts>

<src/lib/server/websearch/markdown/utils/nlp.ts>
/** Remove excess whitespace and newlines */
export const sanitizeString = (str: string) =>
	str
		.split("\n")
		.map((s) => s.trim())
		.filter(Boolean)
		.join("\n")
		.replaceAll(/ +/g, " ");

/** Collapses a string into a single line */
export const collapseString = (str: string) => sanitizeString(str.replaceAll(/\n/g, " "));

</src/lib/server/websearch/markdown/utils/nlp.ts>

<src/lib/server/websearch/markdown/utils/chunk.ts>
import { sentences as splitBySentences } from "sbd";
import { MarkdownElementType, type MarkdownElement } from "../types";

export function chunkElements(elements: MarkdownElement[], maxLength: number): MarkdownElement[] {
	return elements.flatMap((elem) => {
		// Can't split headers because it would break the tree, and this situation should be rare
		// so we just cut off the end
		if (elem.type === MarkdownElementType.Header) {
			return { ...elem, content: elem.content.slice(0, maxLength) };
		}
		const contentChunks = enforceMaxLength(elem.content, maxLength);
		return contentChunks.map<MarkdownElement>((content) => ({ ...elem, content }));
	});
}

const delimitersByPriority = ["?", "!", ".", ";", ":", ",", "|", " - ", " ", "-"];
function enforceMaxLength(text: string, maxLength: number): string[] {
	if (text.length <= maxLength) return [text].filter(Boolean);
	return splitBySentences(text)
		.flatMap((sentence) => {
			if (sentence.length <= maxLength) return sentence;

			// Discover all necessary split points to fit the sentence within the max length
			const indices: [number, number][] = [];
			while ((indices.at(-1)?.[1] ?? 0) < sentence.length) {
				const prevIndex = indices.at(-1)?.[1] ?? 0;

				// Remaining text fits within maxLength
				if (prevIndex + maxLength >= sentence.length) {
					indices.push([prevIndex, sentence.length]);
					continue;
				}

				const bestDelimiter = delimitersByPriority.find(
					(delimiter) => sentence.lastIndexOf(delimiter, prevIndex + maxLength) !== -1
				);
				// Fallback in the unusual case that no delimiter is found
				if (!bestDelimiter) {
					indices.push([prevIndex, prevIndex + maxLength]);
					continue;
				}

				const closestDelimiter = sentence.lastIndexOf(bestDelimiter, prevIndex + maxLength);
				indices.push([prevIndex, Math.max(prevIndex + 1, closestDelimiter)]);
			}

			return indices.map((sliceIndices) => sentence.slice(...sliceIndices));
		})
		.reduce<string[]>(
			(chunks, sentence) => {
				const lastChunk = chunks[chunks.length - 1];
				if (lastChunk.length + sentence.length <= maxLength) {
					return [...chunks.slice(0, -1), lastChunk + sentence];
				}
				return [...chunks, sentence];
			},
			[""]
		)
		.filter(Boolean);
}

</src/lib/server/websearch/markdown/utils/chunk.ts>

<src/lib/server/websearch/markdown/utils/stringify.ts>
import type { SerializedHTMLElement } from "../../scrape/types";
import { MarkdownElementType, type MarkdownElement } from "../types";

// --- Markdown Elements ---

/** Converts markdown element to a string with formatting */
export function stringifyMarkdownElement(elem: MarkdownElement): string {
	const content = elem.content.trim();
	if (elem.type === MarkdownElementType.Header) return `${"#".repeat(elem.level)} ${content}\n\n`;
	if (elem.type === MarkdownElementType.BlockQuote) {
		return `${"> ".repeat(elem.depth)}${content}\n\n`;
	}
	if (elem.type === MarkdownElementType.CodeBlock) return `\`\`\`\n${content}\n\`\`\`\n\n`;

	if (elem.type === MarkdownElementType.UnorderedListItem) return `- ${content}\n`;
	if (elem.type === MarkdownElementType.OrderedListItem) {
		const siblings = elem.parent?.children ?? [elem];
		const currentIndex = siblings.indexOf(elem);
		const lastAdjacentIndex = siblings
			.slice(currentIndex + 1)
			.findLastIndex((child) => child.type === MarkdownElementType.OrderedListItem);
		const order = currentIndex - lastAdjacentIndex + 1;
		return `${order}. ${content}\n`;
	}

	return `${content}\n\n`;
}

/** Converts a tree of markdown elements to a string with formatting */
export function stringifyMarkdownElementTree(elem: MarkdownElement): string {
	const stringified = stringifyMarkdownElement(elem);
	if (!("children" in elem)) return stringified;
	return stringified + elem.children.map(stringifyMarkdownElementTree).join("");
}

// ----- HTML Elements -----

/** Ignores all non-inline tag types and grabs their text. Converts inline tags to markdown */
export function stringifyHTMLElements(elems: (SerializedHTMLElement | string)[]): string {
	return elems.map(stringifyHTMLElement).join("").trim();
}

/** Ignores all non-inline tag types and grabs their text. Converts inline tags to markdown */
export function stringifyHTMLElement(elem: SerializedHTMLElement | string): string {
	if (typeof elem === "string") return elem;
	if (elem.tagName === "br") return "\n";

	const content = elem.content.map(stringifyHTMLElement).join("");
	if (content.length === 0) return content;

	if (elem.tagName === "strong" || elem.tagName === "b") return `**${content}**`;
	if (elem.tagName === "em" || elem.tagName === "i") return `*${content}*`;
	if (elem.tagName === "s" || elem.tagName === "strike") return `~~${content}~~`;

	if (elem.tagName === "code" || elem.tagName === "var" || elem.tagName === "tt") {
		return `\`${content}\``;
	}

	if (elem.tagName === "sup") return `<sup>${content}</sup>`;
	if (elem.tagName === "sub") return `<sub>${content}</sub>`;

	if (elem.tagName === "a" && content.trim().length > 0) {
		const href = elem.attributes.href;
		if (!href) return elem.content.map(stringifyHTMLElement).join("");
		return `[${elem.content.map(stringifyHTMLElement).join("")}](${href})`;
	}

	return elem.content.map(stringifyHTMLElement).join("");
}

/** Grabs all text content directly, ignoring HTML tags */
export function stringifyHTMLElementsUnformatted(
	elems: (SerializedHTMLElement | string)[]
): string {
	return elems.map(stringifyHTMLElementUnformatted).join("");
}

/** Grabs all text content directly, ignoring HTML tags */
function stringifyHTMLElementUnformatted(elem: SerializedHTMLElement | string): string {
	if (typeof elem === "string") return elem;
	return elem.content.map(stringifyHTMLElementUnformatted).join("");
}

</src/lib/server/websearch/markdown/utils/stringify.ts>

<src/lib/server/websearch/markdown/types.ts>
/* eslint-disable-next-line no-shadow */
export enum MarkdownElementType {
	Header = "HEADER",
	Paragraph = "PARAGRAPH",
	BlockQuote = "BLOCKQUOTE",
	CodeBlock = "CODE_BLOCK",

	UnorderedList = "UNORDERED_LIST",
	OrderedList = "ORDERED_LIST",
	UnorderedListItem = "UNORDERED_LIST_ITEM",
	OrderedListItem = "ORDERED_LIST_ITEM",
}

interface BaseMarkdownElement<T = MarkdownElementType> {
	type: T;
	content: string;
	parent: HeaderElement | null;
}

export interface HeaderElement extends BaseMarkdownElement<MarkdownElementType.Header> {
	level: number;
	children: MarkdownElement[];
}
type ListItem = MarkdownElementType.UnorderedListItem | MarkdownElementType.OrderedListItem;
interface ListItemElement extends BaseMarkdownElement<ListItem> {
	depth: number;
}
interface BlockQuoteElement extends BaseMarkdownElement<MarkdownElementType.BlockQuote> {
	depth: number;
}
interface ParagraphElement extends BaseMarkdownElement<MarkdownElementType.Paragraph> {}
interface CodeBlockElement extends BaseMarkdownElement<MarkdownElementType.CodeBlock> {}

export type MarkdownElement =
	| HeaderElement
	| ParagraphElement
	| BlockQuoteElement
	| CodeBlockElement
	| ListItemElement;

export const tagNameMap: Record<string, MarkdownElementType> = {
	h1: MarkdownElementType.Header,
	h2: MarkdownElementType.Header,
	h3: MarkdownElementType.Header,
	h4: MarkdownElementType.Header,
	h5: MarkdownElementType.Header,
	h6: MarkdownElementType.Header,
	div: MarkdownElementType.Paragraph,
	p: MarkdownElementType.Paragraph,
	blockquote: MarkdownElementType.BlockQuote,
	pre: MarkdownElementType.CodeBlock,
	ul: MarkdownElementType.UnorderedList,
	ol: MarkdownElementType.OrderedList,
	li: MarkdownElementType.UnorderedListItem,
};

</src/lib/server/websearch/markdown/types.ts>

<src/lib/server/websearch/markdown/tree.ts>
import type { SerializedHTMLElement } from "../scrape/types";
import { htmlElementToMarkdownElements, mergeAdjacentElements } from "./fromHtml";
import type { HeaderElement, MarkdownElement } from "./types";
import { MarkdownElementType } from "./types";
import { chunkElements } from "./utils/chunk";

/**
 * Converts HTML elements to Markdown elements and creates a tree based on header tags
 * For example: h1 [h2 [p p blockquote] h2 [h3 [...] ] ]
 **/
export function htmlToMarkdownTree(
	title: string,
	htmlElements: SerializedHTMLElement[],
	maxCharsPerElem: number
): HeaderElement {
	let parent: HeaderElement = {
		type: MarkdownElementType.Header,
		level: 1,
		parent: null,
		content: title,
		children: [],
	};

	const markdownElements = chunkElements(
		mergeAdjacentElements(
			htmlElements.flatMap((elem) => htmlElementToMarkdownElements(parent, elem))
		),
		maxCharsPerElem
	);

	for (const elem of markdownElements) {
		if (elem.type !== MarkdownElementType.Header) {
			elem.parent = parent;
			parent.children.push(elem);
			continue;
		}

		// add 1 to current level to offset for the title being level 1
		elem.level += 1;

		// Pop up header levels until reaching the same level as the current header
		// or until we reach the root
		inner: while (parent !== null && parent.parent !== null) {
			if (parent.level < elem.level) break inner;
			parent = parent.parent;
		}
		parent.children.push(elem);
		parent = elem;
	}

	// Pop up to the root
	while (parent.parent !== null) {
		parent = parent.parent;
	}
	return parent;
}

export function removeParents<T extends MarkdownElement>(elem: T): T {
	if ("children" in elem) {
		return { ...elem, parent: null, children: elem.children.map((child) => removeParents(child)) };
	}
	return { ...elem, parent: null };
}

</src/lib/server/websearch/markdown/tree.ts>

<src/lib/server/websearch/runWebSearch.ts>
import { defaultEmbeddingModel, embeddingModels } from "$lib/server/embeddingModels";

import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";
import type { WebSearch, WebSearchScrapedSource } from "$lib/types/WebSearch";
import type { Assistant } from "$lib/types/Assistant";
import type { MessageWebSearchUpdate } from "$lib/types/MessageUpdate";

import { search } from "./search/search";
import { scrape } from "./scrape/scrape";
import { findContextSources } from "./embed/embed";
import { removeParents } from "./markdown/tree";
import {
	makeErrorUpdate,
	makeFinalAnswerUpdate,
	makeGeneralUpdate,
	makeSourcesUpdate,
} from "./update";
import { mergeAsyncGenerators } from "$lib/utils/mergeAsyncGenerators";
import { MetricsServer } from "../metrics";
import { logger } from "$lib/server/logger";

const MAX_N_PAGES_TO_SCRAPE = 8 as const;
const MAX_N_PAGES_TO_EMBED = 5 as const;

export async function* runWebSearch(
	conv: Conversation,
	messages: Message[],
	ragSettings?: Assistant["rag"],
	query?: string
): AsyncGenerator<MessageWebSearchUpdate, WebSearch, undefined> {
	const prompt = messages[messages.length - 1].content;
	const createdAt = new Date();
	const updatedAt = new Date();

	MetricsServer.getMetrics().webSearch.requestCount.inc();

	try {
		const embeddingModel =
			embeddingModels.find((m) => m.id === conv.embeddingModel) ?? defaultEmbeddingModel;
		if (!embeddingModel) {
			throw Error(`Embedding model ${conv.embeddingModel} not available anymore`);
		}

		// Search the web
		const { searchQuery, pages } = yield* search(messages, ragSettings, query);
		if (pages.length === 0) throw Error("No results found for this search query");

		// Scrape pages
		yield makeGeneralUpdate({ message: "Browsing search results" });

		const allScrapedPages = yield* mergeAsyncGenerators(
			pages.slice(0, MAX_N_PAGES_TO_SCRAPE).map(scrape(embeddingModel.chunkCharLength))
		);
		const scrapedPages = allScrapedPages
			.filter((p): p is WebSearchScrapedSource => Boolean(p))
			.filter((p) => p.page.markdownTree.children.length > 0)
			.slice(0, MAX_N_PAGES_TO_EMBED);

		if (!scrapedPages.length) {
			throw Error(`No text found in the first ${MAX_N_PAGES_TO_SCRAPE} results`);
		}

		// Chunk the text of each of the elements and find the most similar chunks to the prompt
		yield makeGeneralUpdate({ message: "Extracting relevant information" });
		const contextSources = await findContextSources(scrapedPages, prompt, embeddingModel).then(
			(ctxSources) =>
				ctxSources.map((source) => ({
					...source,
					page: { ...source.page, markdownTree: removeParents(source.page.markdownTree) },
				}))
		);
		yield makeSourcesUpdate(contextSources);

		const webSearch: WebSearch = {
			prompt,
			searchQuery,
			results: scrapedPages.map(({ page, ...source }) => ({
				...source,
				page: { ...page, markdownTree: removeParents(page.markdownTree) },
			})),
			contextSources,
			createdAt,
			updatedAt,
		};
		yield makeFinalAnswerUpdate();
		return webSearch;
	} catch (searchError) {
		const message = searchError instanceof Error ? searchError.message : String(searchError);
		logger.error(message);
		yield makeErrorUpdate({ message: "An error occurred", args: [message] });

		const webSearch: WebSearch = {
			prompt,
			searchQuery: "",
			results: [],
			contextSources: [],
			createdAt,
			updatedAt,
		};
		yield makeFinalAnswerUpdate();
		return webSearch;
	}
}

</src/lib/server/websearch/runWebSearch.ts>

<src/lib/server/websearch/scrape/scrape.ts>
import type { WebSearchScrapedSource, WebSearchSource } from "$lib/types/WebSearch";
import type { MessageWebSearchUpdate } from "$lib/types/MessageUpdate";
import { withPage } from "./playwright";

import { spatialParser } from "./parser";
import { htmlToMarkdownTree } from "../markdown/tree";
import { timeout } from "$lib/utils/timeout";
import { makeGeneralUpdate } from "../update";
import { MetricsServer } from "$lib/server/metrics";
import { logger } from "$lib/server/logger";

export const scrape = (maxCharsPerElem: number) =>
	async function* (
		source: WebSearchSource
	): AsyncGenerator<MessageWebSearchUpdate, WebSearchScrapedSource | undefined, undefined> {
		try {
			const startTime = Date.now();
			MetricsServer.getMetrics().webSearch.pageFetchCount.inc();

			const page = await scrapeUrl(source.link, maxCharsPerElem);

			MetricsServer.getMetrics().webSearch.pageFetchDuration.observe(Date.now() - startTime);

			yield makeGeneralUpdate({
				message: "Browsing webpage",
				args: [source.link],
			});
			return { ...source, page };
		} catch (e) {
			MetricsServer.getMetrics().webSearch.pageFetchCountError.inc();
			logger.error(e, `Error scraping webpage: ${source.link}`);
		}
	};

export async function scrapeUrl(url: string, maxCharsPerElem: number) {
	return withPage(url, async (page, res) => {
		if (!res) throw Error("Failed to load page");

		// Check if it's a non-html content type that we can handle directly
		// TODO: direct mappings to markdown can be added for markdown, csv and others
		const contentType = res.headers()["content-type"] ?? "";
		if (
			contentType.includes("text/plain") ||
			contentType.includes("text/markdown") ||
			contentType.includes("application/json") ||
			contentType.includes("application/xml") ||
			contentType.includes("text/csv")
		) {
			const title = await page.title();
			const content = await page.content();
			return {
				title,
				markdownTree: htmlToMarkdownTree(
					title,
					[{ tagName: "p", attributes: {}, content: [content] }],
					maxCharsPerElem
				),
			};
		}

		const scrapedOutput = await timeout(page.evaluate(spatialParser), 2000)
			.then(({ elements, ...parsed }) => ({
				...parsed,
				markdownTree: htmlToMarkdownTree(parsed.title, elements, maxCharsPerElem),
			}))
			.catch((cause) => {
				throw Error("Parsing failed", { cause });
			});
		return scrapedOutput;
	});
}

</src/lib/server/websearch/scrape/scrape.ts>

<src/lib/server/websearch/scrape/parser.ts>
import type { SerializedHTMLElement } from "./types";

interface DBSCANOptions<T> {
	dataset: T[];
	epsilon?: number;
	epsilonCompare?: (distance: number, epsilon: number) => boolean;
	minimumPoints?: number;
	distanceFunction: (a: T, b: T) => number;
}

export function spatialParser() {
	/**
	 * Implementation for dbscan, inlined and migrated to typescript from https://github.com/cdxOo/dbscan (MIT License)
	 */
	const DBSCAN = <T>({
		dataset,
		epsilon = 1,
		epsilonCompare = (dist, e) => dist < e,
		minimumPoints = 2,
		distanceFunction,
	}: DBSCANOptions<T>) => {
		const visitedIndices: Record<number, boolean> = {};
		const isVisited = (i: number) => visitedIndices[i];
		const markVisited = (i: number) => {
			visitedIndices[i] = true;
		};

		const clusteredIndices: Record<number, boolean> = {};
		const isClustered = (i: number) => clusteredIndices[i];
		const markClustered = (i: number) => {
			clusteredIndices[i] = true;
		};

		const uniqueMerge = <U>(targetArray: U[], sourceArray: U[]) => {
			for (let i = 0; i < sourceArray.length; i += 1) {
				const item = sourceArray[i];
				if (targetArray.indexOf(item) < 0) {
					targetArray.push(item);
				}
			}
		};

		const findNeighbors = (index: number) => {
			const neighbors = [];
			for (let other = 0; other < dataset.length; other += 1) {
				const distance = distanceFunction(dataset[index], dataset[other]);
				if (epsilonCompare(distance, epsilon)) {
					neighbors.push(other);
				}
			}
			return neighbors;
		};

		const noise: number[] = [];
		const addNoise = (i: number) => noise.push(i);

		const clusters: number[][] = [];
		const createCluster = () => clusters.push([]) - 1;
		const addIndexToCluster = (c: number, i: number) => {
			clusters[c].push(i);
			markClustered(i);
		};

		const expandCluster = (c: number, neighbors: number[]) => {
			for (let i = 0; i < neighbors.length; i += 1) {
				const neighborIndex = neighbors[i];
				if (!isVisited(neighborIndex)) {
					markVisited(neighborIndex);

					const secondaryNeighbors = findNeighbors(neighborIndex);
					if (secondaryNeighbors.length >= minimumPoints) {
						uniqueMerge(neighbors, secondaryNeighbors);
					}
				}

				if (!isClustered(neighborIndex)) {
					addIndexToCluster(c, neighborIndex);
				}
			}
		};

		dataset.forEach((_, index) => {
			if (!isVisited(index)) {
				markVisited(index);

				const neighbors = findNeighbors(index);
				if (neighbors.length < minimumPoints) {
					addNoise(index);
				} else {
					const clusterIndex = createCluster();
					addIndexToCluster(clusterIndex, index);
					expandCluster(clusterIndex, neighbors);
				}
			}
		});

		return { clusters, noise };
	};

	// -----------
	// Scraping implementation

	const IgnoredTagsList = [
		"footer",
		"nav",
		"aside",
		"script",
		"style",
		"noscript",
		"form",
		"button",
	];
	const InlineTags = [
		"a",
		"abbrv",
		"span",
		"address",
		"time",
		"acronym",
		"strong",
		"b",
		"br",
		"sub",
		"sup",
		"tt",
		"var",
		"em",
		"i",
	];

	type ReadableNode = HTMLElement;
	type NodeWithRect = {
		node: ReadableNode;
		rect: DOMRect;
	};

	const isOnlyChild = (node: Node) => {
		if (!node.parentElement) return true;
		if (node.parentElement.nodeName === "body") return false;
		if (node.parentElement.childNodes.length === 1) return true;
		return false;
	};

	const hasValidInlineParent = (node: Node) => {
		return node.parentElement && !node.parentElement.matches("div, section, article, main, body ");
	};

	const hasValidParent = (node: Node) => {
		return node.parentElement && !node.parentElement.isSameNode(document.body);
	};

	const possibleCodeParents = Array.from(document.querySelectorAll("pre, p"));
	const possibleTableParents = Array.from(document.querySelectorAll("table"));
	const possibleListParents = Array.from(document.querySelectorAll("ul, ol"));
	/**
	 * We want to find the highest parent of text node in the cluster.
	 * For example in this case: <p><span>Text here</span></p>
	 * the P tag is highest parent.
	 */
	const findHighestDirectParentOfReadableNode = (node: Node): HTMLElement => {
		// go up the tree until the parent is no longer an only child
		let parent = node.parentElement;
		// if the parent is an inline tag, then go up one more level
		while (
			parent &&
			hasValidInlineParent(parent) &&
			InlineTags.includes(parent?.tagName.toLowerCase())
		) {
			parent = parent.parentElement;
		}

		while (parent && isOnlyChild(parent)) {
			if (!hasValidParent(parent)) break;
			parent = parent.parentElement;
		}

		if (!parent) {
			throw new Error(
				"disconnected node found, this should not really be possible when traversing through the dom"
			);
		}

		// if the parent is a span, code or div tag check if there is a pre tag or p tag above it
		if (["span", "code", "div"].includes(parent.nodeName.toLowerCase())) {
			const hasParent = possibleCodeParents.find((tag) => tag.contains(parent)) as HTMLElement;
			if (hasParent) {
				parent = hasParent;
			}
		}

		// if the parent is a li tag check if there is a ul or ol tag above it
		if (parent.nodeName.toLowerCase() === "li") {
			const hasParent = possibleListParents.find((tag) => tag.contains(parent)) as HTMLElement;
			if (hasParent) {
				parent = hasParent;
			}
		}

		// if the parent is a td, th, tr tag check if there is a table tag above it
		if (["td", "th", "tr"].includes(parent.nodeName.toLowerCase())) {
			const hasParent = possibleTableParents.find((tag) => tag.contains(parent)) as HTMLElement;
			if (hasParent) {
				parent = hasParent;
			}
		}

		return parent;
	};
	const barredNodes = Array.from(document.querySelectorAll(IgnoredTagsList.join(",")));

	const doesNodePassHeuristics = (node: Node) => {
		if ((node.textContent ?? "").trim().length < 10) {
			return false;
		}

		const parentNode = findHighestDirectParentOfReadableNode(node);

		if (parentNode && parentNode instanceof Element) {
			if (
				!parentNode.checkVisibility({
					checkOpacity: true,
					checkVisibilityCSS: true,
				})
			)
				return false;

			const rect = parentNode.getBoundingClientRect();
			// elements that are readable usually don't have really small height or width
			if (rect.width < 4 || rect.height < 4) {
				return false;
			}
		}

		if (parentNode && parentNode instanceof Element) {
			if (barredNodes.some((barredNode) => barredNode.contains(parentNode))) {
				return false;
			}
		}

		return true;
	};

	const getAllReadableNodes = (): NodeWithRect[] => {
		if (!document.body) throw new Error("Page failed to load");
		const treeWalker = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT, {
			acceptNode(node) {
				if (doesNodePassHeuristics(node)) {
					return NodeFilter.FILTER_ACCEPT;
				} else {
					return NodeFilter.FILTER_SKIP;
				}
			},
		});

		const readableNodes = [];

		while (treeWalker.nextNode()) {
			readableNodes.push(treeWalker.currentNode as ReadableNode);
		}

		/*
		 * <table><p>hello</p><p>world</p></table>
		 * table is already included in the parent of the first p tag
		 */

		const parentsForReadableNodes = readableNodes.map(findHighestDirectParentOfReadableNode);
		const listWithOnlyParents: HTMLElement[] = [];
		// find unique nodes in the parent list, a unique node is a node that is not a child of any other node in the list
		for (let i = 0; i < parentsForReadableNodes.length; i++) {
			const node = parentsForReadableNodes[i];
			const hasParentInList = parentsForReadableNodes.find((otherNode, idx) => {
				if (i === idx) return false;
				return otherNode.contains(node);
			});
			listWithOnlyParents.push(hasParentInList ? hasParentInList : node);
		}

		const uniqueParents = Array.from(new Set(listWithOnlyParents));

		return uniqueParents.map((node) => {
			return {
				node,
				rect: node.getBoundingClientRect(),
			};
		});
	};

	const distanceFunction = (a: NodeWithRect, b: NodeWithRect) => {
		// we make two assumptions here which are fine to make for rects returned from getBoundingClientRect
		// 1. rects are upright and not rotated
		// 2. If two rects intersect, we assume distance to be 0
		let dx = 0;
		let dy = 0;
		const rect1 = a.rect;
		const rect2 = b.rect;
		// Calculate the horizontal distance
		if (rect1.x + rect1.width < rect2.x) {
			dx = rect2.x - (rect1.x + rect1.width);
		} else if (rect2.x + rect2.width < rect1.x) {
			dx = rect1.x - (rect2.x + rect2.width);
		}

		// Calculate the vertical distance
		if (rect1.y + rect1.height < rect2.y) {
			dy = rect2.y - (rect1.y + rect1.height);
		} else if (rect2.y + rect2.height < rect1.y) {
			dy = rect1.y - (rect2.y + rect2.height);
		}

		const distance = Math.sqrt(dx * dx + dy * dy);
		// Return the Euclidean distance
		return distance;
	};
	/**
	 * Clusters nodes using dbscan
	 */
	const clusterReadableNodes = (nodes: NodeWithRect[]) => {
		const { clusters } = DBSCAN({
			dataset: nodes,
			epsilon: 28,
			minimumPoints: 1,
			distanceFunction,
		});

		return clusters;
	};

	const totalTextLength = (cluster: number[]) => {
		return cluster
			.map((t) => readableNodes[t].node.innerText?.replaceAll(/ {2}|\r\n|\n|\r/gm, ""))
			.join("").length;
	};

	const approximatelyEqual = (a: number, b: number, epsilon = 1) => {
		return Math.abs(a - b) < epsilon;
	};

	const getClusterBounds = (cluster: number[]) => {
		const leftMostPoint = Math.min(...cluster.map((c) => readableNodes[c].rect.x));
		const topMostPoint = Math.min(...cluster.map((c) => readableNodes[c].rect.y));
		const rightMostPoint = Math.max(
			...cluster.map((c) => readableNodes[c].rect.x + readableNodes[c].rect.width)
		);
		const bottomMostPoint = Math.max(
			...cluster.map((c) => readableNodes[c].rect.y + readableNodes[c].rect.height)
		);
		return {
			// left most element
			x: leftMostPoint,
			y: topMostPoint,
			width: rightMostPoint - leftMostPoint,
			height: bottomMostPoint - topMostPoint,
		};
	};

	const round = (num: number, decimalPlaces = 2) => {
		const factor = Math.pow(10, decimalPlaces);
		return Math.round(num * factor) / factor;
	};

	/** minimum distance to center of the screen */
	const clusterCentrality = (cluster: number[]) => {
		const bounds = getClusterBounds(cluster);
		const centerOfScreen = window.innerWidth / 2;
		// the cluster contains the center of the screen
		if (bounds.x < centerOfScreen && bounds.x + bounds.width > centerOfScreen) {
			return 0;
		}

		// the cluster is to the left of the screen
		if (bounds.x + bounds.width < centerOfScreen) {
			return centerOfScreen - (bounds.x + bounds.width);
		}

		// the cluster is to the right of the screen
		return bounds.x - centerOfScreen;
	};
	/** measure of text share that belong to the cluster */
	const percentageTextShare = (cluster: number[], totalLength: number) => {
		// apply an exponentially increasing penalty for centrality per 100 pixels distance from center

		return round((totalTextLength(cluster) / totalLength) * 100);
	};

	const shouldMergeClusters = (clusterA: number[], clusterB: number[]) => {
		const clusterABounds = getClusterBounds(clusterA);
		const clusterBBounds = getClusterBounds(clusterB);

		// A cluster is horizontally aligned if the x and width are roughly equal
		const isHorizontallyAligned =
			approximatelyEqual(clusterABounds.x, clusterBBounds.x, 40) &&
			approximatelyEqual(clusterABounds.width, clusterBBounds.width, 40);

		if (!isHorizontallyAligned) return false;

		// check the y gap between the clusters
		const higherCluster = clusterABounds.y < clusterBBounds.y ? clusterABounds : clusterBBounds;
		const lowerCluster = clusterABounds.y < clusterBBounds.y ? clusterBBounds : clusterABounds;
		const yGap = lowerCluster.y - (higherCluster.y + higherCluster.height);

		if (approximatelyEqual(yGap, 0, 100)) return true;
	};

	const findCriticalClusters = (clusters: number[][]) => {
		// merge the clusters that have similar widths and x position

		let i = 0;
		while (i < clusters.length) {
			const cluster = clusters[i];
			for (let j = i + 1; j < clusters.length; j++) {
				const otherCluster = clusters[j];
				if (shouldMergeClusters(cluster, otherCluster)) {
					cluster.push(...otherCluster);
					clusters.splice(j, 1);
					j -= 1;
				}
			}

			i++;
		}

		const totalText = totalTextLength(clusters.flat());

		// sort in descending order of text share
		const clusterWithMetrics = clusters.map((cluster) => {
			const centrality = clusterCentrality(cluster);
			return {
				cluster,
				centrality,
				percentageTextShare: percentageTextShare(cluster, totalText),
			};
		});

		// if there is a dominant cluster with more than 60% text share, return that
		const dominantCluster = clusterWithMetrics[0]?.percentageTextShare > 60;
		if (dominantCluster) return [clusterWithMetrics[0].cluster];

		// clusters are sorted by text share after applying a penalty for centrality
		const sortedClusters = clusterWithMetrics.sort((a, b) => {
			const penaltyForA = Math.pow(0.9, a.centrality / 100);
			const penaltyForB = Math.pow(0.9, b.centrality / 100);
			const adjustedTextShareA = a.percentageTextShare * penaltyForA;
			const adjustedTextShareB = b.percentageTextShare * penaltyForB;

			return adjustedTextShareB - adjustedTextShareA;
		});

		// find all clusters that are similar to the largest cluster in terms of text share
		// and see if they are enough to cover at least 60% of the text share
		const largeTextShareClusters = sortedClusters.filter((c) =>
			approximatelyEqual(c.percentageTextShare, sortedClusters[0]?.percentageTextShare, 10)
		);

		const totalTextShareOfLargeClusters = largeTextShareClusters.reduce(
			(acc, cluster) => acc + cluster.percentageTextShare,
			0
		);

		if (totalTextShareOfLargeClusters > 60) {
			return largeTextShareClusters.map((c) => c.cluster);
		}

		// choose clusters till the text share is greater than 60%
		let totalTextShare = 0;
		const criticalClusters = [];
		for (const cluster of sortedClusters) {
			/** Ignore clusters with less than 2%*/
			if (cluster.percentageTextShare < 2) continue;
			if (totalTextShare > 60) break;
			criticalClusters.push(cluster.cluster);
			totalTextShare += cluster.percentageTextShare;
		}

		// if the total text share is less than 60% then return an empty array
		// as this website should not be particularly useful for the web search anyways
		// this should almost never happen on structured website with a lot of text
		if (totalTextShare < 60) {
			return [];
		}

		return criticalClusters;
	};

	const allowListedAttributes = ["href", "src", "alt", "title", "class", "id"];
	function serializeHTMLElement(node: Element): SerializedHTMLElement {
		return {
			tagName: node.tagName.toLowerCase(),
			attributes: allowListedAttributes.reduce((acc, attr) => {
				const value = node.getAttribute(attr);
				if (value) {
					acc[attr] = value;
				}
				return acc;
			}, {} as Record<string, string>),
			content: Array.from(node.childNodes).map(serializeNode).filter(Boolean),
		};
	}

	function serializeNode(node: Node): SerializedHTMLElement | string {
		if (node.nodeType === 1) return serializeHTMLElement(node as Element);
		else if (node.nodeType === 3) return node.textContent ?? "";
		else return "";
	}

	function getPageMetadata(): {
		title: string;
		siteName?: string;
		author?: string;
		description?: string;
		createdAt?: string;
		updatedAt?: string;
	} {
		const title = document.title ?? "";
		const siteName =
			document.querySelector("meta[property='og:site_name']")?.getAttribute("content") ?? undefined;
		const author =
			document.querySelector("meta[name='author']")?.getAttribute("content") ?? undefined;
		const description =
			document.querySelector("meta[name='description']")?.getAttribute("content") ??
			document.querySelector("meta[property='og:description']")?.getAttribute("content") ??
			undefined;
		const createdAt =
			document.querySelector("meta[property='article:published_time']")?.getAttribute("content") ??
			document.querySelector("meta[name='date']")?.getAttribute("content") ??
			undefined;
		const updatedAt =
			document.querySelector("meta[property='article:modified_time']")?.getAttribute("content") ??
			undefined;

		return { title, siteName, author, description, createdAt, updatedAt };
	}

	const readableNodes = getAllReadableNodes();
	const clusters = clusterReadableNodes(readableNodes);

	const criticalClusters = findCriticalClusters(clusters);

	// filter readable nodes using the above information as well as heuristics
	const filteredNodes = readableNodes.filter((_, idx) => {
		return criticalClusters.some((cluster) => {
			return cluster.includes(idx);
		});
	});

	const elements = filteredNodes
		.filter(
			(node, idx, nodes) => !nodes.slice(idx + 1).some((otherNode) => node.node === otherNode.node)
		)
		.map<SerializedHTMLElement>(({ node }) => serializeHTMLElement(node));
	const metadata = getPageMetadata();
	return { ...metadata, elements };
}

</src/lib/server/websearch/scrape/parser.ts>

<src/lib/server/websearch/scrape/types.ts>
export interface SerializedHTMLElement {
	tagName: string;
	attributes: Record<string, string>;
	content: (SerializedHTMLElement | string)[];
}

</src/lib/server/websearch/scrape/types.ts>

<src/lib/server/websearch/scrape/playwright.ts>
import {
	chromium,
	devices,
	type Page,
	type BrowserContextOptions,
	type Response,
	type Browser,
} from "playwright";
import { PlaywrightBlocker } from "@cliqz/adblocker-playwright";
import { env } from "$env/dynamic/private";
import { logger } from "$lib/server/logger";
import { onExit } from "$lib/server/exitHandler";

const blocker =
	env.PLAYWRIGHT_ADBLOCKER === "true"
		? await PlaywrightBlocker.fromPrebuiltAdsAndTracking(fetch)
				.then((blker) => {
					const mostBlocked = blker.blockFonts().blockMedias().blockFrames().blockImages();
					if (env.WEBSEARCH_JAVASCRIPT === "false") return mostBlocked.blockScripts();
					return mostBlocked;
				})
				.catch((err) => {
					logger.error(err, "Failed to initialize PlaywrightBlocker from prebuilt lists");
					return PlaywrightBlocker.empty();
				})
		: PlaywrightBlocker.empty();

let browserSingleton: Promise<Browser> | undefined;
async function getBrowser() {
	const browser = await chromium.launch({ headless: true });
	onExit(() => browser.close());
	browser.on("disconnected", () => {
		logger.warn("Browser closed");
		browserSingleton = undefined;
	});
	return browser;
}

async function getPlaywrightCtx() {
	if (!browserSingleton) browserSingleton = getBrowser();
	const browser = await browserSingleton;

	const device = devices["Desktop Chrome"];
	const options: BrowserContextOptions = {
		...device,
		// Increasing width improves spatial clustering accuracy
		screen: {
			width: 3840,
			height: 1080,
		},
		viewport: {
			width: 3840,
			height: 1080,
		},
		reducedMotion: "reduce",
		acceptDownloads: false,
		timezoneId: "America/New_York",
		locale: "en-US",
	};
	return browser.newContext(options);
}

export async function withPage<T>(
	url: string,
	callback: (page: Page, response?: Response) => Promise<T>
): Promise<T> {
	const ctx = await getPlaywrightCtx();

	try {
		const page = await ctx.newPage();
		env.PLAYWRIGHT_ADBLOCKER === "true" && (await blocker.enableBlockingInPage(page));

		const res = await page
			.goto(url, { waitUntil: "load", timeout: parseInt(env.WEBSEARCH_TIMEOUT) })
			.catch(() => {
				console.warn(
					`Failed to load page within ${parseInt(env.WEBSEARCH_TIMEOUT) / 1000}s: ${url}`
				);
			});

		// await needed here so that we don't close the context before the callback is done
		return await callback(page, res ?? undefined);
	} finally {
		ctx.close();
	}
}

</src/lib/server/websearch/scrape/playwright.ts>

<src/lib/server/websearch/search/endpoints.ts>
import { WebSearchProvider, type WebSearchSource } from "$lib/types/WebSearch";
import { env } from "$env/dynamic/private";
import searchSerper from "./endpoints/serper";
import searchSerpApi from "./endpoints/serpApi";
import searchSerpStack from "./endpoints/serpStack";
import searchYouApi from "./endpoints/youApi";
import searchWebLocal from "./endpoints/webLocal";
import searchSearxng from "./endpoints/searxng";
import searchSearchApi from "./endpoints/searchApi";
import searchBing from "./endpoints/bing";

export function getWebSearchProvider() {
	if (env.YDC_API_KEY) return WebSearchProvider.YOU;
	if (env.SEARXNG_QUERY_URL) return WebSearchProvider.SEARXNG;
	if (env.BING_SUBSCRIPTION_KEY) return WebSearchProvider.BING;
	return WebSearchProvider.GOOGLE;
}

/** Searches the web using the first available provider, based on the env */
export async function searchWeb(query: string): Promise<WebSearchSource[]> {
	if (env.USE_LOCAL_WEBSEARCH) return searchWebLocal(query);
	if (env.SEARXNG_QUERY_URL) return searchSearxng(query);
	if (env.SERPER_API_KEY) return searchSerper(query);
	if (env.YDC_API_KEY) return searchYouApi(query);
	if (env.SERPAPI_KEY) return searchSerpApi(query);
	if (env.SERPSTACK_API_KEY) return searchSerpStack(query);
	if (env.SEARCHAPI_KEY) return searchSearchApi(query);
	if (env.BING_SUBSCRIPTION_KEY) return searchBing(query);
	throw new Error(
		"No configuration found for web search. Please set USE_LOCAL_WEBSEARCH, SEARXNG_QUERY_URL, SERPER_API_KEY, YDC_API_KEY, SERPSTACK_API_KEY, or SEARCHAPI_KEY in your environment variables."
	);
}

</src/lib/server/websearch/search/endpoints.ts>

<src/lib/server/websearch/search/endpoints/serpStack.ts>
import { env } from "$env/dynamic/private";
import { isURL } from "$lib/utils/isUrl";
import type { WebSearchSource } from "$lib/types/WebSearch";

type SerpStackResponse = {
	organic_results: {
		title: string;
		url: string;
		snippet?: string;
	}[];
	error?: string;
};

export default async function searchSerpStack(query: string): Promise<WebSearchSource[]> {
	const response = await fetch(
		`http://api.serpstack.com/search?access_key=${env.SERPSTACK_API_KEY}&query=${query}&hl=en&gl=us`,
		{ headers: { "Content-type": "application/json; charset=UTF-8" } }
	);

	const data = (await response.json()) as SerpStackResponse;

	if (!response.ok) {
		throw new Error(
			data.error ?? `SerpStack API returned error code ${response.status} - ${response.statusText}`
		);
	}

	return data.organic_results
		.filter(({ url }) => isURL(url))
		.map(({ title, url, snippet }) => ({
			title,
			link: url,
			text: snippet ?? "",
		}));
}

</src/lib/server/websearch/search/endpoints/serpStack.ts>

<src/lib/server/websearch/search/endpoints/webLocal.ts>
import { JSDOM, VirtualConsole } from "jsdom";
import { isURL } from "$lib/utils/isUrl";
import type { WebSearchSource } from "$lib/types/WebSearch";

export default async function searchWebLocal(query: string): Promise<WebSearchSource[]> {
	const abortController = new AbortController();
	setTimeout(() => abortController.abort(), 10000);

	const htmlString = await fetch(
		"https://www.google.com/search?hl=en&q=" + encodeURIComponent(query),
		{ signal: abortController.signal }
	)
		.then((response) => response.text())
		.catch();

	const virtualConsole = new VirtualConsole();
	virtualConsole.on("error", () => {}); // No-op to skip console errors.
	const document = new JSDOM(htmlString ?? "", { virtualConsole }).window.document;

	// get all links
	const links = document.querySelectorAll("a");
	if (!links.length) throw new Error(`webpage doesn't have any "a" element`);

	// take url that start wirth /url?q=
	// and do not contain google.com links
	// and strip them up to '&sa='
	const linksHref = Array.from(links)
		.map((el) => el.href)
		.filter((link) => link.startsWith("/url?q=") && !link.includes("google.com/"))
		.map((link) => link.slice("/url?q=".length, link.indexOf("&sa=")))
		.filter(isURL);

	// remove duplicate links and map links to the correct object shape
	return [...new Set(linksHref)].map((link) => ({ link }));
}

</src/lib/server/websearch/search/endpoints/webLocal.ts>

<src/lib/server/websearch/search/endpoints/bing.ts>
import type { WebSearchSource } from "$lib/types/WebSearch";
import { env } from "$env/dynamic/private";

export default async function search(query: string): Promise<WebSearchSource[]> {
	// const params = {
	//     q: query,
	//     // You can add other parameters if needed, like 'count', 'offset', etc.
	// };

	const response = await fetch(
		"https://api.bing.microsoft.com/v7.0/search" + "?q=" + encodeURIComponent(query),
		{
			method: "GET",
			headers: {
				"Ocp-Apim-Subscription-Key": env.BING_SUBSCRIPTION_KEY,
				"Content-type": "application/json",
			},
		}
	);

	/* eslint-disable @typescript-eslint/no-explicit-any */
	const data = (await response.json()) as Record<string, any>;

	if (!response.ok) {
		throw new Error(
			data["message"] ?? `Bing API returned error code ${response.status} - ${response.statusText}`
		);
	}

	console.log(data["webPages"]?.["value"]);

	// Adapt the data structure from the Bing response to match the WebSearchSource type
	const webPages = data["webPages"]?.["value"] ?? [];
	return webPages.map((page: any) => ({
		title: page.name,
		link: page.url,
		text: page.snippet,
		displayLink: page.displayUrl,
	}));
}

</src/lib/server/websearch/search/endpoints/bing.ts>

<src/lib/server/websearch/search/endpoints/searxng.ts>
import { env } from "$env/dynamic/private";
import { logger } from "$lib/server/logger";
import type { WebSearchSource } from "$lib/types/WebSearch";
import { isURL } from "$lib/utils/isUrl";

export default async function searchSearxng(query: string): Promise<WebSearchSource[]> {
	const abortController = new AbortController();
	setTimeout(() => abortController.abort(), 10000);

	// Insert the query into the URL template
	let url = env.SEARXNG_QUERY_URL.replace("<query>", query);

	// Check if "&format=json" already exists in the URL
	if (!url.includes("&format=json")) {
		url += "&format=json";
	}

	// Call the URL to return JSON data
	const jsonResponse = await fetch(url, {
		signal: abortController.signal,
	})
		.then((response) => response.json() as Promise<{ results: { url: string }[] }>)
		.catch((error) => {
			logger.error(error, "Failed to fetch or parse JSON");
			throw new Error("Failed to fetch or parse JSON", { cause: error });
		});

	// Extract 'url' elements from the JSON response and trim to the top 5 URLs
	const urls = jsonResponse.results.slice(0, 5).map((item) => item.url);

	if (!urls.length) {
		throw new Error(`Response doesn't contain any "url" elements`);
	}

	// Map URLs to the correct object shape
	return urls.filter(isURL).map((link) => ({ link }));
}

</src/lib/server/websearch/search/endpoints/searxng.ts>

<src/lib/server/websearch/search/endpoints/serper.ts>
import { env } from "$env/dynamic/private";
import type { WebSearchSource } from "$lib/types/WebSearch";

export default async function search(query: string): Promise<WebSearchSource[]> {
	const params = {
		q: query,
		hl: "en",
		gl: "us",
	};

	const response = await fetch("https://google.serper.dev/search", {
		method: "POST",
		body: JSON.stringify(params),
		headers: {
			"x-api-key": env.SERPER_API_KEY,
			"Content-type": "application/json",
		},
	});

	/* eslint-disable @typescript-eslint/no-explicit-any */
	const data = (await response.json()) as Record<string, any>;

	if (!response.ok) {
		throw new Error(
			data["message"] ??
				`Serper API returned error code ${response.status} - ${response.statusText}`
		);
	}

	return data["organic"] ?? [];
}

</src/lib/server/websearch/search/endpoints/serper.ts>

<src/lib/server/websearch/search/endpoints/youApi.ts>
import { env } from "$env/dynamic/private";
import { isURL } from "$lib/utils/isUrl";
import type { WebSearchSource } from "$lib/types/WebSearch";

interface YouWebSearch {
	hits: YouSearchHit[];
	latency: number;
}

interface YouSearchHit {
	url: string;
	title: string;
	description: string;
	snippets: string[];
}

export default async function searchWebYouApi(query: string): Promise<WebSearchSource[]> {
	const response = await fetch(`https://api.ydc-index.io/search?query=${query}`, {
		method: "GET",
		headers: {
			"X-API-Key": env.YDC_API_KEY,
			"Content-type": "application/json; charset=UTF-8",
		},
	});

	if (!response.ok) {
		throw new Error(`You.com API returned error code ${response.status} - ${response.statusText}`);
	}

	const data = (await response.json()) as YouWebSearch;
	const formattedResultsWithSnippets = data.hits
		.filter(({ url }) => isURL(url))
		.map(({ title, url, snippets }) => ({
			title,
			link: url,
			text: snippets?.join("\n") || "",
		}))
		.sort((a, b) => b.text.length - a.text.length); // desc order by text length

	return formattedResultsWithSnippets;
}

</src/lib/server/websearch/search/endpoints/youApi.ts>

<src/lib/server/websearch/search/endpoints/searchApi.ts>
import { env } from "$env/dynamic/private";
import type { WebSearchSource } from "$lib/types/WebSearch";

export default async function search(query: string): Promise<WebSearchSource[]> {
	const response = await fetch(
		`https://www.searchapi.io/api/v1/search?engine=google&hl=en&gl=us&q=${query}`,
		{
			method: "GET",
			headers: {
				Authorization: `Bearer ${env.SEARCHAPI_KEY}`,
				"Content-type": "application/json",
			},
		}
	);

	/* eslint-disable @typescript-eslint/no-explicit-any */
	const data = (await response.json()) as Record<string, any>;

	if (!response.ok) {
		throw new Error(
			data["message"] ?? `SearchApi returned error code ${response.status} - ${response.statusText}`
		);
	}

	return data["organic_results"] ?? [];
}

</src/lib/server/websearch/search/endpoints/searchApi.ts>

<src/lib/server/websearch/search/endpoints/serpApi.ts>
import { env } from "$env/dynamic/private";
import { getJson, type GoogleParameters } from "serpapi";
import type { WebSearchSource } from "$lib/types/WebSearch";
import { isURL } from "$lib/utils/isUrl";

type SerpApiResponse = {
	organic_results: {
		link: string;
	}[];
};

export default async function searchWebSerpApi(query: string): Promise<WebSearchSource[]> {
	const params = {
		q: query,
		hl: "en",
		gl: "us",
		google_domain: "google.com",
		api_key: env.SERPAPI_KEY,
	} satisfies GoogleParameters;

	// Show result as JSON
	const response = (await getJson("google", params)) as unknown as SerpApiResponse;

	return response.organic_results.filter(({ link }) => isURL(link));
}

</src/lib/server/websearch/search/endpoints/serpApi.ts>

<src/lib/server/websearch/search/search.ts>
import type { WebSearchSource } from "$lib/types/WebSearch";
import type { Message } from "$lib/types/Message";
import type { Assistant } from "$lib/types/Assistant";
import { getWebSearchProvider, searchWeb } from "./endpoints";
import { generateQuery } from "./generateQuery";
import { isURLStringLocal } from "$lib/server/isURLLocal";
import { isURL } from "$lib/utils/isUrl";

import z from "zod";
import JSON5 from "json5";
import { env } from "$env/dynamic/private";
import { makeGeneralUpdate } from "../update";
import type { MessageWebSearchUpdate } from "$lib/types/MessageUpdate";

const listSchema = z.array(z.string()).default([]);
const allowList = listSchema.parse(JSON5.parse(env.WEBSEARCH_ALLOWLIST));
const blockList = listSchema.parse(JSON5.parse(env.WEBSEARCH_BLOCKLIST));

export async function* search(
	messages: Message[],
	ragSettings?: Assistant["rag"],
	query?: string
): AsyncGenerator<
	MessageWebSearchUpdate,
	{ searchQuery: string; pages: WebSearchSource[] },
	undefined
> {
	if (ragSettings && ragSettings?.allowedLinks.length > 0) {
		yield makeGeneralUpdate({ message: "Using links specified in Assistant" });
		return {
			searchQuery: "",
			pages: await directLinksToSource(ragSettings.allowedLinks).then(filterByBlockList),
		};
	}

	const searchQuery = query ?? (await generateQuery(messages));
	yield makeGeneralUpdate({ message: `Searching ${getWebSearchProvider()}`, args: [searchQuery] });

	// handle the global and (optional) rag lists
	if (ragSettings && ragSettings?.allowedDomains.length > 0) {
		yield makeGeneralUpdate({ message: "Filtering on specified domains" });
	}
	const filters = buildQueryFromSiteFilters(
		[...(ragSettings?.allowedDomains ?? []), ...allowList],
		blockList
	);

	const searchQueryWithFilters = `${filters} ${searchQuery}`;
	const searchResults = await searchWeb(searchQueryWithFilters).then(filterByBlockList);

	return {
		searchQuery: searchQueryWithFilters,
		pages: searchResults,
	};
}

// ----------
// Utils
function filterByBlockList(results: WebSearchSource[]): WebSearchSource[] {
	return results.filter((result) => !blockList.some((blocked) => result.link.includes(blocked)));
}

function buildQueryFromSiteFilters(allow: string[], block: string[]) {
	return (
		allow.map((item) => "site:" + item).join(" OR ") +
		" " +
		block.map((item) => "-site:" + item).join(" ")
	);
}

async function directLinksToSource(links: string[]): Promise<WebSearchSource[]> {
	if (env.ENABLE_LOCAL_FETCH !== "true") {
		const localLinks = await Promise.all(links.map(isURLStringLocal));
		links = links.filter((_, index) => !localLinks[index]);
	}

	return links.filter(isURL).map((link) => ({
		link,
		title: "",
		text: [""],
	}));
}

</src/lib/server/websearch/search/search.ts>

<src/lib/server/websearch/search/generateQuery.ts>
import type { Message } from "$lib/types/Message";
import { format } from "date-fns";
import type { EndpointMessage } from "../../endpoints/endpoints";
import { generateFromDefaultEndpoint } from "../../generateFromDefaultEndpoint";

export async function generateQuery(messages: Message[]) {
	const currentDate = format(new Date(), "MMMM d, yyyy");
	const userMessages = messages.filter(({ from }) => from === "user");
	const previousUserMessages = userMessages.slice(0, -1);

	const lastMessage = userMessages.slice(-1)[0];

	const convQuery: Array<EndpointMessage> = [
		{
			from: "user",
			content: `Previous Questions:
- Who is the president of France?

Current Question: What about Mexico?
`,
		},
		{
			from: "assistant",
			content: "President of Mexico",
		},
		{
			from: "user",
			content: `Previous questions: 
- When is the next formula 1 grand prix?

Current Question: Where is it being hosted?`,
		},
		{
			from: "assistant",
			content: "location of next formula 1 grand prix",
		},
		{
			from: "user",
			content: "Current Question: What type of printhead does the Epson F2270 DTG printer use?",
		},
		{
			from: "assistant",
			content: "Epson F2270 DTG printer printhead",
		},
		{ from: "user", content: "What were the news yesterday?" },
		{
			from: "assistant",
			content: `news ${format(new Date(Date.now() - 864e5), "MMMM d, yyyy")}`,
		},
		{ from: "user", content: "What is the current weather in Paris?" },
		{ from: "assistant", content: `weather in Paris ${currentDate}` },
		{
			from: "user",
			content:
				(previousUserMessages.length > 0
					? `Previous questions: \n${previousUserMessages
							.map(({ content }) => `- ${content}`)
							.join("\n")}`
					: "") +
				"\n\nCurrent Question: " +
				lastMessage.content,
		},
	];

	const webQuery = await generateFromDefaultEndpoint({
		messages: convQuery,
		preprompt: `You are tasked with generating web search queries. Give me an appropriate query to answer my question for google search. Answer with only the query. Today is ${currentDate}`,
		generateSettings: {
			max_new_tokens: 30,
		},
	});

	return webQuery.trim();
}

</src/lib/server/websearch/search/generateQuery.ts>

<src/lib/server/websearch/update.ts>
import type { WebSearchSource } from "$lib/types/WebSearch";
import {
	MessageUpdateType,
	MessageWebSearchUpdateType,
	type MessageWebSearchErrorUpdate,
	type MessageWebSearchFinishedUpdate,
	type MessageWebSearchGeneralUpdate,
	type MessageWebSearchSourcesUpdate,
} from "$lib/types/MessageUpdate";

export function makeGeneralUpdate(
	update: Pick<MessageWebSearchGeneralUpdate, "message" | "args">
): MessageWebSearchGeneralUpdate {
	return {
		type: MessageUpdateType.WebSearch,
		subtype: MessageWebSearchUpdateType.Update,
		...update,
	};
}

export function makeErrorUpdate(
	update: Pick<MessageWebSearchErrorUpdate, "message" | "args">
): MessageWebSearchErrorUpdate {
	return {
		type: MessageUpdateType.WebSearch,
		subtype: MessageWebSearchUpdateType.Error,
		...update,
	};
}

export function makeSourcesUpdate(sources: WebSearchSource[]): MessageWebSearchSourcesUpdate {
	return {
		type: MessageUpdateType.WebSearch,
		subtype: MessageWebSearchUpdateType.Sources,
		message: "sources",
		sources: sources.map(({ link, title }) => ({ link, title })),
	};
}

export function makeFinalAnswerUpdate(): MessageWebSearchFinishedUpdate {
	return {
		type: MessageUpdateType.WebSearch,
		subtype: MessageWebSearchUpdateType.Finished,
	};
}

</src/lib/server/websearch/update.ts>

<src/lib/server/logger.ts>
import pino from "pino";
import { dev } from "$app/environment";
import { env } from "$env/dynamic/private";

let options: pino.LoggerOptions = {};

if (dev) {
	options = {
		transport: {
			target: "pino-pretty",
			options: {
				colorize: true,
			},
		},
	};
}

export const logger = pino({ ...options, level: env.LOG_LEVEL ?? "info" });

</src/lib/server/logger.ts>

<src/lib/server/database.ts>
import { env } from "$env/dynamic/private";
import { GridFSBucket, MongoClient } from "mongodb";
import type { Conversation } from "$lib/types/Conversation";
import type { SharedConversation } from "$lib/types/SharedConversation";
import type { AbortedGeneration } from "$lib/types/AbortedGeneration";
import type { Settings } from "$lib/types/Settings";
import type { User } from "$lib/types/User";
import type { MessageEvent } from "$lib/types/MessageEvent";
import type { Session } from "$lib/types/Session";
import type { Assistant } from "$lib/types/Assistant";
import type { Report } from "$lib/types/Report";
import type { ConversationStats } from "$lib/types/ConversationStats";
import type { MigrationResult } from "$lib/types/MigrationResult";
import type { Semaphore } from "$lib/types/Semaphore";
import type { AssistantStats } from "$lib/types/AssistantStats";
import type { CommunityToolDB } from "$lib/types/Tool";

import { logger } from "$lib/server/logger";
import { building } from "$app/environment";
import type { TokenCache } from "$lib/types/TokenCache";
import { onExit } from "./exitHandler";

export const CONVERSATION_STATS_COLLECTION = "conversations.stats";

export class Database {
	private client: MongoClient;

	private static instance: Database;

	private constructor() {
		if (!env.MONGODB_URL) {
			throw new Error(
				"Please specify the MONGODB_URL environment variable inside .env.local. Set it to mongodb://localhost:27017 if you are running MongoDB locally, or to a MongoDB Atlas free instance for example."
			);
		}

		this.client = new MongoClient(env.MONGODB_URL, {
			directConnection: env.MONGODB_DIRECT_CONNECTION === "true",
		});

		this.client.connect().catch((err) => {
			logger.error(err, "Connection error");
			process.exit(1);
		});
		this.client.db(env.MONGODB_DB_NAME + (import.meta.env.MODE === "test" ? "-test" : ""));
		this.client.on("open", () => this.initDatabase());

		// Disconnect DB on exit
		onExit(() => this.client.close(true));
	}

	public static getInstance(): Database {
		if (!Database.instance) {
			Database.instance = new Database();
		}

		return Database.instance;
	}

	/**
	 * Return mongoClient
	 */
	public getClient(): MongoClient {
		return this.client;
	}

	/**
	 * Return map of database's collections
	 */
	public getCollections() {
		const db = this.client.db(
			env.MONGODB_DB_NAME + (import.meta.env.MODE === "test" ? "-test" : "")
		);

		const conversations = db.collection<Conversation>("conversations");
		const conversationStats = db.collection<ConversationStats>(CONVERSATION_STATS_COLLECTION);
		const assistants = db.collection<Assistant>("assistants");
		const assistantStats = db.collection<AssistantStats>("assistants.stats");
		const reports = db.collection<Report>("reports");
		const sharedConversations = db.collection<SharedConversation>("sharedConversations");
		const abortedGenerations = db.collection<AbortedGeneration>("abortedGenerations");
		const settings = db.collection<Settings>("settings");
		const users = db.collection<User>("users");
		const sessions = db.collection<Session>("sessions");
		const messageEvents = db.collection<MessageEvent>("messageEvents");
		const bucket = new GridFSBucket(db, { bucketName: "files" });
		const migrationResults = db.collection<MigrationResult>("migrationResults");
		const semaphores = db.collection<Semaphore>("semaphores");
		const tokenCaches = db.collection<TokenCache>("tokens");
		const tools = db.collection<CommunityToolDB>("tools");

		return {
			conversations,
			conversationStats,
			assistants,
			assistantStats,
			reports,
			sharedConversations,
			abortedGenerations,
			settings,
			users,
			sessions,
			messageEvents,
			bucket,
			migrationResults,
			semaphores,
			tokenCaches,
			tools,
		};
	}

	/**
	 * Init database once connected: Index creation
	 * @private
	 */
	private initDatabase() {
		const {
			conversations,
			conversationStats,
			assistants,
			assistantStats,
			reports,
			sharedConversations,
			abortedGenerations,
			settings,
			users,
			sessions,
			messageEvents,
			semaphores,
			tokenCaches,
			tools,
		} = this.getCollections();

		conversations
			.createIndex(
				{ sessionId: 1, updatedAt: -1 },
				{ partialFilterExpression: { sessionId: { $exists: true } } }
			)
			.catch((e) => logger.error(e));
		conversations
			.createIndex(
				{ userId: 1, updatedAt: -1 },
				{ partialFilterExpression: { userId: { $exists: true } } }
			)
			.catch((e) => logger.error(e));
		conversations
			.createIndex(
				{ "message.id": 1, "message.ancestors": 1 },
				{ partialFilterExpression: { userId: { $exists: true } } }
			)
			.catch((e) => logger.error(e));
		// Not strictly necessary, could use _id, but more convenient. Also for stats
		// To do stats on conversation messages
		conversations
			.createIndex({ "messages.createdAt": 1 }, { sparse: true })
			.catch((e) => logger.error(e));
		// Unique index for stats
		conversationStats
			.createIndex(
				{
					type: 1,
					"date.field": 1,
					"date.span": 1,
					"date.at": 1,
					distinct: 1,
				},
				{ unique: true }
			)
			.catch((e) => logger.error(e));
		// Allow easy check of last computed stat for given type/dateField
		conversationStats
			.createIndex({
				type: 1,
				"date.field": 1,
				"date.at": 1,
			})
			.catch((e) => logger.error(e));
		abortedGenerations
			.createIndex({ updatedAt: 1 }, { expireAfterSeconds: 30 })
			.catch((e) => logger.error(e));
		abortedGenerations
			.createIndex({ conversationId: 1 }, { unique: true })
			.catch((e) => logger.error(e));
		sharedConversations.createIndex({ hash: 1 }, { unique: true }).catch((e) => logger.error(e));
		settings
			.createIndex({ sessionId: 1 }, { unique: true, sparse: true })
			.catch((e) => logger.error(e));
		settings
			.createIndex({ userId: 1 }, { unique: true, sparse: true })
			.catch((e) => logger.error(e));
		settings.createIndex({ assistants: 1 }).catch((e) => logger.error(e));
		users.createIndex({ hfUserId: 1 }, { unique: true }).catch((e) => logger.error(e));
		users
			.createIndex({ sessionId: 1 }, { unique: true, sparse: true })
			.catch((e) => logger.error(e));
		// No unicity because due to renames & outdated info from oauth provider, there may be the same username on different users
		users.createIndex({ username: 1 }).catch((e) => logger.error(e));
		messageEvents
			.createIndex({ createdAt: 1 }, { expireAfterSeconds: 60 })
			.catch((e) => logger.error(e));
		sessions.createIndex({ expiresAt: 1 }, { expireAfterSeconds: 0 }).catch((e) => logger.error(e));
		sessions.createIndex({ sessionId: 1 }, { unique: true }).catch((e) => logger.error(e));
		assistants.createIndex({ createdById: 1, userCount: -1 }).catch((e) => logger.error(e));
		assistants.createIndex({ userCount: 1 }).catch((e) => logger.error(e));
		assistants.createIndex({ featured: 1, userCount: -1 }).catch((e) => logger.error(e));
		assistants.createIndex({ modelId: 1, userCount: -1 }).catch((e) => logger.error(e));
		assistants.createIndex({ searchTokens: 1 }).catch((e) => logger.error(e));
		assistants.createIndex({ last24HoursCount: 1 }).catch((e) => logger.error(e));
		assistants
			.createIndex({ last24HoursUseCount: -1, useCount: -1, _id: 1 })
			.catch((e) => logger.error(e));
		assistantStats
			// Order of keys is important for the queries
			.createIndex({ "date.span": 1, "date.at": 1, assistantId: 1 }, { unique: true })
			.catch((e) => logger.error(e));
		reports.createIndex({ assistantId: 1 }).catch((e) => logger.error(e));
		reports.createIndex({ createdBy: 1, assistantId: 1 }).catch((e) => logger.error(e));

		// Unique index for semaphore and migration results
		semaphores.createIndex({ key: 1 }, { unique: true }).catch((e) => logger.error(e));
		semaphores
			.createIndex({ createdAt: 1 }, { expireAfterSeconds: 60 })
			.catch((e) => logger.error(e));
		tokenCaches
			.createIndex({ createdAt: 1 }, { expireAfterSeconds: 5 * 60 })
			.catch((e) => logger.error(e));
		tokenCaches.createIndex({ tokenHash: 1 }).catch((e) => logger.error(e));
		tools.createIndex({ createdById: 1, userCount: -1 }).catch((e) => logger.error(e));
		tools.createIndex({ userCount: 1 }).catch((e) => logger.error(e));
		tools.createIndex({ last24HoursCount: 1 }).catch((e) => logger.error(e));
	}
}

export const collections = building
	? ({} as unknown as ReturnType<typeof Database.prototype.getCollections>)
	: Database.getInstance().getCollections();

</src/lib/server/database.ts>

<src/lib/server/files/uploadFile.ts>
import type { Conversation } from "$lib/types/Conversation";
import type { MessageFile } from "$lib/types/Message";
import { sha256 } from "$lib/utils/sha256";
import { fileTypeFromBuffer } from "file-type";
import { collections } from "$lib/server/database";

export async function uploadFile(file: File, conv: Conversation): Promise<MessageFile> {
	const sha = await sha256(await file.text());
	const buffer = await file.arrayBuffer();

	// Attempt to detect the mime type of the file, fallback to the uploaded mime
	const mime = await fileTypeFromBuffer(buffer).then((fileType) => fileType?.mime ?? file.type);

	const upload = collections.bucket.openUploadStream(`${conv._id}-${sha}`, {
		metadata: { conversation: conv._id.toString(), mime },
	});

	upload.write((await file.arrayBuffer()) as unknown as Buffer);
	upload.end();

	// only return the filename when upload throws a finish event or a 20s time out occurs
	return new Promise((resolve, reject) => {
		upload.once("finish", () =>
			resolve({ type: "hash", value: sha, mime: file.type, name: file.name })
		);
		upload.once("error", reject);
		setTimeout(() => reject(new Error("Upload timed out")), 20_000);
	});
}

</src/lib/server/files/uploadFile.ts>

<src/lib/server/files/downloadFile.ts>
import { error } from "@sveltejs/kit";
import { collections } from "$lib/server/database";
import type { Conversation } from "$lib/types/Conversation";
import type { SharedConversation } from "$lib/types/SharedConversation";
import type { MessageFile } from "$lib/types/Message";

export async function downloadFile(
	sha256: string,
	convId: Conversation["_id"] | SharedConversation["_id"]
): Promise<MessageFile & { type: "base64" }> {
	const fileId = collections.bucket.find({ filename: `${convId.toString()}-${sha256}` });

	const file = await fileId.next();
	if (!file) {
		error(404, "File not found");
	}
	if (file.metadata?.conversation !== convId.toString()) {
		error(403, "You don't have access to this file.");
	}

	const mime = file.metadata?.mime;
	const name = file.filename;

	const fileStream = collections.bucket.openDownloadStream(file._id);

	const buffer = await new Promise<Buffer>((resolve, reject) => {
		const chunks: Uint8Array[] = [];
		fileStream.on("data", (chunk) => chunks.push(chunk));
		fileStream.on("error", reject);
		fileStream.on("end", () => resolve(Buffer.concat(chunks)));
	});

	return { type: "base64", name, value: buffer.toString("base64"), mime };
}

</src/lib/server/files/downloadFile.ts>

<src/lib/server/isURLLocal.ts>
import { Address6, Address4 } from "ip-address";
import dns from "node:dns";

const dnsLookup = (hostname: string): Promise<{ address: string; family: number }> => {
	return new Promise((resolve, reject) => {
		dns.lookup(hostname, (err, address, family) => {
			if (err) return reject(err);
			resolve({ address, family });
		});
	});
};

export async function isURLLocal(URL: URL): Promise<boolean> {
	const { address, family } = await dnsLookup(URL.hostname);

	if (family === 4) {
		const addr = new Address4(address);
		const localSubnet = new Address4("127.0.0.0/8");
		return addr.isInSubnet(localSubnet);
	}

	if (family === 6) {
		const addr = new Address6(address);
		return addr.isLoopback() || addr.isInSubnet(new Address6("::1/128")) || addr.isLinkLocal();
	}

	throw Error("Unknown IP family");
}

export function isURLStringLocal(url: string) {
	try {
		const urlObj = new URL(url);
		return isURLLocal(urlObj);
	} catch (e) {
		// assume local if URL parsing fails
		return true;
	}
}

</src/lib/server/isURLLocal.ts>

<src/lib/server/models.ts>
import { env } from "$env/dynamic/private";
import type { ChatTemplateInput } from "$lib/types/Template";
import { compileTemplate } from "$lib/utils/template";
import { z } from "zod";
import endpoints, { endpointSchema, type Endpoint } from "./endpoints/endpoints";
import { endpointTgi } from "./endpoints/tgi/endpointTgi";
import { sum } from "$lib/utils/sum";
import { embeddingModels, validateEmbeddingModelByName } from "./embeddingModels";

import type { PreTrainedTokenizer } from "@huggingface/transformers";

import JSON5 from "json5";
import { getTokenizer } from "$lib/utils/getTokenizer";
import { logger } from "$lib/server/logger";
import { ToolResultStatus, type ToolInput } from "$lib/types/Tool";

type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;

const modelConfig = z.object({
	/** Used as an identifier in DB */
	id: z.string().optional(),
	/** Used to link to the model page, and for inference */
	name: z.string().default(""),
	displayName: z.string().min(1).optional(),
	description: z.string().min(1).optional(),
	logoUrl: z.string().url().optional(),
	websiteUrl: z.string().url().optional(),
	modelUrl: z.string().url().optional(),
	tokenizer: z
		.union([
			z.string(),
			z.object({
				tokenizerUrl: z.string().url(),
				tokenizerConfigUrl: z.string().url(),
			}),
		])
		.optional(),
	datasetName: z.string().min(1).optional(),
	datasetUrl: z.string().url().optional(),
	preprompt: z.string().default(""),
	prepromptUrl: z.string().url().optional(),
	chatPromptTemplate: z.string().optional(),
	promptExamples: z
		.array(
			z.object({
				title: z.string().min(1),
				prompt: z.string().min(1),
			})
		)
		.optional(),
	endpoints: z.array(endpointSchema).optional(),
	parameters: z
		.object({
			temperature: z.number().min(0).max(1).optional(),
			truncate: z.number().int().positive().optional(),
			max_new_tokens: z.number().int().positive().optional(),
			stop: z.array(z.string()).optional(),
			top_p: z.number().positive().optional(),
			top_k: z.number().positive().optional(),
			repetition_penalty: z.number().min(-2).max(2).optional(),
		})
		.passthrough()
		.optional(),
	multimodal: z.boolean().default(false),
	tools: z.boolean().default(false),
	unlisted: z.boolean().default(false),
	embeddingModel: validateEmbeddingModelByName(embeddingModels).optional(),
});

const modelsRaw = z.array(modelConfig).parse(JSON5.parse(env.MODELS));

async function getChatPromptRender(
	m: z.infer<typeof modelConfig>
): Promise<ReturnType<typeof compileTemplate<ChatTemplateInput>>> {
	if (m.chatPromptTemplate) {
		return compileTemplate<ChatTemplateInput>(m.chatPromptTemplate, m);
	}
	let tokenizer: PreTrainedTokenizer;

	if (!m.tokenizer) {
		return compileTemplate<ChatTemplateInput>(
			"{{#if @root.preprompt}}<|im_start|>system\n{{@root.preprompt}}<|im_end|>\n{{/if}}{{#each messages}}{{#ifUser}}<|im_start|>user\n{{content}}<|im_end|>\n<|im_start|>assistant\n{{/ifUser}}{{#ifAssistant}}{{content}}<|im_end|>\n{{/ifAssistant}}{{/each}}",
			m
		);
	}

	try {
		tokenizer = await getTokenizer(m.tokenizer);
	} catch (e) {
		logger.error(
			e,
			`Failed to load tokenizer for model ${m.name} consider setting chatPromptTemplate manually or making sure the model is available on the hub.`
		);
		process.exit();
	}

	const renderTemplate = ({
		messages,
		preprompt,
		tools,
		toolResults,
		continueMessage,
	}: ChatTemplateInput) => {
		let formattedMessages: { role: string; content: string }[] = messages.map((message) => ({
			content: message.content,
			role: message.from,
		}));

		if (preprompt && formattedMessages[0].role !== "system") {
			formattedMessages = [
				{
					role: "system",
					content: preprompt,
				},
				...formattedMessages,
			];
		}

		if (toolResults?.length) {
			// todo: should update the command r+ tokenizer to support system messages at any location
			// or use the `rag` mode without the citations
			const id = m.id ?? m.name;

			if (id.startsWith("CohereForAI")) {
				formattedMessages = [
					{
						role: "system",
						content:
							"\n\n<results>\n" +
							toolResults
								.flatMap((result, idx) => {
									if (result.status === ToolResultStatus.Error) {
										return (
											`Document: ${idx}\n` + `Tool "${result.call.name}" error\n` + result.message
										);
									}
									return (
										`Document: ${idx}\n` +
										result.outputs
											.flatMap((output) =>
												Object.entries(output).map(([title, text]) => `${title}\n${text}`)
											)
											.join("\n")
									);
								})
								.join("\n\n") +
							"\n</results>",
					},
					...formattedMessages,
				];
			} else if (id.startsWith("meta-llama")) {
				const results = toolResults.flatMap((result) => {
					if (result.status === ToolResultStatus.Error) {
						return [
							{
								tool_call_id: result.call.name,
								output: "Error: " + result.message,
							},
						];
					} else {
						return result.outputs.map((output) => ({
							tool_call_id: result.call.name,
							output: JSON.stringify(output),
						}));
					}
				});

				formattedMessages = [
					...formattedMessages,
					{
						role: "python",
						content: JSON.stringify(results),
					},
				];
			} else {
				formattedMessages = [
					...formattedMessages,
					{
						role: "system",
						content: JSON.stringify(toolResults),
					},
				];
			}
			tools = [];
		}

		const chatTemplate = tools?.length ? "tool_use" : undefined;

		const documents = (toolResults ?? []).flatMap((result) => {
			if (result.status === ToolResultStatus.Error) {
				return [{ title: `Tool "${result.call.name}" error`, text: "\n" + result.message }];
			}
			return result.outputs.flatMap((output) =>
				Object.entries(output).map(([title, text]) => ({
					title: `Tool "${result.call.name}" ${title}`,
					text: "\n" + text,
				}))
			);
		});

		const mappedTools =
			tools?.map((tool) => {
				const inputs: Record<
					string,
					{
						type: ToolInput["type"];
						description: string;
						required: boolean;
					}
				> = {};

				for (const value of tool.inputs) {
					if (value.paramType !== "fixed") {
						inputs[value.name] = {
							type: value.type,
							description: value.description ?? "",
							required: value.paramType === "required",
						};
					}
				}

				return {
					name: tool.name,
					description: tool.description,
					parameter_definitions: inputs,
				};
			}) ?? [];

		const output = tokenizer.apply_chat_template(formattedMessages, {
			tokenize: false,
			add_generation_prompt: !continueMessage,
			chat_template: chatTemplate,
			tools: mappedTools,
			documents,
		});

		if (typeof output !== "string") {
			throw new Error("Failed to apply chat template, the output is not a string");
		}

		return output;
	};

	return renderTemplate;
}

const processModel = async (m: z.infer<typeof modelConfig>) => ({
	...m,
	chatPromptRender: await getChatPromptRender(m),
	id: m.id || m.name,
	displayName: m.displayName || m.name,
	preprompt: m.prepromptUrl ? await fetch(m.prepromptUrl).then((r) => r.text()) : m.preprompt,
	parameters: { ...m.parameters, stop_sequences: m.parameters?.stop },
});

export type ProcessedModel = Awaited<ReturnType<typeof processModel>> & {
	getEndpoint: () => Promise<Endpoint>;
};

const addEndpoint = (m: Awaited<ReturnType<typeof processModel>>) => ({
	...m,
	getEndpoint: async (): Promise<Endpoint> => {
		if (!m.endpoints) {
			return endpointTgi({
				type: "tgi",
				url: `${env.HF_API_ROOT}/${m.name}`,
				accessToken: env.HF_TOKEN ?? env.HF_ACCESS_TOKEN,
				weight: 1,
				model: m,
			});
		}
		const totalWeight = sum(m.endpoints.map((e) => e.weight));

		let random = Math.random() * totalWeight;

		for (const endpoint of m.endpoints) {
			if (random < endpoint.weight) {
				const args = { ...endpoint, model: m };

				switch (args.type) {
					case "tgi":
						return endpoints.tgi(args);
					case "anthropic":
						return endpoints.anthropic(args);
					case "anthropic-vertex":
						return endpoints.anthropicvertex(args);
					case "bedrock":
						return endpoints.bedrock(args);
					case "aws":
						return await endpoints.aws(args);
					case "openai":
						return await endpoints.openai(args);
					case "llamacpp":
						return endpoints.llamacpp(args);
					case "ollama":
						return endpoints.ollama(args);
					case "vertex":
						return await endpoints.vertex(args);
					case "genai":
						return await endpoints.genai(args);
					case "cloudflare":
						return await endpoints.cloudflare(args);
					case "cohere":
						return await endpoints.cohere(args);
					case "langserve":
						return await endpoints.langserve(args);
					default:
						// for legacy reason
						return endpoints.tgi(args);
				}
			}
			random -= endpoint.weight;
		}

		throw new Error(`Failed to select endpoint`);
	},
});

export const models: ProcessedModel[] = await Promise.all(
	modelsRaw.map((e) => processModel(e).then(addEndpoint))
);

// super ugly but not sure how to make typescript happier
export const validModelIdSchema = z.enum(models.map((m) => m.id) as [string, ...string[]]);

export const defaultModel = models[0];

// Models that have been deprecated
export const oldModels = env.OLD_MODELS
	? z
			.array(
				z.object({
					id: z.string().optional(),
					name: z.string().min(1),
					displayName: z.string().min(1).optional(),
					transferTo: validModelIdSchema.optional(),
				})
			)
			.parse(JSON5.parse(env.OLD_MODELS))
			.map((m) => ({ ...m, id: m.id || m.name, displayName: m.displayName || m.name }))
	: [];

export const validateModel = (_models: BackendModel[]) => {
	// Zod enum function requires 2 parameters
	return z.enum([_models[0].id, ..._models.slice(1).map((m) => m.id)]);
};

// if `TASK_MODEL` is string & name of a model in `MODELS`, then we use `MODELS[TASK_MODEL]`, else we try to parse `TASK_MODEL` as a model config itself

export const smallModel = env.TASK_MODEL
	? (models.find((m) => m.name === env.TASK_MODEL) ||
			(await processModel(modelConfig.parse(JSON5.parse(env.TASK_MODEL))).then((m) =>
				addEndpoint(m)
			))) ??
	  defaultModel
	: defaultModel;

export type BackendModel = Optional<
	typeof defaultModel,
	"preprompt" | "parameters" | "multimodal" | "unlisted" | "tools"
>;

</src/lib/server/models.ts>

<src/lib/server/abortedGenerations.ts>
// Shouldn't be needed if we dove into sveltekit internals, see https://github.com/huggingface/chat-ui/pull/88#issuecomment-1523173850

import { logger } from "$lib/server/logger";
import { collections } from "$lib/server/database";
import { onExit } from "./exitHandler";

export class AbortedGenerations {
	private static instance: AbortedGenerations;

	private abortedGenerations: Map<string, Date> = new Map();

	private constructor() {
		const interval = setInterval(this.updateList, 1000);
		onExit(() => clearInterval(interval));
	}

	public static getInstance(): AbortedGenerations {
		if (!AbortedGenerations.instance) {
			AbortedGenerations.instance = new AbortedGenerations();
		}

		return AbortedGenerations.instance;
	}

	public getList(): Map<string, Date> {
		return this.abortedGenerations;
	}

	private async updateList() {
		try {
			const aborts = await collections.abortedGenerations.find({}).sort({ createdAt: 1 }).toArray();

			this.abortedGenerations = new Map(
				aborts.map(({ conversationId, createdAt }) => [conversationId.toString(), createdAt])
			);
		} catch (err) {
			logger.error(err);
		}
	}
}

</src/lib/server/abortedGenerations.ts>

<src/lib/server/isURLLocal.spec.ts>
import { isURLLocal } from "./isURLLocal";
import { describe, expect, it } from "vitest";

describe("isURLLocal", async () => {
	it("should return true for localhost", async () => {
		expect(await isURLLocal(new URL("http://localhost"))).toBe(true);
	});
	it("should return true for 127.0.0.1", async () => {
		expect(await isURLLocal(new URL("http://127.0.0.1"))).toBe(true);
	});
	it("should return true for 127.254.254.254", async () => {
		expect(await isURLLocal(new URL("http://127.254.254.254"))).toBe(true);
	});
	it("should return false for huggingface.co", async () => {
		expect(await isURLLocal(new URL("https://huggingface.co/"))).toBe(false);
	});
	it("should return true for 127.0.0.1.nip.io", async () => {
		expect(await isURLLocal(new URL("http://127.0.0.1.nip.io"))).toBe(true);
	});
	it("should fail on ipv6", async () => {
		await expect(isURLLocal(new URL("http://[::1]"))).rejects.toThrow();
	});
	it("should fail on ipv6 --1.sslip.io", async () => {
		await expect(isURLLocal(new URL("http://--1.sslip.io"))).rejects.toThrow();
	});
	it("should fail on invalid domain names", async () => {
		await expect(
			isURLLocal(new URL("http://34329487239847329874923948732984.com/"))
		).rejects.toThrow();
	});
});

</src/lib/server/isURLLocal.spec.ts>

<src/lib/server/embeddingEndpoints/embeddingEndpoints.ts>
import { z } from "zod";
import {
	embeddingEndpointTei,
	embeddingEndpointTeiParametersSchema,
} from "./tei/embeddingEndpoints";
import {
	embeddingEndpointTransformersJS,
	embeddingEndpointTransformersJSParametersSchema,
} from "./transformersjs/embeddingEndpoints";
import {
	embeddingEndpointOpenAI,
	embeddingEndpointOpenAIParametersSchema,
} from "./openai/embeddingEndpoints";
import { embeddingEndpointHfApi, embeddingEndpointHfApiSchema } from "./hfApi/embeddingHfApi";

// parameters passed when generating text
interface EmbeddingEndpointParameters {
	inputs: string[];
}

export type Embedding = number[];

// type signature for the endpoint
export type EmbeddingEndpoint = (params: EmbeddingEndpointParameters) => Promise<Embedding[]>;

export const embeddingEndpointSchema = z.discriminatedUnion("type", [
	embeddingEndpointTeiParametersSchema,
	embeddingEndpointTransformersJSParametersSchema,
	embeddingEndpointOpenAIParametersSchema,
	embeddingEndpointHfApiSchema,
]);

type EmbeddingEndpointTypeOptions = z.infer<typeof embeddingEndpointSchema>["type"];

// generator function that takes in type discrimantor value for defining the endpoint and return the endpoint
export type EmbeddingEndpointGenerator<T extends EmbeddingEndpointTypeOptions> = (
	inputs: Extract<z.infer<typeof embeddingEndpointSchema>, { type: T }>
) => EmbeddingEndpoint | Promise<EmbeddingEndpoint>;

// list of all endpoint generators
export const embeddingEndpoints: {
	[Key in EmbeddingEndpointTypeOptions]: EmbeddingEndpointGenerator<Key>;
} = {
	tei: embeddingEndpointTei,
	transformersjs: embeddingEndpointTransformersJS,
	openai: embeddingEndpointOpenAI,
	hfapi: embeddingEndpointHfApi,
};

export default embeddingEndpoints;

</src/lib/server/embeddingEndpoints/embeddingEndpoints.ts>

<src/lib/server/embeddingEndpoints/hfApi/embeddingHfApi.ts>
import { z } from "zod";
import type { EmbeddingEndpoint, Embedding } from "../embeddingEndpoints";
import { chunk } from "$lib/utils/chunk";
import { env } from "$env/dynamic/private";
import { logger } from "$lib/server/logger";

export const embeddingEndpointHfApiSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("hfapi"),
	authorization: z
		.string()
		.optional()
		.transform((v) => (!v && env.HF_TOKEN ? "Bearer " + env.HF_TOKEN : v)), // if the header is not set but HF_TOKEN is, use it as the authorization header
});

export async function embeddingEndpointHfApi(
	input: z.input<typeof embeddingEndpointHfApiSchema>
): Promise<EmbeddingEndpoint> {
	const { model, authorization } = embeddingEndpointHfApiSchema.parse(input);
	const url = "https://api-inference.huggingface.co/models/" + model.id;

	return async ({ inputs }) => {
		const batchesInputs = chunk(inputs, 128);

		const batchesResults = await Promise.all(
			batchesInputs.map(async (batchInputs) => {
				const response = await fetch(`${url}`, {
					method: "POST",
					headers: {
						Accept: "application/json",
						"Content-Type": "application/json",
						...(authorization ? { Authorization: authorization } : {}),
					},
					body: JSON.stringify({
						inputs: {
							source_sentence: batchInputs[0],
							sentences: batchInputs.slice(1),
						},
					}),
				});

				if (!response.ok) {
					logger.error(await response.text());
					logger.error(response, "Failed to get embeddings from Hugging Face API");
					return [];
				}

				const embeddings: Embedding[] = await response.json();
				return embeddings;
			})
		);

		const flatAllEmbeddings = batchesResults.flat();

		return flatAllEmbeddings;
	};
}

</src/lib/server/embeddingEndpoints/hfApi/embeddingHfApi.ts>

<src/lib/server/embeddingEndpoints/transformersjs/embeddingEndpoints.ts>
import { z } from "zod";
import type { EmbeddingEndpoint } from "../embeddingEndpoints";
import type { Tensor, FeatureExtractionPipeline } from "@huggingface/transformers";
import { pipeline } from "@huggingface/transformers";

export const embeddingEndpointTransformersJSParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("transformersjs"),
});

// Use the Singleton pattern to enable lazy construction of the pipeline.
class TransformersJSModelsSingleton {
	static instances: Array<[string, Promise<FeatureExtractionPipeline>]> = [];

	static async getInstance(modelName: string): Promise<FeatureExtractionPipeline> {
		const modelPipelineInstance = this.instances.find(([name]) => name === modelName);

		if (modelPipelineInstance) {
			const [, modelPipeline] = modelPipelineInstance;
			// dispose of the previous pipeline to clear memory
			await (await modelPipeline).dispose();
			this.instances = this.instances.filter(([name]) => name !== modelName);
		}
		const newModelPipeline = pipeline("feature-extraction", modelName);
		this.instances.push([modelName, newModelPipeline]);

		return newModelPipeline;
	}
}

export async function calculateEmbedding(modelName: string, inputs: string[]) {
	const extractor = await TransformersJSModelsSingleton.getInstance(modelName);
	const output: Tensor = await extractor(inputs, { pooling: "mean", normalize: true });

	return output.tolist();
}

export function embeddingEndpointTransformersJS(
	input: z.input<typeof embeddingEndpointTransformersJSParametersSchema>
): EmbeddingEndpoint {
	const { model } = embeddingEndpointTransformersJSParametersSchema.parse(input);

	return async ({ inputs }) => {
		return calculateEmbedding(model.name, inputs);
	};
}

</src/lib/server/embeddingEndpoints/transformersjs/embeddingEndpoints.ts>

<src/lib/server/embeddingEndpoints/tei/embeddingEndpoints.ts>
import { z } from "zod";
import type { EmbeddingEndpoint, Embedding } from "../embeddingEndpoints";
import { chunk } from "$lib/utils/chunk";
import { env } from "$env/dynamic/private";
import { logger } from "$lib/server/logger";

export const embeddingEndpointTeiParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("tei"),
	url: z.string().url(),
	authorization: z
		.string()
		.optional()
		.transform((v) => (!v && env.HF_TOKEN ? "Bearer " + env.HF_TOKEN : v)), // if the header is not set but HF_TOKEN is, use it as the authorization header
});

const getModelInfoByUrl = async (url: string, authorization?: string) => {
	const { origin } = new URL(url);

	const response = await fetch(`${origin}/info`, {
		headers: {
			Accept: "application/json",
			"Content-Type": "application/json",
			...(authorization ? { Authorization: authorization } : {}),
		},
	});

	try {
		const json = await response.json();
		return { max_client_batch_size: 32, max_batch_tokens: 16384, ...json };
	} catch {
		logger.debug("Could not get info from TEI embedding endpoint. Using defaults.");
		return { max_client_batch_size: 32, max_batch_tokens: 16384 };
	}
};

export async function embeddingEndpointTei(
	input: z.input<typeof embeddingEndpointTeiParametersSchema>
): Promise<EmbeddingEndpoint> {
	const { url, model, authorization } = embeddingEndpointTeiParametersSchema.parse(input);

	const { max_client_batch_size, max_batch_tokens } = await getModelInfoByUrl(url);
	const maxBatchSize = Math.min(
		max_client_batch_size,
		Math.floor(max_batch_tokens / model.chunkCharLength)
	);

	return async ({ inputs }) => {
		const { origin } = new URL(url);

		const batchesInputs = chunk(inputs, maxBatchSize);

		const batchesResults = await Promise.all(
			batchesInputs.map(async (batchInputs) => {
				const response = await fetch(`${origin}/embed`, {
					method: "POST",
					headers: {
						Accept: "application/json",
						"Content-Type": "application/json",
						...(authorization ? { Authorization: authorization } : {}),
					},
					body: JSON.stringify({ inputs: batchInputs, normalize: true, truncate: true }),
				});

				const embeddings: Embedding[] = await response.json();
				return embeddings;
			})
		);

		const flatAllEmbeddings = batchesResults.flat();

		return flatAllEmbeddings;
	};
}

</src/lib/server/embeddingEndpoints/tei/embeddingEndpoints.ts>

<src/lib/server/embeddingEndpoints/openai/embeddingEndpoints.ts>
import { z } from "zod";
import type { EmbeddingEndpoint, Embedding } from "../embeddingEndpoints";
import { chunk } from "$lib/utils/chunk";
import { env } from "$env/dynamic/private";

export const embeddingEndpointOpenAIParametersSchema = z.object({
	weight: z.number().int().positive().default(1),
	model: z.any(),
	type: z.literal("openai"),
	url: z.string().url().default("https://api.openai.com/v1/embeddings"),
	apiKey: z.string().default(env.OPENAI_API_KEY),
	defaultHeaders: z.record(z.string()).default({}),
});

export async function embeddingEndpointOpenAI(
	input: z.input<typeof embeddingEndpointOpenAIParametersSchema>
): Promise<EmbeddingEndpoint> {
	const { url, model, apiKey, defaultHeaders } =
		embeddingEndpointOpenAIParametersSchema.parse(input);

	const maxBatchSize = model.maxBatchSize || 100;

	return async ({ inputs }) => {
		const requestURL = new URL(url);

		const batchesInputs = chunk(inputs, maxBatchSize);

		const batchesResults = await Promise.all(
			batchesInputs.map(async (batchInputs) => {
				const response = await fetch(requestURL, {
					method: "POST",
					headers: {
						Accept: "application/json",
						"Content-Type": "application/json",
						...(apiKey ? { Authorization: `Bearer ${apiKey}` } : {}),
						...defaultHeaders,
					},
					body: JSON.stringify({ input: batchInputs, model: model.name }),
				});

				const embeddings: Embedding[] = [];
				const responseObject = await response.json();
				for (const embeddingObject of responseObject.data) {
					embeddings.push(embeddingObject.embedding);
				}
				return embeddings;
			})
		);

		const flatAllEmbeddings = batchesResults.flat();

		return flatAllEmbeddings;
	};
}

</src/lib/server/embeddingEndpoints/openai/embeddingEndpoints.ts>

<src/lib/server/metrics.ts>
import { collectDefaultMetrics, Registry, Counter, Summary } from "prom-client";
import express from "express";
import { logger } from "$lib/server/logger";
import { env } from "$env/dynamic/private";
import type { Model } from "$lib/types/Model";
import { onExit } from "./exitHandler";
import { promisify } from "util";

interface Metrics {
	model: {
		conversationsTotal: Counter<Model["id"]>;
		messagesTotal: Counter<Model["id"]>;
		tokenCountTotal: Counter<Model["id"]>;
		timePerOutputToken: Summary<Model["id"]>;
		timeToFirstToken: Summary<Model["id"]>;
		latency: Summary<Model["id"]>;
	};

	webSearch: {
		requestCount: Counter;
		pageFetchCount: Counter;
		pageFetchCountError: Counter;
		pageFetchDuration: Summary;
		embeddingDuration: Summary;
	};

	tool: {
		toolUseCount: Counter<string>;
		toolUseCountError: Counter<string>;
		toolUseDuration: Summary<string>;
		timeToChooseTools: Summary;
	};
}

export class MetricsServer {
	private static instance: MetricsServer;
	private metrics: Metrics;

	private constructor() {
		const app = express();

		const port = Number(env.METRICS_PORT || "5565");
		if (isNaN(port) || port < 0 || port > 65535) {
			logger.warn(`Invalid value for METRICS_PORT: ${env.METRICS_PORT}`);
		}

		if (env.METRICS_ENABLED !== "false" && env.METRICS_ENABLED !== "true") {
			logger.warn(`Invalid value for METRICS_ENABLED: ${env.METRICS_ENABLED}`);
		}
		if (env.METRICS_ENABLED === "true") {
			const server = app.listen(port, () => {
				logger.info(`Metrics server listening on port ${port}`);
			});
			const closeServer = promisify(server.close);
			onExit(async () => {
				logger.info("Disconnecting metrics server ...");
				await closeServer();
				logger.info("Server stopped ...");
			});
		}

		const register = new Registry();
		collectDefaultMetrics({ register });

		this.metrics = {
			model: {
				conversationsTotal: new Counter({
					name: "model_conversations_total",
					help: "Total number of conversations",
					labelNames: ["model"],
					registers: [register],
				}),
				messagesTotal: new Counter({
					name: "model_messages_total",
					help: "Total number of messages",
					labelNames: ["model"],
					registers: [register],
				}),
				tokenCountTotal: new Counter({
					name: "model_token_count_total",
					help: "Total number of tokens",
					labelNames: ["model"],
					registers: [register],
				}),
				timePerOutputToken: new Summary({
					name: "model_time_per_output_token_ms",
					help: "Time per output token in ms",
					labelNames: ["model"],
					registers: [register],
					maxAgeSeconds: 5 * 60,
					ageBuckets: 5,
				}),
				timeToFirstToken: new Summary({
					name: "model_time_to_first_token_ms",
					help: "Time to first token",
					labelNames: ["model"],
					registers: [register],
					maxAgeSeconds: 5 * 60,
					ageBuckets: 5,
				}),
				latency: new Summary({
					name: "model_latency_ms",
					help: "Total latency until end of answer",
					labelNames: ["model"],
					registers: [register],
					maxAgeSeconds: 5 * 60,
					ageBuckets: 5,
				}),
			},
			webSearch: {
				requestCount: new Counter({
					name: "web_search_request_count",
					help: "Total number of web search requests",
					registers: [register],
				}),
				pageFetchCount: new Counter({
					name: "web_search_page_fetch_count",
					help: "Total number of web search page fetches",
					registers: [register],
				}),
				pageFetchCountError: new Counter({
					name: "web_search_page_fetch_count_error",
					help: "Total number of web search page fetch errors",
					registers: [register],
				}),
				pageFetchDuration: new Summary({
					name: "web_search_page_fetch_duration_ms",
					help: "Web search page fetch duration",
					registers: [register],
					maxAgeSeconds: 5 * 60,
					ageBuckets: 5,
				}),
				embeddingDuration: new Summary({
					name: "web_search_embedding_duration_ms",
					help: "Web search embedding duration",
					registers: [register],
					maxAgeSeconds: 5 * 60,
					ageBuckets: 5,
				}),
			},
			tool: {
				toolUseCount: new Counter({
					name: "tool_use_count",
					help: "Total number of tool uses",
					labelNames: ["tool"],
					registers: [register],
				}),
				toolUseCountError: new Counter({
					name: "tool_use_count_error",
					help: "Total number of tool use errors",
					labelNames: ["tool"],
					registers: [register],
				}),
				toolUseDuration: new Summary({
					name: "tool_use_duration_ms",
					help: "Tool use duration",
					labelNames: ["tool"],
					registers: [register],
					maxAgeSeconds: 30 * 60, // longer duration since we use this to give feedback to the user
					ageBuckets: 5,
				}),
				timeToChooseTools: new Summary({
					name: "time_to_choose_tools_ms",
					help: "Time to choose tools",
					labelNames: ["model"],
					registers: [register],
					maxAgeSeconds: 5 * 60,
					ageBuckets: 5,
				}),
			},
		};

		app.get("/metrics", (req, res) => {
			register.metrics().then((metrics) => {
				res.set("Content-Type", "text/plain");
				res.send(metrics);
			});
		});
	}

	public static getInstance(): MetricsServer {
		if (!MetricsServer.instance) {
			MetricsServer.instance = new MetricsServer();
		}

		return MetricsServer.instance;
	}

	public static getMetrics(): Metrics {
		return MetricsServer.getInstance().metrics;
	}
}

</src/lib/server/metrics.ts>

<src/lib/server/auth.ts>
import {
	Issuer,
	type BaseClient,
	type UserinfoResponse,
	type TokenSet,
	custom,
} from "openid-client";
import { addHours, addWeeks } from "date-fns";
import { env } from "$env/dynamic/private";
import { sha256 } from "$lib/utils/sha256";
import { z } from "zod";
import { dev } from "$app/environment";
import type { Cookies } from "@sveltejs/kit";
import { collections } from "$lib/server/database";
import JSON5 from "json5";
import { logger } from "$lib/server/logger";

export interface OIDCSettings {
	redirectURI: string;
}

export interface OIDCUserInfo {
	token: TokenSet;
	userData: UserinfoResponse;
}

const stringWithDefault = (value: string) =>
	z
		.string()
		.default(value)
		.transform((el) => (el ? el : value));

export const OIDConfig = z
	.object({
		CLIENT_ID: stringWithDefault(env.OPENID_CLIENT_ID),
		CLIENT_SECRET: stringWithDefault(env.OPENID_CLIENT_SECRET),
		PROVIDER_URL: stringWithDefault(env.OPENID_PROVIDER_URL),
		SCOPES: stringWithDefault(env.OPENID_SCOPES),
		NAME_CLAIM: stringWithDefault(env.OPENID_NAME_CLAIM).refine(
			(el) => !["preferred_username", "email", "picture", "sub"].includes(el),
			{ message: "nameClaim cannot be one of the restricted keys." }
		),
		TOLERANCE: stringWithDefault(env.OPENID_TOLERANCE),
		RESOURCE: stringWithDefault(env.OPENID_RESOURCE),
	})
	.parse(JSON5.parse(env.OPENID_CONFIG));

export const requiresUser = !!OIDConfig.CLIENT_ID && !!OIDConfig.CLIENT_SECRET;

export function refreshSessionCookie(cookies: Cookies, sessionId: string) {
	cookies.set(env.COOKIE_NAME, sessionId, {
		path: "/",
		// So that it works inside the space's iframe
		sameSite: dev || env.ALLOW_INSECURE_COOKIES === "true" ? "lax" : "none",
		secure: !dev && !(env.ALLOW_INSECURE_COOKIES === "true"),
		httpOnly: true,
		expires: addWeeks(new Date(), 2),
	});
}

export async function findUser(sessionId: string) {
	const session = await collections.sessions.findOne({ sessionId });

	if (!session) {
		return null;
	}

	return await collections.users.findOne({ _id: session.userId });
}
export const authCondition = (locals: App.Locals) => {
	return locals.user
		? { userId: locals.user._id }
		: { sessionId: locals.sessionId, userId: { $exists: false } };
};

/**
 * Generates a CSRF token using the user sessionId. Note that we don't need a secret because sessionId is enough.
 */
export async function generateCsrfToken(sessionId: string, redirectUrl: string): Promise<string> {
	const data = {
		expiration: addHours(new Date(), 1).getTime(),
		redirectUrl,
	};

	return Buffer.from(
		JSON.stringify({
			data,
			signature: await sha256(JSON.stringify(data) + "##" + sessionId),
		})
	).toString("base64");
}

async function getOIDCClient(settings: OIDCSettings): Promise<BaseClient> {
	const issuer = await Issuer.discover(OIDConfig.PROVIDER_URL);

	return new issuer.Client({
		client_id: OIDConfig.CLIENT_ID,
		client_secret: OIDConfig.CLIENT_SECRET,
		redirect_uris: [settings.redirectURI],
		response_types: ["code"],
		[custom.clock_tolerance]: OIDConfig.TOLERANCE || undefined,
	});
}

export async function getOIDCAuthorizationUrl(
	settings: OIDCSettings,
	params: { sessionId: string }
): Promise<string> {
	const client = await getOIDCClient(settings);
	const csrfToken = await generateCsrfToken(params.sessionId, settings.redirectURI);

	return client.authorizationUrl({
		scope: OIDConfig.SCOPES,
		state: csrfToken,
		resource: OIDConfig.RESOURCE || undefined,
	});
}

export async function getOIDCUserData(
	settings: OIDCSettings,
	code: string,
	iss?: string
): Promise<OIDCUserInfo> {
	const client = await getOIDCClient(settings);
	const token = await client.callback(settings.redirectURI, { code, iss });
	const userData = await client.userinfo(token);

	return { token, userData };
}

export async function validateAndParseCsrfToken(
	token: string,
	sessionId: string
): Promise<{
	/** This is the redirect url that was passed to the OIDC provider */
	redirectUrl: string;
} | null> {
	try {
		const { data, signature } = z
			.object({
				data: z.object({
					expiration: z.number().int(),
					redirectUrl: z.string().url(),
				}),
				signature: z.string().length(64),
			})
			.parse(JSON.parse(token));
		const reconstructSign = await sha256(JSON.stringify(data) + "##" + sessionId);

		if (data.expiration > Date.now() && signature === reconstructSign) {
			return { redirectUrl: data.redirectUrl };
		}
	} catch (e) {
		logger.error(e);
	}
	return null;
}

</src/lib/server/auth.ts>

<src/lib/utils/mergeAsyncGenerators.ts>
type Gen<T, TReturn> = AsyncGenerator<T, TReturn, undefined>;

type GenPromiseMap<T, TReturn> = Map<
	Gen<T, TReturn>,
	Promise<{ gen: Gen<T, TReturn> } & IteratorResult<T, TReturn>>
>;

/** Merges multiple async generators into a single async generator that yields values from all of them in parallel. */
export async function* mergeAsyncGenerators<T, TReturn>(
	generators: Gen<T, TReturn>[]
): Gen<T, TReturn[]> {
	const promises: GenPromiseMap<T, TReturn> = new Map();
	const results: Map<Gen<T, TReturn>, TReturn> = new Map();

	for (const gen of generators) {
		promises.set(
			gen,
			gen.next().then((result) => ({ gen, ...result }))
		);
	}

	while (promises.size) {
		const { gen, value, done } = await Promise.race(promises.values());
		if (done) {
			results.set(gen, value as TReturn);
			promises.delete(gen);
		} else {
			promises.set(
				gen,
				gen.next().then((result) => ({ gen, ...result }))
			);
			yield value as T;
		}
	}

	const orderedResults = generators.map((gen) => results.get(gen) as TReturn);
	return orderedResults;
}

</src/lib/utils/mergeAsyncGenerators.ts>

<src/lib/utils/parseStringToList.ts>
export function parseStringToList(links: unknown): string[] {
	if (typeof links !== "string") {
		throw new Error("Expected a string");
	}

	return links
		.split(",")
		.map((link) => link.trim())
		.filter((link) => link.length > 0);
}

</src/lib/utils/parseStringToList.ts>

<src/lib/utils/tree/addChildren.ts>
import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";
import { v4 } from "uuid";

export function addChildren(
	conv: Pick<Conversation, "messages" | "rootMessageId">,
	message: Omit<Message, "id">,
	parentId?: Message["id"]
): Message["id"] {
	// if this is the first message we just push it
	if (conv.messages.length === 0) {
		const messageId = v4();
		conv.rootMessageId = messageId;
		conv.messages.push({
			...message,
			ancestors: [],
			id: messageId,
		});
		return messageId;
	}

	if (!parentId) {
		throw new Error("You need to specify a parentId if this is not the first message");
	}

	const messageId = v4();
	if (!conv.rootMessageId) {
		// if there is no parentId we just push the message
		if (!!parentId && parentId !== conv.messages[conv.messages.length - 1].id) {
			throw new Error("This is a legacy conversation, you can only append to the last message");
		}
		conv.messages.push({ ...message, id: messageId });
		return messageId;
	}

	const ancestors = [...(conv.messages.find((m) => m.id === parentId)?.ancestors ?? []), parentId];
	conv.messages.push({
		...message,
		ancestors,
		id: messageId,
		children: [],
	});

	const parent = conv.messages.find((m) => m.id === parentId);

	if (parent) {
		if (parent.children) {
			parent.children.push(messageId);
		} else parent.children = [messageId];
	}

	return messageId;
}

</src/lib/utils/tree/addChildren.ts>

<src/lib/utils/tree/treeHelpers.spec.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { describe, expect, it } from "vitest";

// function used to insert conversations used for testing

export const insertLegacyConversation = async () => {
	const res = await collections.conversations.insertOne({
		_id: new ObjectId(),
		createdAt: new Date(),
		updatedAt: new Date(),
		title: "legacy conversation",
		model: "",
		embeddingModel: "",
		messages: [
			{
				id: "1-1-1-1-1",
				from: "user",
				content: "Hello, world! I am a user",
			},
			{
				id: "1-1-1-1-2",
				from: "assistant",
				content: "Hello, world! I am an assistant.",
			},
			{
				id: "1-1-1-1-3",
				from: "user",
				content: "Hello, world! I am a user.",
			},
			{
				id: "1-1-1-1-4",
				from: "assistant",
				content: "Hello, world! I am an assistant.",
			},
		],
	});
	return res.insertedId;
};

export const insertLinearBranchConversation = async () => {
	const res = await collections.conversations.insertOne({
		_id: new ObjectId(),
		createdAt: new Date(),
		updatedAt: new Date(),
		title: "linear branch conversation",
		model: "",
		embeddingModel: "",

		rootMessageId: "1-1-1-1-1",
		messages: [
			{
				id: "1-1-1-1-1",
				from: "user",
				content: "Hello, world! I am a user",
				ancestors: [],
				children: ["1-1-1-1-2"],
			},
			{
				id: "1-1-1-1-2",
				from: "assistant",
				content: "Hello, world! I am an assistant.",
				ancestors: ["1-1-1-1-1"],
				children: ["1-1-1-1-3"],
			},
			{
				id: "1-1-1-1-3",
				from: "user",
				content: "Hello, world! I am a user.",
				ancestors: ["1-1-1-1-1", "1-1-1-1-2"],
				children: ["1-1-1-1-4"],
			},
			{
				id: "1-1-1-1-4",
				from: "assistant",
				content: "Hello, world! I am an assistant.",
				ancestors: ["1-1-1-1-1", "1-1-1-1-2", "1-1-1-1-3"],
				children: [],
			},
		],
	});
	return res.insertedId;
};

export const insertSideBranchesConversation = async () => {
	const res = await collections.conversations.insertOne({
		_id: new ObjectId(),
		createdAt: new Date(),
		updatedAt: new Date(),
		title: "side branches conversation",
		model: "",
		embeddingModel: "",
		rootMessageId: "1-1-1-1-1",
		messages: [
			{
				id: "1-1-1-1-1",
				from: "user",
				content: "Hello, world, root message!",
				ancestors: [],
				children: ["1-1-1-1-2", "1-1-1-1-5"],
			},
			{
				id: "1-1-1-1-2",
				from: "assistant",
				content: "Hello, response to root message!",
				ancestors: ["1-1-1-1-1"],
				children: ["1-1-1-1-3"],
			},
			{
				id: "1-1-1-1-3",
				from: "user",
				content: "Hello, follow up question!",
				ancestors: ["1-1-1-1-1", "1-1-1-1-2"],
				children: ["1-1-1-1-4"],
			},
			{
				id: "1-1-1-1-4",
				from: "assistant",
				content: "Hello, response from follow up question!",
				ancestors: ["1-1-1-1-1", "1-1-1-1-2", "1-1-1-1-3"],
				children: [],
			},
			{
				id: "1-1-1-1-5",
				from: "assistant",
				content: "Hello, alternative assistant answer!",
				ancestors: ["1-1-1-1-1"],
				children: ["1-1-1-1-6", "1-1-1-1-7"],
			},
			{
				id: "1-1-1-1-6",
				from: "user",
				content: "Hello, follow up question to alternative answer!",
				ancestors: ["1-1-1-1-1", "1-1-1-1-5"],
				children: [],
			},
			{
				id: "1-1-1-1-7",
				from: "user",
				content: "Hello, alternative follow up question to alternative answer!",
				ancestors: ["1-1-1-1-1", "1-1-1-1-5"],
				children: [],
			},
		],
	});
	return res.insertedId;
};

describe("inserting conversations", () => {
	it("should insert a legacy conversation", async () => {
		const id = await insertLegacyConversation();
		expect(id).toBeDefined();
	});

	it("should insert a linear branch conversation", async () => {
		const id = await insertLinearBranchConversation();
		expect(id).toBeDefined();
	});

	it("should insert a side branches conversation", async () => {
		const id = await insertSideBranchesConversation();
		expect(id).toBeDefined();
	});
});

</src/lib/utils/tree/treeHelpers.spec.ts>

<src/lib/utils/tree/addSibling.ts>
import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";
import { v4 } from "uuid";

export function addSibling(
	conv: Pick<Conversation, "messages" | "rootMessageId">,
	message: Omit<Message, "id">,
	siblingId: Message["id"]
): Message["id"] {
	if (conv.messages.length === 0) {
		throw new Error("Cannot add a sibling to an empty conversation");
	}
	if (!conv.rootMessageId) {
		throw new Error("Cannot add a sibling to a legacy conversation");
	}

	const sibling = conv.messages.find((m) => m.id === siblingId);

	if (!sibling) {
		throw new Error("The sibling message doesn't exist");
	}

	if (!sibling.ancestors || sibling.ancestors?.length === 0) {
		throw new Error("The sibling message is the root message, therefore we can't add a sibling");
	}

	const messageId = v4();

	conv.messages.push({
		...message,
		id: messageId,
		ancestors: sibling.ancestors,
		children: [],
	});

	const nearestAncestorId = sibling.ancestors[sibling.ancestors.length - 1];
	const nearestAncestor = conv.messages.find((m) => m.id === nearestAncestorId);

	if (nearestAncestor) {
		if (nearestAncestor.children) {
			nearestAncestor.children.push(messageId);
		} else nearestAncestor.children = [messageId];
	}

	return messageId;
}

</src/lib/utils/tree/addSibling.ts>

<src/lib/utils/tree/isMessageId.spec.ts>
import { describe, expect, it } from "vitest";
import { isMessageId } from "./isMessageId";
import { v4 } from "uuid";

describe("isMessageId", () => {
	it("should return true for a valid message id", () => {
		expect(isMessageId(v4())).toBe(true);
	});
	it("should return false for an invalid message id", () => {
		expect(isMessageId("1-2-3-4")).toBe(false);
	});
	it("should return false for an empty string", () => {
		expect(isMessageId("")).toBe(false);
	});
});

</src/lib/utils/tree/isMessageId.spec.ts>

<src/lib/utils/tree/isMessageId.ts>
import type { Message } from "$lib/types/Message";

export function isMessageId(id: string): id is Message["id"] {
	return id.split("-").length === 5;
}

</src/lib/utils/tree/isMessageId.ts>

<src/lib/utils/tree/addChildren.spec.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { describe, expect, it } from "vitest";

import { insertLegacyConversation, insertSideBranchesConversation } from "./treeHelpers.spec";
import { addChildren } from "./addChildren";
import type { Message } from "$lib/types/Message";

const newMessage: Omit<Message, "id"> = {
	content: "new message",
	from: "user",
};

Object.freeze(newMessage);

describe("addChildren", async () => {
	it("should let you append on legacy conversations", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const convLength = conv.messages.length;

		addChildren(conv, newMessage, conv.messages[conv.messages.length - 1].id);
		expect(conv.messages.length).toEqual(convLength + 1);
	});
	it("should not let you create branches on legacy conversations", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		expect(() => addChildren(conv, newMessage, conv.messages[0].id)).toThrow();
	});
	it("should not let you create a message that already exists", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const messageThatAlreadyExists: Message = {
			id: conv.messages[0].id,
			content: "new message",
			from: "user",
		};

		expect(() => addChildren(conv, messageThatAlreadyExists, conv.messages[0].id)).toThrow();
	});
	it("should let you create branches on conversations with subtrees", async () => {
		const convId = await insertSideBranchesConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const nChildren = conv.messages[0].children?.length;
		if (!nChildren) throw new Error("No children found");
		addChildren(conv, newMessage, conv.messages[0].id);
		expect(conv.messages[0].children?.length).toEqual(nChildren + 1);
	});

	it("should let you create a new leaf", async () => {
		const convId = await insertSideBranchesConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const parentId = conv.messages[conv.messages.length - 1].id;
		const nChildren = conv.messages[conv.messages.length - 1].children?.length;

		if (nChildren === undefined) throw new Error("No children found");
		expect(nChildren).toEqual(0);

		addChildren(conv, newMessage, parentId);
		expect(conv.messages[conv.messages.length - 2].children?.length).toEqual(nChildren + 1);
	});

	it("should let you append to an empty conversation without specifying a parentId", async () => {
		const conv = {
			_id: new ObjectId(),
			rootMessageId: undefined,
			messages: [] as Message[],
		};

		addChildren(conv, newMessage);
		expect(conv.messages.length).toEqual(1);
		expect(conv.rootMessageId).toEqual(conv.messages[0].id);
	});

	it("should throw if you don't specify a parentId in a conversation with messages", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		expect(() => addChildren(conv, newMessage)).toThrow();
	});

	it("should return the id of the new message", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		expect(addChildren(conv, newMessage, conv.messages[conv.messages.length - 1].id)).toEqual(
			conv.messages[conv.messages.length - 1].id
		);
	});
});

</src/lib/utils/tree/addChildren.spec.ts>

<src/lib/utils/tree/addSibling.spec.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { describe, expect, it } from "vitest";

import { insertLegacyConversation, insertSideBranchesConversation } from "./treeHelpers.spec";
import type { Message } from "$lib/types/Message";
import { addSibling } from "./addSibling";

const newMessage: Omit<Message, "id"> = {
	content: "new message",
	from: "user",
};

Object.freeze(newMessage);

describe("addSibling", async () => {
	it("should fail on empty conversations", () => {
		const conv = {
			_id: new ObjectId(),
			rootMessageId: undefined,
			messages: [],
		};

		expect(() => addSibling(conv, newMessage, "not-a-real-id-test")).toThrow(
			"Cannot add a sibling to an empty conversation"
		);
	});

	it("should fail on legacy conversations", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		expect(() => addSibling(conv, newMessage, conv.messages[0].id)).toThrow(
			"Cannot add a sibling to a legacy conversation"
		);
	});

	it("should fail if the sibling message doesn't exist", async () => {
		const convId = await insertSideBranchesConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		expect(() => addSibling(conv, newMessage, "not-a-real-id-test")).toThrow(
			"The sibling message doesn't exist"
		);
	});

	// TODO: This behaviour should be fixed, we do not need to fail on the root message.
	it("should fail if the sibling message is the root message", async () => {
		const convId = await insertSideBranchesConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");
		if (!conv.rootMessageId) throw new Error("Root message not found");

		expect(() => addSibling(conv, newMessage, conv.rootMessageId as Message["id"])).toThrow(
			"The sibling message is the root message, therefore we can't add a sibling"
		);
	});

	it("should add a sibling to a message", async () => {
		const convId = await insertSideBranchesConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		// add sibling and check children count for parnets

		const nChildren = conv.messages[1].children?.length;
		const siblingId = addSibling(conv, newMessage, conv.messages[2].id);
		const nChildrenNew = conv.messages[1].children?.length;

		if (!nChildren) throw new Error("No children found");

		expect(nChildrenNew).toBe(nChildren + 1);

		// make sure siblings have the same ancestors
		const sibling = conv.messages.find((m) => m.id === siblingId);
		expect(sibling?.ancestors).toEqual(conv.messages[2].ancestors);
	});
});

</src/lib/utils/tree/addSibling.spec.ts>

<src/lib/utils/tree/convertLegacyConversation.ts>
import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";
import { v4 } from "uuid";

export function convertLegacyConversation(
	conv: Pick<Conversation, "messages" | "rootMessageId" | "preprompt">
): Pick<Conversation, "messages" | "rootMessageId" | "preprompt"> {
	if (conv.rootMessageId) return conv; // not a legacy conversation
	if (conv.messages.length === 0) return conv; // empty conversation
	const messages = [
		{
			from: "system",
			content: conv.preprompt ?? "",
			createdAt: new Date(),
			updatedAt: new Date(),
			id: v4(),
		} satisfies Message,
		...conv.messages,
	];

	const rootMessageId = messages[0].id;

	const newMessages = messages.map((message, index) => {
		return {
			...message,
			ancestors: messages.slice(0, index).map((m) => m.id),
			children: index < messages.length - 1 ? [messages[index + 1].id] : [],
		};
	});

	return {
		...conv,
		rootMessageId,
		messages: newMessages,
	};
}

</src/lib/utils/tree/convertLegacyConversation.ts>

<src/lib/utils/tree/convertLegacyConversation.spec.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { describe, expect, it } from "vitest";

import { convertLegacyConversation } from "./convertLegacyConversation";
import { insertLegacyConversation } from "./treeHelpers.spec";

describe("convertLegacyConversation", () => {
	it("should convert a legacy conversation", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const newConv = convertLegacyConversation(conv);

		expect(newConv.rootMessageId).toBe(newConv.messages[0].id);
		expect(newConv.messages[0].ancestors).toEqual([]);
		expect(newConv.messages[1].ancestors).toEqual([newConv.messages[0].id]);
		expect(newConv.messages[0].children).toEqual([newConv.messages[1].id]);
	});
	it("should work on empty conversations", async () => {
		const conv = {
			_id: new ObjectId(),
			rootMessageId: undefined,
			messages: [],
		};
		const newConv = convertLegacyConversation(conv);
		expect(newConv.rootMessageId).toBe(undefined);
		expect(newConv.messages).toEqual([]);
	});
});

</src/lib/utils/tree/convertLegacyConversation.spec.ts>

<src/lib/utils/tree/buildSubtree.spec.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { describe, expect, it } from "vitest";

import {
	insertLegacyConversation,
	insertLinearBranchConversation,
	insertSideBranchesConversation,
} from "./treeHelpers.spec";
import { buildSubtree } from "./buildSubtree";

describe("buildSubtree", () => {
	it("a subtree in a legacy conversation should be just a slice", async () => {
		const convId = await insertLegacyConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		// check middle
		const id = conv.messages[2].id;
		const subtree = buildSubtree(conv, id);
		expect(subtree).toEqual(conv.messages.slice(0, 3));

		// check zero
		const id2 = conv.messages[0].id;
		const subtree2 = buildSubtree(conv, id2);
		expect(subtree2).toEqual(conv.messages.slice(0, 1));

		//check full length
		const id3 = conv.messages[conv.messages.length - 1].id;
		const subtree3 = buildSubtree(conv, id3);
		expect(subtree3).toEqual(conv.messages);
	});

	it("a subtree in a linear branch conversation should be the ancestors and the message", async () => {
		const convId = await insertLinearBranchConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		// check middle
		const id = conv.messages[1].id;
		const subtree = buildSubtree(conv, id);
		expect(subtree).toEqual([conv.messages[0], conv.messages[1]]);

		// check zero
		const id2 = conv.messages[0].id;
		const subtree2 = buildSubtree(conv, id2);
		expect(subtree2).toEqual([conv.messages[0]]);

		//check full length
		const id3 = conv.messages[conv.messages.length - 1].id;
		const subtree3 = buildSubtree(conv, id3);
		expect(subtree3).toEqual(conv.messages);
	});

	it("should throw an error if the message is not found", async () => {
		const convId = await insertLinearBranchConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const id = "not-a-real-id-test";

		expect(() => buildSubtree(conv, id)).toThrow("Message not found");
	});

	it("should throw an error if the ancestor is not found", async () => {
		const convId = await insertLinearBranchConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const id = "1-1-1-1-2";

		conv.messages[1].ancestors = ["not-a-real-id-test"];

		expect(() => buildSubtree(conv, id)).toThrow("Ancestor not found");
	});

	it("should work on empty conversations", () => {
		const conv = {
			_id: new ObjectId(),
			rootMessageId: undefined,
			messages: [],
		};

		const subtree = buildSubtree(conv, "not-a-real-id-test");
		expect(subtree).toEqual([]);
	});

	it("should work for conversation with subtrees", async () => {
		const convId = await insertSideBranchesConversation();
		const conv = await collections.conversations.findOne({ _id: new ObjectId(convId) });
		if (!conv) throw new Error("Conversation not found");

		const subtree = buildSubtree(conv, "1-1-1-1-2");
		expect(subtree).toEqual([conv.messages[0], conv.messages[1]]);

		const subtree2 = buildSubtree(conv, "1-1-1-1-4");
		expect(subtree2).toEqual([
			conv.messages[0],
			conv.messages[1],
			conv.messages[2],
			conv.messages[3],
		]);

		const subtree3 = buildSubtree(conv, "1-1-1-1-6");
		expect(subtree3).toEqual([conv.messages[0], conv.messages[4], conv.messages[5]]);

		const subtree4 = buildSubtree(conv, "1-1-1-1-7");
		expect(subtree4).toEqual([conv.messages[0], conv.messages[4], conv.messages[6]]);
	});
});

</src/lib/utils/tree/buildSubtree.spec.ts>

<src/lib/utils/tree/buildSubtree.ts>
import type { Conversation } from "$lib/types/Conversation";
import type { Message } from "$lib/types/Message";

export function buildSubtree(
	conv: Pick<Conversation, "messages" | "rootMessageId">,
	id: Message["id"]
): Message[] {
	if (!conv.rootMessageId) {
		if (conv.messages.length === 0) return [];
		// legacy conversation slice up to id
		const index = conv.messages.findIndex((m) => m.id === id);
		if (index === -1) throw new Error("Message not found");
		return conv.messages.slice(0, index + 1);
	} else {
		// find the message with the right id then create the ancestor tree
		const message = conv.messages.find((m) => m.id === id);
		if (!message) throw new Error("Message not found");

		return [
			...(message.ancestors?.map((ancestorId) => {
				const ancestor = conv.messages.find((m) => m.id === ancestorId);
				if (!ancestor) throw new Error("Ancestor not found");
				return ancestor;
			}) ?? []),
			message,
		];
	}
}

</src/lib/utils/tree/buildSubtree.ts>

<src/lib/utils/file2base64.ts>
const file2base64 = (file: File): Promise<string> => {
	return new Promise<string>((resolve, reject) => {
		const reader = new FileReader();
		reader.readAsDataURL(file);
		reader.onload = () => {
			const dataUrl = reader.result as string;
			const base64 = dataUrl.split(",")[1];
			resolve(base64);
		};
		reader.onerror = (error) => reject(error);
	});
};

export default file2base64;

</src/lib/utils/file2base64.ts>

<src/lib/utils/isHuggingChat.ts>
import { env as envPublic } from "$env/dynamic/public";

export const isHuggingChat = envPublic.PUBLIC_APP_ASSETS === "huggingchat";

</src/lib/utils/isHuggingChat.ts>

<src/lib/utils/getShareUrl.ts>
import { base } from "$app/paths";
import { env as envPublic } from "$env/dynamic/public";

export function getShareUrl(url: URL, shareId: string): string {
	return `${
		envPublic.PUBLIC_SHARE_PREFIX || `${envPublic.PUBLIC_ORIGIN || url.origin}${base}`
	}/r/${shareId}`;
}

</src/lib/utils/getShareUrl.ts>

<src/lib/utils/debounce.ts>
/**
 * A debounce function that works in both browser and Nodejs.
 * For pure Nodejs work, prefer the `Debouncer` class.
 */
export function debounce<T extends unknown[]>(
	callback: (...rest: T) => unknown,
	limit: number
): (...rest: T) => void {
	let timer: ReturnType<typeof setTimeout>;

	return function (...rest) {
		clearTimeout(timer);
		timer = setTimeout(() => {
			callback(...rest);
		}, limit);
	};
}

</src/lib/utils/debounce.ts>

<src/lib/utils/formatUserCount.ts>
export function formatUserCount(userCount: number): string {
	const userCountRanges: { min: number; max: number; label: string }[] = [
		{ min: 0, max: 1, label: "1" },
		{ min: 2, max: 9, label: "1-10" },
		{ min: 10, max: 49, label: "10+" },
		{ min: 50, max: 99, label: "50+" },
		{ min: 100, max: 299, label: "100+" },
		{ min: 300, max: 499, label: "300+" },
		{ min: 500, max: 999, label: "500+" },
		{ min: 1_000, max: 2_999, label: "1k+" },
		{ min: 3_000, max: 4_999, label: "3k+" },
		{ min: 5_000, max: 9_999, label: "5k+" },
		{ min: 10_000, max: 19_999, label: "10k+" },
		{ min: 20_000, max: 29_999, label: "20k+" },
		{ min: 30_000, max: 39_999, label: "30k+" },
		{ min: 40_000, max: 49_999, label: "40k+" },
		{ min: 50_000, max: 59_999, label: "50k+" },
		{ min: 60_000, max: 69_999, label: "60k+" },
		{ min: 70_000, max: 79_999, label: "70k+" },
		{ min: 80_000, max: 89_999, label: "80k+" },
		{ min: 90_000, max: 99_999, label: "90k+" },
		{ min: 100_000, max: 109_999, label: "100k+" },
		{ min: 110_000, max: 119_999, label: "110k+" },
		{ min: 120_000, max: 129_999, label: "120k+" },
		{ min: 130_000, max: 139_999, label: "130k+" },
		{ min: 140_000, max: 149_999, label: "140k+" },
		{ min: 150_000, max: 199_999, label: "150k+" },
		{ min: 200_000, max: 299_999, label: "200k+" },
		{ min: 300_000, max: 499_999, label: "300k+" },
		{ min: 500_000, max: 749_999, label: "500k+" },
		{ min: 750_000, max: 999_999, label: "750k+" },
		{ min: 1_000_000, max: Infinity, label: "1M+" },
	];

	const range = userCountRanges.find(({ min, max }) => userCount >= min && userCount <= max);
	return range?.label ?? "";
}

</src/lib/utils/formatUserCount.ts>

<src/lib/utils/sum.ts>
export function sum(nums: number[]): number {
	return nums.reduce((a, b) => a + b, 0);
}

</src/lib/utils/sum.ts>

<src/lib/utils/messageUpdates.ts>
import type { MessageFile } from "$lib/types/Message";
import {
	type MessageUpdate,
	type MessageStreamUpdate,
	type MessageToolCallUpdate,
	MessageToolUpdateType,
	MessageUpdateType,
	type MessageToolUpdate,
	type MessageWebSearchUpdate,
	type MessageWebSearchGeneralUpdate,
	type MessageWebSearchSourcesUpdate,
	type MessageWebSearchErrorUpdate,
	MessageWebSearchUpdateType,
	type MessageToolErrorUpdate,
	type MessageToolResultUpdate,
} from "$lib/types/MessageUpdate";
import { env as envPublic } from "$env/dynamic/public";

export const isMessageWebSearchUpdate = (update: MessageUpdate): update is MessageWebSearchUpdate =>
	update.type === MessageUpdateType.WebSearch;
export const isMessageWebSearchGeneralUpdate = (
	update: MessageUpdate
): update is MessageWebSearchGeneralUpdate =>
	isMessageWebSearchUpdate(update) && update.subtype === MessageWebSearchUpdateType.Update;
export const isMessageWebSearchSourcesUpdate = (
	update: MessageUpdate
): update is MessageWebSearchSourcesUpdate =>
	isMessageWebSearchUpdate(update) && update.subtype === MessageWebSearchUpdateType.Sources;
export const isMessageWebSearchErrorUpdate = (
	update: MessageUpdate
): update is MessageWebSearchErrorUpdate =>
	isMessageWebSearchUpdate(update) && update.subtype === MessageWebSearchUpdateType.Error;

export const isMessageToolUpdate = (update: MessageUpdate): update is MessageToolUpdate =>
	update.type === MessageUpdateType.Tool;
export const isMessageToolCallUpdate = (update: MessageUpdate): update is MessageToolCallUpdate =>
	isMessageToolUpdate(update) && update.subtype === MessageToolUpdateType.Call;
export const isMessageToolResultUpdate = (
	update: MessageUpdate
): update is MessageToolResultUpdate =>
	isMessageToolUpdate(update) && update.subtype === MessageToolUpdateType.Result;
export const isMessageToolErrorUpdate = (update: MessageUpdate): update is MessageToolErrorUpdate =>
	isMessageToolUpdate(update) && update.subtype === MessageToolUpdateType.Error;

type MessageUpdateRequestOptions = {
	base: string;
	inputs?: string;
	messageId?: string;
	isRetry: boolean;
	isContinue: boolean;
	webSearch: boolean;
	tools?: Array<string>;
	files?: MessageFile[];
};
export async function fetchMessageUpdates(
	conversationId: string,
	opts: MessageUpdateRequestOptions,
	abortSignal: AbortSignal
): Promise<AsyncGenerator<MessageUpdate>> {
	const abortController = new AbortController();
	abortSignal.addEventListener("abort", () => abortController.abort());

	const form = new FormData();

	const optsJSON = JSON.stringify({
		inputs: opts.inputs,
		id: opts.messageId,
		is_retry: opts.isRetry,
		is_continue: opts.isContinue,
		web_search: opts.webSearch,
		tools: opts.tools,
	});

	opts.files?.forEach((file) => {
		const name = file.type + ";" + file.name;

		form.append("files", new File([file.value], name, { type: file.mime }));
	});

	form.append("data", optsJSON);

	const response = await fetch(`${opts.base}/conversation/${conversationId}`, {
		method: "POST",
		body: form,
		signal: abortController.signal,
	});

	if (!response.ok) {
		const errorMessage = await response
			.json()
			.then((obj) => obj.message)
			.catch(() => `Request failed with status code ${response.status}: ${response.statusText}`);
		throw Error(errorMessage);
	}
	if (!response.body) {
		throw Error("Body not defined");
	}

	if (!(envPublic.PUBLIC_SMOOTH_UPDATES === "true")) {
		return endpointStreamToIterator(response, abortController);
	}

	return smoothAsyncIterator(
		streamMessageUpdatesToFullWords(endpointStreamToIterator(response, abortController))
	);
}

async function* endpointStreamToIterator(
	response: Response,
	abortController: AbortController
): AsyncGenerator<MessageUpdate> {
	const reader = response.body?.pipeThrough(new TextDecoderStream()).getReader();
	if (!reader) throw Error("Response for endpoint had no body");

	// Handle any cases where we must abort
	reader.closed.then(() => abortController.abort());

	// Handle logic for aborting
	abortController.signal.addEventListener("abort", () => reader.cancel());

	// ex) If the last response is => {"type": "stream", "token":
	// It should be => {"type": "stream", "token": "Hello"} = prev_input_chunk + "Hello"}
	let prevChunk = "";
	while (!abortController.signal.aborted) {
		const { done, value } = await reader.read();
		if (done) {
			abortController.abort();
			break;
		}
		if (!value) continue;

		const { messageUpdates, remainingText } = parseMessageUpdates(prevChunk + value);
		prevChunk = remainingText;
		for (const messageUpdate of messageUpdates) yield messageUpdate;
	}
}

function parseMessageUpdates(value: string): {
	messageUpdates: MessageUpdate[];
	remainingText: string;
} {
	const inputs = value.split("\n");
	const messageUpdates: MessageUpdate[] = [];
	for (const input of inputs) {
		try {
			messageUpdates.push(JSON.parse(input) as MessageUpdate);
		} catch (error) {
			// in case of parsing error, we return what we were able to parse
			if (error instanceof SyntaxError) {
				return {
					messageUpdates,
					remainingText: inputs.at(-1) ?? "",
				};
			}
		}
	}
	return { messageUpdates, remainingText: "" };
}

/**
 * Emits all the message updates immediately that aren't "stream" type
 * Emits a concatenated "stream" type message update once it detects a full word
 * Example: "what" " don" "'t" => "what" " don't"
 * Only supports latin languages, ignores others
 */
async function* streamMessageUpdatesToFullWords(
	iterator: AsyncGenerator<MessageUpdate>
): AsyncGenerator<MessageUpdate> {
	let bufferedStreamUpdates: MessageStreamUpdate[] = [];

	const endAlphanumeric = /[a-zA-Z0-9À-ž'`]+$/;
	const beginnningAlphanumeric = /^[a-zA-Z0-9À-ž'`]+/;

	for await (const messageUpdate of iterator) {
		if (messageUpdate.type !== "stream") {
			yield messageUpdate;
			continue;
		}
		bufferedStreamUpdates.push(messageUpdate);

		let lastIndexEmitted = 0;
		for (let i = 1; i < bufferedStreamUpdates.length; i++) {
			const prevEndsAlphanumeric = endAlphanumeric.test(bufferedStreamUpdates[i - 1].token);
			const currBeginsAlphanumeric = beginnningAlphanumeric.test(bufferedStreamUpdates[i].token);
			const shouldCombine = prevEndsAlphanumeric && currBeginsAlphanumeric;
			const combinedTooMany = i - lastIndexEmitted >= 5;
			if (shouldCombine && !combinedTooMany) continue;

			// Combine tokens together and emit
			yield {
				type: MessageUpdateType.Stream,
				token: bufferedStreamUpdates
					.slice(lastIndexEmitted, i)
					.map((_) => _.token)
					.join(""),
			};
			lastIndexEmitted = i;
		}
		bufferedStreamUpdates = bufferedStreamUpdates.slice(lastIndexEmitted);
	}
	for (const messageUpdate of bufferedStreamUpdates) yield messageUpdate;
}

/**
 * Attempts to smooth out the time between values emitted by an async iterator
 * by waiting for the average time between values to emit the next value
 */
async function* smoothAsyncIterator<T>(iterator: AsyncGenerator<T>): AsyncGenerator<T> {
	const eventTarget = new EventTarget();
	let done = false;
	const valuesBuffer: T[] = [];
	const valueTimesMS: number[] = [];

	const next = async () => {
		const obj = await iterator.next();
		if (obj.done) {
			done = true;
		} else {
			valuesBuffer.push(obj.value);
			valueTimesMS.push(performance.now());
			next();
		}
		eventTarget.dispatchEvent(new Event("next"));
	};
	next();

	let timeOfLastEmitMS = performance.now();
	while (!done || valuesBuffer.length > 0) {
		// Only consider the last X times between tokens
		const sampledTimesMS = valueTimesMS.slice(-30);

		// Get the total time spent in abnormal periods
		const anomalyThresholdMS = 2000;
		const anomalyDurationMS = sampledTimesMS
			.map((time, i, times) => time - times[i - 1])
			.slice(1)
			.filter((time) => time > anomalyThresholdMS)
			.reduce((a, b) => a + b, 0);

		// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
		const totalTimeMSBetweenValues = sampledTimesMS.at(-1)! - sampledTimesMS[0];
		const timeMSBetweenValues = totalTimeMSBetweenValues - anomalyDurationMS;

		const averageTimeMSBetweenValues = Math.min(
			200,
			timeMSBetweenValues / (sampledTimesMS.length - 1)
		);
		const timeSinceLastEmitMS = performance.now() - timeOfLastEmitMS;

		// Emit after waiting duration or cancel if "next" event is emitted
		const gotNext = await Promise.race([
			sleep(Math.max(5, averageTimeMSBetweenValues - timeSinceLastEmitMS)),
			waitForEvent(eventTarget, "next"),
		]);

		// Go to next iteration so we can re-calculate when to emit
		if (gotNext) continue;

		// Nothing in buffer to emit
		if (valuesBuffer.length === 0) continue;

		// Emit
		timeOfLastEmitMS = performance.now();
		// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
		yield valuesBuffer.shift()!;
	}
}

const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));
const waitForEvent = (eventTarget: EventTarget, eventName: string) =>
	new Promise<boolean>((resolve) =>
		eventTarget.addEventListener(eventName, () => resolve(true), { once: true })
	);

</src/lib/utils/messageUpdates.ts>

<src/lib/utils/template.ts>
import type { Message } from "$lib/types/Message";
import Handlebars from "handlebars";

Handlebars.registerHelper("ifUser", function (this: Pick<Message, "from" | "content">, options) {
	if (this.from == "user") return options.fn(this);
});

Handlebars.registerHelper(
	"ifAssistant",
	function (this: Pick<Message, "from" | "content">, options) {
		if (this.from == "assistant") return options.fn(this);
	}
);

export function compileTemplate<T>(input: string, model: { preprompt: string }) {
	const template = Handlebars.compile<T>(input, {
		knownHelpers: { ifUser: true, ifAssistant: true },
		knownHelpersOnly: true,
		noEscape: true,
		strict: true,
		preventIndent: true,
	});

	return function render(inputs: T, options?: RuntimeOptions) {
		return template({ ...model, ...inputs }, options);
	};
}

</src/lib/utils/template.ts>

<src/lib/utils/share.ts>
import { browser } from "$app/environment";

export async function share(url: string, title: string, appendLeafId: boolean = false) {
	if (!browser) return;

	// Retrieve the leafId from localStorage
	const leafId = localStorage.getItem("leafId");

	if (appendLeafId && leafId) {
		// Use URL and URLSearchParams to add the leafId parameter
		const shareUrl = new URL(url);
		shareUrl.searchParams.append("leafId", leafId);
		url = shareUrl.toString();
	}

	if (navigator.share) {
		navigator.share({ url, title });
	} else {
		if (document.hasFocus()) {
			await navigator.clipboard.writeText(url);
		} else {
			alert("Document is not focused. Please try again.");
		}
	}
}

</src/lib/utils/share.ts>

<src/lib/utils/deepestChild.ts>
export function deepestChild(el: HTMLElement): HTMLElement {
	if (el.lastElementChild && el.lastElementChild.nodeType !== Node.TEXT_NODE) {
		return deepestChild(el.lastElementChild as HTMLElement);
	}
	return el;
}

</src/lib/utils/deepestChild.ts>

<src/lib/utils/chunk.ts>
/**
 * Chunk array into arrays of length at most `chunkSize`
 *
 * @param chunkSize must be greater than or equal to 1
 */
export function chunk<T extends unknown[] | string>(arr: T, chunkSize: number): T[] {
	if (isNaN(chunkSize) || chunkSize < 1) {
		throw new RangeError("Invalid chunk size: " + chunkSize);
	}

	if (!arr.length) {
		return [];
	}

	/// Small optimization to not chunk buffers unless needed
	if (arr.length <= chunkSize) {
		return [arr];
	}

	return range(Math.ceil(arr.length / chunkSize)).map((i) => {
		return arr.slice(i * chunkSize, (i + 1) * chunkSize);
	}) as T[];
}

function range(n: number, b?: number): number[] {
	return b
		? Array(b - n)
				.fill(0)
				.map((_, i) => n + i)
		: Array(n)
				.fill(0)
				.map((_, i) => i);
}

</src/lib/utils/chunk.ts>

<src/lib/utils/randomUuid.ts>
type UUID = ReturnType<typeof crypto.randomUUID>;

export function randomUUID(): UUID {
	// Only on old safari / ios
	if (!("randomUUID" in crypto)) {
		return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (c) =>
			(
				Number(c) ^
				(crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (Number(c) / 4)))
			).toString(16)
		) as UUID;
	}
	return crypto.randomUUID();
}

</src/lib/utils/randomUuid.ts>

<src/lib/utils/searchTokens.ts>
const PUNCTUATION_REGEX = /\p{P}/gu;

function removeDiacritics(s: string, form: "NFD" | "NFKD" = "NFD"): string {
	return s.normalize(form).replace(/[\u0300-\u036f]/g, "");
}

export function generateSearchTokens(value: string): string[] {
	const fullTitleToken = removeDiacritics(value)
		.replace(PUNCTUATION_REGEX, "")
		.replaceAll(/\s+/g, "")
		.toLowerCase();
	return [
		...new Set([
			...removeDiacritics(value)
				.split(/\s+/)
				.map((word) => word.replace(PUNCTUATION_REGEX, "").toLowerCase())
				.filter((word) => word.length),
			...(fullTitleToken.length ? [fullTitleToken] : []),
		]),
	];
}

function escapeForRegExp(s: string): string {
	return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

export function generateQueryTokens(query: string): RegExp[] {
	return removeDiacritics(query)
		.split(/\s+/)
		.map((word) => word.replace(PUNCTUATION_REGEX, "").toLowerCase())
		.filter((word) => word.length)
		.map((token) => new RegExp(`^${escapeForRegExp(token)}`));
}

</src/lib/utils/searchTokens.ts>

<src/lib/utils/timeout.ts>
export const timeout = <T>(prom: Promise<T>, time: number): Promise<T> => {
	let timer: NodeJS.Timeout;
	return Promise.race([
		prom,
		new Promise<T>((_, reject) => {
			timer = setTimeout(() => reject(new Error(`Timeout after ${time / 1000} seconds`)), time);
		}),
	]).finally(() => clearTimeout(timer));
};

</src/lib/utils/timeout.ts>

<src/lib/utils/sha256.ts>
export async function sha256(input: string): Promise<string> {
	const utf8 = new TextEncoder().encode(input);
	const hashBuffer = await crypto.subtle.digest("SHA-256", utf8);
	const hashArray = Array.from(new Uint8Array(hashBuffer));
	const hashHex = hashArray.map((bytes) => bytes.toString(16).padStart(2, "0")).join("");
	return hashHex;
}

</src/lib/utils/sha256.ts>

<src/lib/utils/tools.ts>
import type { Tool } from "$lib/types/Tool";

/**
 * Checks if a tool's name equals a value. Replaces all hyphens with underscores before comparison
 * since some models return underscores even when hyphens are used in the request.
 **/
export function toolHasName(name: string, tool: Pick<Tool, "name">): boolean {
	return tool.name.replaceAll("-", "_") === name.replaceAll("-", "_");
}

export const colors = ["purple", "blue", "green", "yellow", "red"] as const;

export const icons = [
	"wikis",
	"tools",
	"camera",
	"code",
	"email",
	"cloud",
	"terminal",
	"game",
	"chat",
	"speaker",
	"video",
] as const;

</src/lib/utils/tools.ts>

<src/lib/utils/hashConv.ts>
import type { Conversation } from "$lib/types/Conversation";
import { sha256 } from "./sha256";

export async function hashConv(conv: Conversation) {
	// messages contains the conversation message but only the immutable part
	const messages = conv.messages.map((message) => {
		return (({ from, id, content, webSearchId }) => ({ from, id, content, webSearchId }))(message);
	});

	const hash = await sha256(JSON.stringify(messages));
	return hash;
}

</src/lib/utils/hashConv.ts>

<src/lib/utils/models.ts>
import type { Model } from "$lib/types/Model";

export const findCurrentModel = (models: Model[], id?: string): Model =>
	models.find((m) => m.id === id) ?? models[0];

</src/lib/utils/models.ts>

<src/lib/utils/isDesktop.ts>
// Approximate width from which we disable autofocus
const TABLET_VIEWPORT_WIDTH = 768;

export function isDesktop(window: Window) {
	const { innerWidth } = window;
	return innerWidth > TABLET_VIEWPORT_WIDTH;
}

</src/lib/utils/isDesktop.ts>

<src/lib/utils/getTokenizer.ts>
import type { Model } from "$lib/types/Model";
import { AutoTokenizer, PreTrainedTokenizer } from "@huggingface/transformers";

export async function getTokenizer(_modelTokenizer: Exclude<Model["tokenizer"], undefined>) {
	if (typeof _modelTokenizer === "string") {
		// return auto tokenizer
		return await AutoTokenizer.from_pretrained(_modelTokenizer);
	} else {
		// construct & return pretrained tokenizer
		const { tokenizerUrl, tokenizerConfigUrl } = _modelTokenizer satisfies {
			tokenizerUrl: string;
			tokenizerConfigUrl: string;
		};
		const tokenizerJSON = await (await fetch(tokenizerUrl)).json();
		const tokenizerConfig = await (await fetch(tokenizerConfigUrl)).json();
		return new PreTrainedTokenizer(tokenizerJSON, tokenizerConfig);
	}
}

</src/lib/utils/getTokenizer.ts>

<src/lib/utils/getGradioApi.ts>
import { base } from "$app/paths";
import type { Client } from "@gradio/client";

export type ApiReturnType = Awaited<ReturnType<typeof Client.prototype.view_api>>;

export async function getGradioApi(space: string) {
	const api: ApiReturnType = await fetch(`${base}/api/spaces-config?space=${space}`).then(
		async (res) => {
			if (!res.ok) {
				throw new Error(await res.text());
			}
			return res.json();
		}
	);
	return api;
}

</src/lib/utils/getGradioApi.ts>

<src/lib/utils/getHref.ts>
export function getHref(
	url: URL | string,
	modifications: {
		newKeys?: Record<string, string | undefined | null>;
		existingKeys?: { behaviour: "delete_except" | "delete"; keys: string[] };
	}
) {
	const newUrl = new URL(url);
	const { newKeys, existingKeys } = modifications;

	// exsiting keys logic
	if (existingKeys) {
		const { behaviour, keys } = existingKeys;
		if (behaviour === "delete") {
			for (const key of keys) {
				newUrl.searchParams.delete(key);
			}
		} else {
			// delete_except
			const keysToPreserve = keys;
			for (const key of [...newUrl.searchParams.keys()]) {
				if (!keysToPreserve.includes(key)) {
					newUrl.searchParams.delete(key);
				}
			}
		}
	}

	// new keys logic
	if (newKeys) {
		for (const [key, val] of Object.entries(newKeys)) {
			if (val) {
				newUrl.searchParams.set(key, val);
			} else {
				newUrl.searchParams.delete(key);
			}
		}
	}

	return newUrl.toString();
}

</src/lib/utils/getHref.ts>

<src/lib/utils/cookiesAreEnabled.ts>
import { browser } from "$app/environment";

export function cookiesAreEnabled(): boolean {
	if (!browser) return false;
	if (navigator.cookieEnabled) return navigator.cookieEnabled;

	// Create cookie
	document.cookie = "cookietest=1";
	const ret = document.cookie.indexOf("cookietest=") != -1;
	// Delete cookie
	document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT";
	return ret;
}

</src/lib/utils/cookiesAreEnabled.ts>

<src/lib/utils/stringifyError.ts>
/** Takes an unknown error and attempts to convert it to a string */
export function stringifyError(error: unknown): string {
	if (error instanceof Error) return error.message;
	if (typeof error === "string") return error;
	if (typeof error === "object" && error !== null) {
		// try a few common properties
		if ("message" in error && typeof error.message === "string") return error.message;
		if ("body" in error && typeof error.body === "string") return error.body;
		if ("name" in error && typeof error.name === "string") return error.name;
	}
	return "Unknown error";
}

</src/lib/utils/stringifyError.ts>

<src/lib/utils/isUrl.ts>
export function isURL(url: string) {
	try {
		new URL(url);
		return true;
	} catch (e) {
		return false;
	}
}

</src/lib/utils/isUrl.ts>

<src/lib/switchTheme.ts>
export function switchTheme() {
	const { classList } = document.querySelector("html") as HTMLElement;
	const metaTheme = document.querySelector('meta[name="theme-color"]') as HTMLMetaElement;

	if (classList.contains("dark")) {
		classList.remove("dark");
		metaTheme.setAttribute("content", "rgb(249, 250, 251)");
		localStorage.theme = "light";
	} else {
		classList.add("dark");
		metaTheme.setAttribute("content", "rgb(26, 36, 50)");
		localStorage.theme = "dark";
	}
}

</src/lib/switchTheme.ts>

<src/lib/actions/snapScrollToBottom.ts>
import { navigating } from "$app/stores";
import { tick } from "svelte";
import { get } from "svelte/store";

const detachedOffset = 10;

/**
 * @param node element to snap scroll to bottom
 * @param dependency pass in a dependency to update scroll on changes.
 */
export const snapScrollToBottom = (node: HTMLElement, dependency: unknown) => {
	let prevScrollValue = node.scrollTop;
	let isDetached = false;

	const handleScroll = () => {
		// if user scrolled up, we detach
		if (node.scrollTop < prevScrollValue) {
			isDetached = true;
		}

		// if user scrolled back to within 10px of bottom, we reattach
		if (node.scrollTop - (node.scrollHeight - node.clientHeight) >= -detachedOffset) {
			isDetached = false;
		}

		prevScrollValue = node.scrollTop;
	};

	const updateScroll = async (_options: { force?: boolean } = {}) => {
		const defaultOptions = { force: false };
		const options = { ...defaultOptions, ..._options };
		const { force } = options;

		if (!force && isDetached && !get(navigating)) return;

		// wait for next tick to ensure that the DOM is updated
		await tick();

		node.scrollTo({ top: node.scrollHeight });
	};

	node.addEventListener("scroll", handleScroll);

	if (dependency) {
		updateScroll({ force: true });
	}

	return {
		update: updateScroll,
		destroy: () => {
			node.removeEventListener("scroll", handleScroll);
		},
	};
};

</src/lib/actions/snapScrollToBottom.ts>

<src/lib/actions/clickOutside.ts>
export function clickOutside(element: HTMLElement, callbackFunction: () => void) {
	function onClick(event: MouseEvent) {
		if (!element.contains(event.target as Node)) {
			callbackFunction();
		}
	}

	document.body.addEventListener("click", onClick);

	return {
		update(newCallbackFunction: () => void) {
			callbackFunction = newCallbackFunction;
		},
		destroy() {
			document.body.removeEventListener("click", onClick);
		},
	};
}

</src/lib/actions/clickOutside.ts>

<src/lib/jobs/refresh-conversation-stats.ts>
import type { ConversationStats } from "$lib/types/ConversationStats";
import { CONVERSATION_STATS_COLLECTION, collections } from "$lib/server/database";
import { logger } from "$lib/server/logger";
import type { ObjectId } from "mongodb";
import { acquireLock, refreshLock } from "$lib/migrations/lock";

export async function computeAllStats() {
	for (const span of ["day", "week", "month"] as const) {
		computeStats({ dateField: "updatedAt", type: "conversation", span }).catch((e) =>
			logger.error(e)
		);
		computeStats({ dateField: "createdAt", type: "conversation", span }).catch((e) =>
			logger.error(e)
		);
		computeStats({ dateField: "createdAt", type: "message", span }).catch((e) => logger.error(e));
	}
}

async function computeStats(params: {
	dateField: ConversationStats["date"]["field"];
	span: ConversationStats["date"]["span"];
	type: ConversationStats["type"];
}) {
	const lastComputed = await collections.conversationStats.findOne(
		{ "date.field": params.dateField, "date.span": params.span, type: params.type },
		{ sort: { "date.at": -1 } }
	);

	// If the last computed week is at the beginning of the last computed month, we need to include some days from the previous month
	// In those cases we need to compute the stats from before the last month as everything is one aggregation
	const minDate = lastComputed ? lastComputed.date.at : new Date(0);

	logger.info(
		{ minDate, dateField: params.dateField, span: params.span, type: params.type },
		"Computing conversation stats"
	);

	const dateField = params.type === "message" ? "messages." + params.dateField : params.dateField;

	const pipeline = [
		{
			$match: {
				[dateField]: { $gte: minDate },
			},
		},
		{
			$project: {
				[dateField]: 1,
				sessionId: 1,
				userId: 1,
			},
		},
		...(params.type === "message"
			? [
					{
						$unwind: "$messages",
					},
					{
						$match: {
							[dateField]: { $gte: minDate },
						},
					},
			  ]
			: []),
		{
			$sort: {
				[dateField]: 1,
			},
		},
		{
			$facet: {
				userId: [
					{
						$match: {
							userId: { $exists: true },
						},
					},
					{
						$group: {
							_id: {
								at: { $dateTrunc: { date: `$${dateField}`, unit: params.span } },
								userId: "$userId",
							},
						},
					},
					{
						$group: {
							_id: "$_id.at",
							count: { $sum: 1 },
						},
					},
					{
						$project: {
							_id: 0,
							date: {
								at: "$_id",
								field: params.dateField,
								span: params.span,
							},
							distinct: "userId",
							count: 1,
						},
					},
				],
				sessionId: [
					{
						$match: {
							sessionId: { $exists: true },
						},
					},
					{
						$group: {
							_id: {
								at: { $dateTrunc: { date: `$${dateField}`, unit: params.span } },
								sessionId: "$sessionId",
							},
						},
					},
					{
						$group: {
							_id: "$_id.at",
							count: { $sum: 1 },
						},
					},
					{
						$project: {
							_id: 0,
							date: {
								at: "$_id",
								field: params.dateField,
								span: params.span,
							},
							distinct: "sessionId",
							count: 1,
						},
					},
				],
				userOrSessionId: [
					{
						$group: {
							_id: {
								at: { $dateTrunc: { date: `$${dateField}`, unit: params.span } },
								userOrSessionId: { $ifNull: ["$userId", "$sessionId"] },
							},
						},
					},
					{
						$group: {
							_id: "$_id.at",
							count: { $sum: 1 },
						},
					},
					{
						$project: {
							_id: 0,
							date: {
								at: "$_id",
								field: params.dateField,
								span: params.span,
							},
							distinct: "userOrSessionId",
							count: 1,
						},
					},
				],
				_id: [
					{
						$group: {
							_id: { $dateTrunc: { date: `$${dateField}`, unit: params.span } },
							count: { $sum: 1 },
						},
					},
					{
						$project: {
							_id: 0,
							date: {
								at: "$_id",
								field: params.dateField,
								span: params.span,
							},
							distinct: "_id",
							count: 1,
						},
					},
				],
			},
		},
		{
			$project: {
				stats: {
					$concatArrays: ["$userId", "$sessionId", "$userOrSessionId", "$_id"],
				},
			},
		},
		{
			$unwind: "$stats",
		},
		{
			$replaceRoot: {
				newRoot: "$stats",
			},
		},
		{
			$set: {
				type: params.type,
			},
		},
		{
			$merge: {
				into: CONVERSATION_STATS_COLLECTION,
				on: ["date.at", "type", "date.span", "date.field", "distinct"],
				whenMatched: "replace",
				whenNotMatched: "insert",
			},
		},
	];

	await collections.conversations.aggregate(pipeline, { allowDiskUse: true }).next();

	logger.info(
		{ minDate, dateField: params.dateField, span: params.span, type: params.type },
		"Computed conversation stats"
	);
}

const LOCK_KEY = "conversation.stats";

let hasLock = false;
let lockId: ObjectId | null = null;

async function maintainLock() {
	if (hasLock && lockId) {
		hasLock = await refreshLock(LOCK_KEY, lockId);

		if (!hasLock) {
			lockId = null;
		}
	} else if (!hasLock) {
		lockId = (await acquireLock(LOCK_KEY)) || null;
		hasLock = !!lockId;
	}

	setTimeout(maintainLock, 10_000);
}

export function refreshConversationStats() {
	const ONE_HOUR_MS = 3_600_000;

	maintainLock().then(() => {
		computeAllStats();

		setInterval(computeAllStats, 12 * ONE_HOUR_MS);
	});
}

</src/lib/jobs/refresh-conversation-stats.ts>

<src/lib/jobs/refresh-assistants-counts.ts>
import { Database } from "$lib/server/database";
import { acquireLock, refreshLock } from "$lib/migrations/lock";
import type { ObjectId } from "mongodb";
import { subDays } from "date-fns";
import { logger } from "$lib/server/logger";

const LOCK_KEY = "assistants.count";

let hasLock = false;
let lockId: ObjectId | null = null;

async function refreshAssistantsCountsHelper() {
	if (!hasLock) {
		return;
	}

	try {
		await Database.getInstance()
			.getClient()
			.withSession((session) =>
				session.withTransaction(async () => {
					await Database.getInstance()
						.getCollections()
						.assistants.aggregate([
							{ $project: { _id: 1 } },
							{ $set: { last24HoursCount: 0 } },
							{
								$unionWith: {
									coll: "assistants.stats",
									pipeline: [
										{
											$match: { "date.at": { $gte: subDays(new Date(), 1) }, "date.span": "hour" },
										},
										{
											$group: {
												_id: "$assistantId",
												last24HoursCount: { $sum: "$count" },
											},
										},
									],
								},
							},
							{
								$group: {
									_id: "$_id",
									last24HoursCount: { $sum: "$last24HoursCount" },
								},
							},
							{
								$merge: {
									into: "assistants",
									on: "_id",
									whenMatched: "merge",
									whenNotMatched: "discard",
								},
							},
						])
						.next();
				})
			);
	} catch (e) {
		logger.error(e, "Refresh assistants counter failed!");
	}
}

async function maintainLock() {
	if (hasLock && lockId) {
		hasLock = await refreshLock(LOCK_KEY, lockId);

		if (!hasLock) {
			lockId = null;
		}
	} else if (!hasLock) {
		lockId = (await acquireLock(LOCK_KEY)) || null;
		hasLock = !!lockId;
	}

	setTimeout(maintainLock, 10_000);
}

export function refreshAssistantsCounts() {
	const ONE_HOUR_MS = 3_600_000;

	maintainLock().then(() => {
		refreshAssistantsCountsHelper();

		setInterval(refreshAssistantsCountsHelper, ONE_HOUR_MS);
	});
}

</src/lib/jobs/refresh-assistants-counts.ts>

<src/app.html>
<!DOCTYPE html>
<html lang="en" class="h-full">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<meta name="theme-color" content="rgb(249, 250, 251)" />
		<script>
			if (
				localStorage.theme === "dark" ||
				(!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)
			) {
				document.documentElement.classList.add("dark");
				document
					.querySelector('meta[name="theme-color"]')
					.setAttribute("content", "rgb(26, 36, 50)");
			}

			// For some reason, Sveltekit doesn't let us load env variables from .env here, so we load it from hooks.server.ts
			window.gaId = "%gaId%";
		</script>
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover" class="h-full dark:bg-gray-900">
		<div id="app" class="contents h-full">%sveltekit.body%</div>

		<!-- Google Tag Manager -->
		<script>
			if (window.gaId) {
				const script = document.createElement("script");
				script.src = "https://www.googletagmanager.com/gtag/js?id=" + window.gaId;
				script.async = true;
				document.head.appendChild(script);

				window.dataLayer = window.dataLayer || [];
				function gtag() {
					dataLayer.push(arguments);
				}
				gtag("js", new Date());
				/// ^ See https://developers.google.com/tag-platform/gtagjs/install
				gtag("config", window.gaId);
				gtag("consent", "default", { ad_storage: "denied", analytics_storage: "denied" });
				/// ^ See https://developers.google.com/tag-platform/gtagjs/reference#consent
				/// TODO: ask the user for their consent and update this with gtag('consent', 'update')
			}
		</script>
	</body>
</html>

</src/app.html>

<src/hooks.server.ts>
import { env } from "$env/dynamic/private";
import { env as envPublic } from "$env/dynamic/public";
import type { Handle, HandleServerError } from "@sveltejs/kit";
import { collections } from "$lib/server/database";
import { base } from "$app/paths";
import { findUser, refreshSessionCookie, requiresUser } from "$lib/server/auth";
import { ERROR_MESSAGES } from "$lib/stores/errors";
import { sha256 } from "$lib/utils/sha256";
import { addWeeks } from "date-fns";
import { checkAndRunMigrations } from "$lib/migrations/migrations";
import { building } from "$app/environment";
import { logger } from "$lib/server/logger";
import { AbortedGenerations } from "$lib/server/abortedGenerations";
import { MetricsServer } from "$lib/server/metrics";
import { initExitHandler } from "$lib/server/exitHandler";
import { ObjectId } from "mongodb";
import { refreshAssistantsCounts } from "$lib/jobs/refresh-assistants-counts";
import { refreshConversationStats } from "$lib/jobs/refresh-conversation-stats";

// TODO: move this code on a started server hook, instead of using a "building" flag
if (!building) {
	logger.info("Starting server...");
	initExitHandler();

	await checkAndRunMigrations();
	if (env.ENABLE_ASSISTANTS) {
		refreshAssistantsCounts();
	}
	refreshConversationStats();

	// Init metrics server
	MetricsServer.getInstance();

	// Init AbortedGenerations refresh process
	AbortedGenerations.getInstance();
}

export const handleError: HandleServerError = async ({ error, event, status, message }) => {
	// handle 404

	if (building) {
		throw error;
	}

	if (event.route.id === null) {
		return {
			message: `Page ${event.url.pathname} not found`,
		};
	}

	const errorId = crypto.randomUUID();

	logger.error({
		locals: event.locals,
		url: event.request.url,
		params: event.params,
		request: event.request,
		message,
		error,
		errorId,
		status,
	});

	return {
		message: "An error occurred",
		errorId,
	};
};

export const handle: Handle = async ({ event, resolve }) => {
	logger.debug({
		locals: event.locals,
		url: event.url.pathname,
		params: event.params,
		request: event.request,
	});

	if (event.url.pathname.startsWith(`${base}/api/`) && env.EXPOSE_API !== "true") {
		return new Response("API is disabled", { status: 403 });
	}

	function errorResponse(status: number, message: string) {
		const sendJson =
			event.request.headers.get("accept")?.includes("application/json") ||
			event.request.headers.get("content-type")?.includes("application/json");
		return new Response(sendJson ? JSON.stringify({ error: message }) : message, {
			status,
			headers: {
				"content-type": sendJson ? "application/json" : "text/plain",
			},
		});
	}

	if (event.url.pathname.startsWith(`${base}/admin/`) || event.url.pathname === `${base}/admin`) {
		const ADMIN_SECRET = env.ADMIN_API_SECRET || env.PARQUET_EXPORT_SECRET;

		if (!ADMIN_SECRET) {
			return errorResponse(500, "Admin API is not configured");
		}

		if (event.request.headers.get("Authorization") !== `Bearer ${ADMIN_SECRET}`) {
			return errorResponse(401, "Unauthorized");
		}
	}

	const token = event.cookies.get(env.COOKIE_NAME);

	// if the trusted email header is set we use it to get the user email
	const email = env.TRUSTED_EMAIL_HEADER
		? event.request.headers.get(env.TRUSTED_EMAIL_HEADER)
		: null;

	let secretSessionId: string | null = null;
	let sessionId: string | null = null;

	if (email) {
		secretSessionId = sessionId = await sha256(email);

		event.locals.user = {
			// generate id based on email
			_id: new ObjectId(sessionId.slice(0, 24)),
			name: email,
			email,
			createdAt: new Date(),
			updatedAt: new Date(),
			hfUserId: email,
			avatarUrl: "",
			logoutDisabled: true,
		};
	} else if (token) {
		secretSessionId = token;
		sessionId = await sha256(token);

		const user = await findUser(sessionId);

		if (user) {
			event.locals.user = user;
		}
	} else if (event.url.pathname.startsWith(`${base}/api/`) && env.USE_HF_TOKEN_IN_API === "true") {
		// if the request goes to the API and no user is available in the header
		// check if a bearer token is available in the Authorization header

		const authorization = event.request.headers.get("Authorization");

		if (authorization && authorization.startsWith("Bearer ")) {
			const token = authorization.slice(7);

			const hash = await sha256(token);

			sessionId = secretSessionId = hash;

			// check if the hash is in the DB and get the user
			// else check against https://huggingface.co/api/whoami-v2

			const cacheHit = await collections.tokenCaches.findOne({ tokenHash: hash });

			if (cacheHit) {
				const user = await collections.users.findOne({ hfUserId: cacheHit.userId });

				if (!user) {
					return errorResponse(500, "User not found");
				}

				event.locals.user = user;
			} else {
				const response = await fetch("https://huggingface.co/api/whoami-v2", {
					headers: {
						Authorization: `Bearer ${token}`,
					},
				});

				if (!response.ok) {
					return errorResponse(401, "Unauthorized");
				}

				const data = await response.json();
				const user = await collections.users.findOne({ hfUserId: data.id });

				if (!user) {
					return errorResponse(500, "User not found");
				}

				await collections.tokenCaches.insertOne({
					tokenHash: hash,
					userId: data.id,
					createdAt: new Date(),
					updatedAt: new Date(),
				});

				event.locals.user = user;
			}
		}
	}

	if (!sessionId || !secretSessionId) {
		secretSessionId = crypto.randomUUID();
		sessionId = await sha256(secretSessionId);

		if (await collections.sessions.findOne({ sessionId })) {
			return errorResponse(500, "Session ID collision");
		}
	}

	event.locals.sessionId = sessionId;

	// CSRF protection
	const requestContentType = event.request.headers.get("content-type")?.split(";")[0] ?? "";
	/** https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype */
	const nativeFormContentTypes = [
		"multipart/form-data",
		"application/x-www-form-urlencoded",
		"text/plain",
	];

	if (event.request.method === "POST") {
		refreshSessionCookie(event.cookies, event.locals.sessionId);

		if (nativeFormContentTypes.includes(requestContentType)) {
			const origin = event.request.headers.get("origin");

			if (!origin) {
				return errorResponse(403, "Non-JSON form requests need to have an origin");
			}

			const validOrigins = [
				new URL(event.request.url).host,
				...(envPublic.PUBLIC_ORIGIN ? [new URL(envPublic.PUBLIC_ORIGIN).host] : []),
			];

			if (!validOrigins.includes(new URL(origin).host)) {
				return errorResponse(403, "Invalid referer for POST request");
			}
		}
	}

	if (event.request.method === "POST") {
		// if the request is a POST request we refresh the cookie
		refreshSessionCookie(event.cookies, secretSessionId);

		await collections.sessions.updateOne(
			{ sessionId },
			{ $set: { updatedAt: new Date(), expiresAt: addWeeks(new Date(), 2) } }
		);
	}

	if (
		!event.url.pathname.startsWith(`${base}/login`) &&
		!event.url.pathname.startsWith(`${base}/admin`) &&
		!["GET", "OPTIONS", "HEAD"].includes(event.request.method)
	) {
		if (
			!event.locals.user &&
			requiresUser &&
			!((env.MESSAGES_BEFORE_LOGIN ? parseInt(env.MESSAGES_BEFORE_LOGIN) : 0) > 0)
		) {
			return errorResponse(401, ERROR_MESSAGES.authOnly);
		}

		// if login is not required and the call is not from /settings and we display the ethics modal with PUBLIC_APP_DISCLAIMER
		//  we check if the user has accepted the ethics modal first.
		// If login is required, `ethicsModalAcceptedAt` is already true at this point, so do not pass this condition. This saves a DB call.
		if (
			!requiresUser &&
			!event.url.pathname.startsWith(`${base}/settings`) &&
			envPublic.PUBLIC_APP_DISCLAIMER === "1"
		) {
			const hasAcceptedEthicsModal = await collections.settings.countDocuments({
				sessionId: event.locals.sessionId,
				ethicsModalAcceptedAt: { $exists: true },
			});

			if (!hasAcceptedEthicsModal) {
				return errorResponse(405, "You need to accept the welcome modal first");
			}
		}
	}

	let replaced = false;

	const response = await resolve(event, {
		transformPageChunk: (chunk) => {
			// For some reason, Sveltekit doesn't let us load env variables from .env in the app.html template
			if (replaced || !chunk.html.includes("%gaId%")) {
				return chunk.html;
			}
			replaced = true;

			return chunk.html.replace("%gaId%", envPublic.PUBLIC_GOOGLE_ANALYTICS_ID);
		},
	});

	return response;
};

</src/hooks.server.ts>

<src/routes/assistant/[assistantId]/+page.server.ts>
import { base } from "$app/paths";
import { collections } from "$lib/server/database";
import { redirect } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

export const load = async ({ params }) => {
	try {
		const assistant = await collections.assistants.findOne({
			_id: new ObjectId(params.assistantId),
		});

		if (!assistant) {
			redirect(302, `${base}`);
		}

		return { assistant: JSON.parse(JSON.stringify(assistant)) };
	} catch {
		redirect(302, `${base}`);
	}
};

</src/routes/assistant/[assistantId]/+page.server.ts>

<src/routes/assistant/[assistantId]/thumbnail.png/+server.ts>
import ChatThumbnail from "./ChatThumbnail.svelte";
import { collections } from "$lib/server/database";
import { error, type RequestHandler } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import type { SvelteComponent } from "svelte";

import { Resvg } from "@resvg/resvg-js";
import satori from "satori";
import { html } from "satori-html";

import InterRegular from "../../../../../static/fonts/Inter-Regular.ttf";
import InterBold from "../../../../../static/fonts/Inter-Bold.ttf";
import sharp from "sharp";

export const GET: RequestHandler = (async ({ params }) => {
	const assistant = await collections.assistants.findOne({
		_id: new ObjectId(params.assistantId),
	});

	if (!assistant) {
		error(404, "Assistant not found.");
	}

	let avatar = "";
	const fileId = collections.bucket.find({ filename: assistant._id.toString() });
	const file = await fileId.next();
	if (file) {
		avatar = await (async () => {
			const fileStream = collections.bucket.openDownloadStream(file?._id);

			const fileBuffer = await new Promise<Buffer>((resolve, reject) => {
				const chunks: Uint8Array[] = [];
				fileStream.on("data", (chunk) => chunks.push(chunk));
				fileStream.on("error", reject);
				fileStream.on("end", () => resolve(Buffer.concat(chunks)));
			});

			return fileBuffer;
		})()
			.then(async (buf) => sharp(buf).jpeg().toBuffer()) // convert to jpeg bc satori png is really slow
			.then(async (buf) => "data:image/jpeg;base64," + buf.toString("base64"));
	}

	const renderedComponent = (ChatThumbnail as unknown as SvelteComponent).render({
		name: assistant.name,
		description: assistant.description,
		createdByName: assistant.createdByName,
		avatar,
	});

	const reactLike = html(
		"<style>" + renderedComponent.css.code + "</style>" + renderedComponent.html
	);

	const svg = await satori(reactLike, {
		width: 1200,
		height: 648,
		fonts: [
			{
				name: "Inter",
				data: InterRegular as unknown as ArrayBuffer,
				weight: 500,
			},
			{
				name: "Inter",
				data: InterBold as unknown as ArrayBuffer,
				weight: 700,
			},
		],
	});

	const png = new Resvg(svg, {
		fitTo: { mode: "original" },
	})
		.render()
		.asPng();

	return new Response(png, {
		headers: {
			"Content-Type": "image/png",
		},
	});
}) satisfies RequestHandler;

</src/routes/assistant/[assistantId]/thumbnail.png/+server.ts>

<src/routes/settings/+layout.server.ts>
import { collections } from "$lib/server/database";
import type { LayoutServerLoad } from "./$types";
import type { Report } from "$lib/types/Report";

export const load = (async ({ locals, parent }) => {
	const { assistants } = await parent();

	let reportsByUser: string[] = [];
	const createdBy = locals.user?._id ?? locals.sessionId;
	if (createdBy) {
		const reports = await collections.reports
			.find<Pick<Report, "contentId">>(
				{ createdBy, object: "assistant" },
				{ projection: { _id: 0, contentId: 1 } }
			)
			.toArray();
		reportsByUser = reports.map((r) => r.contentId.toString());
	}

	return {
		assistants: assistants.map((el) => ({
			...el,
			reported: reportsByUser.includes(el._id),
		})),
	};
}) satisfies LayoutServerLoad;

</src/routes/settings/+layout.server.ts>

<src/routes/settings/(nav)/assistants/new/+page.server.ts>
import { base } from "$app/paths";
import { authCondition, requiresUser } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { fail, type Actions, redirect } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

import { z } from "zod";
import { sha256 } from "$lib/utils/sha256";
import sharp from "sharp";
import { parseStringToList } from "$lib/utils/parseStringToList";
import { usageLimits } from "$lib/server/usageLimits";
import { generateSearchTokens } from "$lib/utils/searchTokens";
import { toolFromConfigs } from "$lib/server/tools";

const newAsssistantSchema = z.object({
	name: z.string().min(1),
	modelId: z.string().min(1),
	preprompt: z.string().min(1),
	description: z.string().optional(),
	exampleInput1: z.string().optional(),
	exampleInput2: z.string().optional(),
	exampleInput3: z.string().optional(),
	exampleInput4: z.string().optional(),
	avatar: z.instanceof(File).optional(),
	ragLinkList: z.preprocess(parseStringToList, z.string().url().array().max(10)),
	ragDomainList: z.preprocess(parseStringToList, z.string().array()),
	ragAllowAll: z.preprocess((v) => v === "true", z.boolean()),
	dynamicPrompt: z.preprocess((v) => v === "on", z.boolean()),
	temperature: z
		.union([z.literal(""), z.coerce.number().min(0.1).max(2)])
		.transform((v) => (v === "" ? undefined : v)),
	top_p: z
		.union([z.literal(""), z.coerce.number().min(0.05).max(1)])
		.transform((v) => (v === "" ? undefined : v)),

	repetition_penalty: z
		.union([z.literal(""), z.coerce.number().min(0.1).max(2)])
		.transform((v) => (v === "" ? undefined : v)),

	top_k: z
		.union([z.literal(""), z.coerce.number().min(5).max(100)])
		.transform((v) => (v === "" ? undefined : v)),
	tools: z
		.string()
		.optional()
		.transform((v) => (v ? v.split(",") : []))
		.transform(async (v) => [
			...(await collections.tools
				.find({ _id: { $in: v.map((toolId) => new ObjectId(toolId)) } })
				.project({ _id: 1 })
				.toArray()
				.then((tools) => tools.map((tool) => tool._id.toString()))),
			...toolFromConfigs
				.filter((el) => (v ?? []).includes(el._id.toString()))
				.map((el) => el._id.toString()),
		])
		.optional(),
});

const uploadAvatar = async (avatar: File, assistantId: ObjectId): Promise<string> => {
	const hash = await sha256(await avatar.text());
	const upload = collections.bucket.openUploadStream(`${assistantId.toString()}`, {
		metadata: { type: avatar.type, hash },
	});

	upload.write((await avatar.arrayBuffer()) as unknown as Buffer);
	upload.end();

	// only return the filename when upload throws a finish event or a 10s time out occurs
	return new Promise((resolve, reject) => {
		upload.once("finish", () => resolve(hash));
		upload.once("error", reject);
		setTimeout(() => reject(new Error("Upload timed out")), 10000);
	});
};

export const actions: Actions = {
	default: async ({ request, locals }) => {
		const formData = Object.fromEntries(await request.formData());

		const parse = await newAsssistantSchema.safeParseAsync(formData);

		if (!parse.success) {
			// Loop through the errors array and create a custom errors array
			const errors = parse.error.errors.map((error) => {
				return {
					field: error.path[0],
					message: error.message,
				};
			});

			return fail(400, { error: true, errors });
		}

		// can only create assistants when logged in, IF login is setup
		if (!locals.user && requiresUser) {
			const errors = [{ field: "preprompt", message: "Must be logged in. Unauthorized" }];
			return fail(400, { error: true, errors });
		}

		const createdById = locals.user?._id ?? locals.sessionId;

		const assistantsCount = await collections.assistants.countDocuments({ createdById });

		if (usageLimits?.assistants && assistantsCount > usageLimits.assistants) {
			const errors = [
				{
					field: "preprompt",
					message: "You have reached the maximum number of assistants. Delete some to continue.",
				},
			];
			return fail(400, { error: true, errors });
		}

		const newAssistantId = new ObjectId();

		const exampleInputs: string[] = [
			parse?.data?.exampleInput1 ?? "",
			parse?.data?.exampleInput2 ?? "",
			parse?.data?.exampleInput3 ?? "",
			parse?.data?.exampleInput4 ?? "",
		].filter((input) => !!input);

		let hash;
		if (parse.data.avatar && parse.data.avatar.size > 0) {
			let image;
			try {
				image = await sharp(await parse.data.avatar.arrayBuffer())
					.resize(512, 512, { fit: "inside" })
					.jpeg({ quality: 80 })
					.toBuffer();
			} catch (e) {
				const errors = [{ field: "avatar", message: (e as Error).message }];
				return fail(400, { error: true, errors });
			}

			hash = await uploadAvatar(new File([image], "avatar.jpg"), newAssistantId);
		}

		const { insertedId } = await collections.assistants.insertOne({
			_id: newAssistantId,
			createdById,
			createdByName: locals.user?.username ?? locals.user?.name,
			...parse.data,
			tools: parse.data.tools,
			exampleInputs,
			avatar: hash,
			createdAt: new Date(),
			updatedAt: new Date(),
			userCount: 1,
			featured: false,
			rag: {
				allowedLinks: parse.data.ragLinkList,
				allowedDomains: parse.data.ragDomainList,
				allowAllDomains: parse.data.ragAllowAll,
			},
			dynamicPrompt: parse.data.dynamicPrompt,
			searchTokens: generateSearchTokens(parse.data.name),
			last24HoursCount: 0,
			generateSettings: {
				temperature: parse.data.temperature,
				top_p: parse.data.top_p,
				repetition_penalty: parse.data.repetition_penalty,
				top_k: parse.data.top_k,
			},
		});

		// add insertedId to user settings

		await collections.settings.updateOne(authCondition(locals), {
			$addToSet: { assistants: insertedId },
		});

		redirect(302, `${base}/settings/assistants/${insertedId}`);
	},
};

</src/routes/settings/(nav)/assistants/new/+page.server.ts>

<src/routes/settings/(nav)/assistants/[assistantId]/+page.server.ts>
import { collections } from "$lib/server/database";
import { type Actions, fail, redirect } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import { authCondition } from "$lib/server/auth";
import { base } from "$app/paths";
import { env as envPublic } from "$env/dynamic/public";
import { env } from "$env/dynamic/private";
import { z } from "zod";
import type { Assistant } from "$lib/types/Assistant";
import { logger } from "$lib/server/logger";

async function assistantOnlyIfAuthor(locals: App.Locals, assistantId?: string) {
	const assistant = await collections.assistants.findOne({ _id: new ObjectId(assistantId) });

	if (!assistant) {
		throw Error("Assistant not found");
	}

	if (
		assistant.createdById.toString() !== (locals.user?._id ?? locals.sessionId).toString() &&
		!locals.user?.isAdmin
	) {
		throw Error("You are not the author of this assistant");
	}

	return assistant;
}

export const actions: Actions = {
	delete: async ({ params, locals }) => {
		let assistant;
		try {
			assistant = await assistantOnlyIfAuthor(locals, params.assistantId);
		} catch (e) {
			return fail(400, { error: true, message: (e as Error).message });
		}

		await collections.assistants.deleteOne({ _id: assistant._id });

		// and remove it from all users settings
		await collections.settings.updateMany(
			{
				assistants: { $in: [assistant._id] },
			},
			{
				$pull: { assistants: assistant._id },
			}
		);

		// and delete all avatars
		const fileCursor = collections.bucket.find({ filename: assistant._id.toString() });

		// Step 2: Delete the existing file if it exists
		let fileId = await fileCursor.next();
		while (fileId) {
			await collections.bucket.delete(fileId._id);
			fileId = await fileCursor.next();
		}

		redirect(302, `${base}/settings`);
	},
	report: async ({ request, params, locals, url }) => {
		// is there already a report from this user for this model ?
		const report = await collections.reports.findOne({
			createdBy: locals.user?._id ?? locals.sessionId,
			object: "assistant",
			contentId: new ObjectId(params.assistantId),
		});

		if (report) {
			return fail(400, { error: true, message: "Already reported" });
		}

		const formData = await request.formData();
		const result = z.string().min(1).max(128).safeParse(formData?.get("reportReason"));

		if (!result.success) {
			return fail(400, { error: true, message: "Invalid report reason" });
		}

		const { acknowledged } = await collections.reports.insertOne({
			_id: new ObjectId(),
			contentId: new ObjectId(params.assistantId),
			object: "assistant",
			createdBy: locals.user?._id ?? locals.sessionId,
			createdAt: new Date(),
			updatedAt: new Date(),
			reason: result.data,
		});

		if (!acknowledged) {
			return fail(500, { error: true, message: "Failed to report assistant" });
		}

		if (env.WEBHOOK_URL_REPORT_ASSISTANT) {
			const prefixUrl =
				envPublic.PUBLIC_SHARE_PREFIX || `${envPublic.PUBLIC_ORIGIN || url.origin}${base}`;
			const assistantUrl = `${prefixUrl}/assistant/${params.assistantId}`;

			const assistant = await collections.assistants.findOne<Pick<Assistant, "name">>(
				{ _id: new ObjectId(params.assistantId) },
				{ projection: { name: 1 } }
			);

			const username = locals.user?.username;

			const res = await fetch(env.WEBHOOK_URL_REPORT_ASSISTANT, {
				method: "POST",
				headers: {
					"Content-type": "application/json",
				},
				body: JSON.stringify({
					text: `Assistant <${assistantUrl}|${assistant?.name}> reported by ${
						username ? `<http://hf.co/${username}|${username}>` : "non-logged in user"
					}.\n\n> ${result.data}`,
				}),
			});

			if (!res.ok) {
				logger.error(`Webhook assistant report failed. ${res.statusText} ${res.text}`);
			}
		}

		return { from: "report", ok: true, message: "Assistant reported" };
	},

	subscribe: async ({ params, locals }) => {
		const assistant = await collections.assistants.findOne({
			_id: new ObjectId(params.assistantId),
		});

		if (!assistant) {
			return fail(404, { error: true, message: "Assistant not found" });
		}

		// don't push if it's already there
		const settings = await collections.settings.findOne(authCondition(locals));

		if (settings?.assistants?.includes(assistant._id)) {
			return fail(400, { error: true, message: "Already subscribed" });
		}

		const result = await collections.settings.updateOne(authCondition(locals), {
			$addToSet: { assistants: assistant._id },
		});

		// reduce count only if push succeeded
		if (result.modifiedCount > 0) {
			await collections.assistants.updateOne({ _id: assistant._id }, { $inc: { userCount: 1 } });
		}

		return { from: "subscribe", ok: true, message: "Assistant added" };
	},

	unsubscribe: async ({ params, locals }) => {
		const assistant = await collections.assistants.findOne({
			_id: new ObjectId(params.assistantId),
		});

		if (!assistant) {
			return fail(404, { error: true, message: "Assistant not found" });
		}

		const result = await collections.settings.updateOne(authCondition(locals), {
			$pull: { assistants: assistant._id },
		});

		// reduce count only if pull succeeded
		if (result.modifiedCount > 0) {
			await collections.assistants.updateOne({ _id: assistant._id }, { $inc: { userCount: -1 } });
		}

		redirect(302, `${base}/settings`);
	},

	unfeature: async ({ params, locals }) => {
		if (!locals.user?.isAdmin) {
			return fail(403, { error: true, message: "Permission denied" });
		}

		const assistant = await collections.assistants.findOne({
			_id: new ObjectId(params.assistantId),
		});

		if (!assistant) {
			return fail(404, { error: true, message: "Assistant not found" });
		}

		const result = await collections.assistants.updateOne(
			{ _id: assistant._id },
			{ $set: { featured: false } }
		);

		if (result.modifiedCount === 0) {
			return fail(500, { error: true, message: "Failed to unfeature assistant" });
		}

		return { from: "unfeature", ok: true, message: "Assistant unfeatured" };
	},

	feature: async ({ params, locals }) => {
		if (!locals.user?.isAdmin) {
			return fail(403, { error: true, message: "Permission denied" });
		}

		const assistant = await collections.assistants.findOne({
			_id: new ObjectId(params.assistantId),
		});

		if (!assistant) {
			return fail(404, { error: true, message: "Assistant not found" });
		}

		const result = await collections.assistants.updateOne(
			{ _id: assistant._id },
			{ $set: { featured: true } }
		);

		if (result.modifiedCount === 0) {
			return fail(500, { error: true, message: "Failed to feature assistant" });
		}

		return { from: "feature", ok: true, message: "Assistant featured" };
	},
};

</src/routes/settings/(nav)/assistants/[assistantId]/+page.server.ts>

<src/routes/settings/(nav)/assistants/[assistantId]/+page.ts>
import { base } from "$app/paths";
import { redirect } from "@sveltejs/kit";

export async function load({ parent, params }) {
	const data = await parent();

	const assistant = data.settings.assistants.find((id) => id === params.assistantId);

	if (!assistant) {
		redirect(302, `${base}/assistant/${params.assistantId}`);
	}

	return data;
}

</src/routes/settings/(nav)/assistants/[assistantId]/+page.ts>

<src/routes/settings/(nav)/assistants/[assistantId]/edit/+page.server.ts>
import { base } from "$app/paths";
import { requiresUser } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { fail, type Actions, redirect } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

import { z } from "zod";
import { sha256 } from "$lib/utils/sha256";

import sharp from "sharp";
import { parseStringToList } from "$lib/utils/parseStringToList";
import { generateSearchTokens } from "$lib/utils/searchTokens";
import { toolFromConfigs } from "$lib/server/tools";

const newAsssistantSchema = z.object({
	name: z.string().min(1),
	modelId: z.string().min(1),
	preprompt: z.string().min(1),
	description: z.string().optional(),
	exampleInput1: z.string().optional(),
	exampleInput2: z.string().optional(),
	exampleInput3: z.string().optional(),
	exampleInput4: z.string().optional(),
	avatar: z.union([z.instanceof(File), z.literal("null")]).optional(),
	ragLinkList: z.preprocess(parseStringToList, z.string().url().array().max(10)),
	ragDomainList: z.preprocess(parseStringToList, z.string().array()),
	ragAllowAll: z.preprocess((v) => v === "true", z.boolean()),
	dynamicPrompt: z.preprocess((v) => v === "on", z.boolean()),
	temperature: z
		.union([z.literal(""), z.coerce.number().min(0.1).max(2)])
		.transform((v) => (v === "" ? undefined : v)),
	top_p: z
		.union([z.literal(""), z.coerce.number().min(0.05).max(1)])
		.transform((v) => (v === "" ? undefined : v)),

	repetition_penalty: z
		.union([z.literal(""), z.coerce.number().min(0.1).max(2)])
		.transform((v) => (v === "" ? undefined : v)),

	top_k: z
		.union([z.literal(""), z.coerce.number().min(5).max(100)])
		.transform((v) => (v === "" ? undefined : v)),
	tools: z
		.string()
		.optional()
		.transform((v) => (v ? v.split(",") : []))
		.transform(async (v) => [
			...(await collections.tools
				.find({ _id: { $in: v.map((toolId) => new ObjectId(toolId)) } })
				.project({ _id: 1 })
				.toArray()
				.then((tools) => tools.map((tool) => tool._id.toString()))),
			...toolFromConfigs
				.filter((el) => (v ?? []).includes(el._id.toString()))
				.map((el) => el._id.toString()),
		])
		.optional(),
});

const uploadAvatar = async (avatar: File, assistantId: ObjectId): Promise<string> => {
	const hash = await sha256(await avatar.text());
	const upload = collections.bucket.openUploadStream(`${assistantId.toString()}`, {
		metadata: { type: avatar.type, hash },
	});

	upload.write((await avatar.arrayBuffer()) as unknown as Buffer);
	upload.end();

	// only return the filename when upload throws a finish event or a 10s time out occurs
	return new Promise((resolve, reject) => {
		upload.once("finish", () => resolve(hash));
		upload.once("error", reject);
		setTimeout(() => reject(new Error("Upload timed out")), 10000);
	});
};

export const actions: Actions = {
	default: async ({ request, locals, params }) => {
		const assistant = await collections.assistants.findOne({
			_id: new ObjectId(params.assistantId),
		});

		if (!assistant) {
			throw Error("Assistant not found");
		}

		if (assistant.createdById.toString() !== (locals.user?._id ?? locals.sessionId).toString()) {
			throw Error("You are not the author of this assistant");
		}

		const formData = Object.fromEntries(await request.formData());

		const parse = await newAsssistantSchema.safeParseAsync(formData);

		if (!parse.success) {
			// Loop through the errors array and create a custom errors array
			const errors = parse.error.errors.map((error) => {
				return {
					field: error.path[0],
					message: error.message,
				};
			});

			return fail(400, { error: true, errors });
		}

		// can only create assistants when logged in, IF login is setup
		if (!locals.user && requiresUser) {
			const errors = [{ field: "preprompt", message: "Must be logged in. Unauthorized" }];
			return fail(400, { error: true, errors });
		}

		const exampleInputs: string[] = [
			parse?.data?.exampleInput1 ?? "",
			parse?.data?.exampleInput2 ?? "",
			parse?.data?.exampleInput3 ?? "",
			parse?.data?.exampleInput4 ?? "",
		].filter((input) => !!input);

		const deleteAvatar = parse.data.avatar === "null";

		let hash;
		if (parse.data.avatar && parse.data.avatar !== "null" && parse.data.avatar.size > 0) {
			let image;
			try {
				image = await sharp(await parse.data.avatar.arrayBuffer())
					.resize(512, 512, { fit: "inside" })
					.jpeg({ quality: 80 })
					.toBuffer();
			} catch (e) {
				const errors = [{ field: "avatar", message: (e as Error).message }];
				return fail(400, { error: true, errors });
			}

			const fileCursor = collections.bucket.find({ filename: assistant._id.toString() });

			// Step 2: Delete the existing file if it exists
			let fileId = await fileCursor.next();
			while (fileId) {
				await collections.bucket.delete(fileId._id);
				fileId = await fileCursor.next();
			}

			hash = await uploadAvatar(new File([image], "avatar.jpg"), assistant._id);
		} else if (deleteAvatar) {
			// delete the avatar
			const fileCursor = collections.bucket.find({ filename: assistant._id.toString() });

			let fileId = await fileCursor.next();
			while (fileId) {
				await collections.bucket.delete(fileId._id);
				fileId = await fileCursor.next();
			}
		}

		const { acknowledged } = await collections.assistants.updateOne(
			{
				_id: assistant._id,
			},
			{
				$set: {
					name: parse.data.name,
					description: parse.data.description,
					modelId: parse.data.modelId,
					preprompt: parse.data.preprompt,
					exampleInputs,
					avatar: deleteAvatar ? undefined : hash ?? assistant.avatar,
					updatedAt: new Date(),
					rag: {
						allowedLinks: parse.data.ragLinkList,
						allowedDomains: parse.data.ragDomainList,
						allowAllDomains: parse.data.ragAllowAll,
					},
					tools: parse.data.tools,
					dynamicPrompt: parse.data.dynamicPrompt,
					searchTokens: generateSearchTokens(parse.data.name),
					generateSettings: {
						temperature: parse.data.temperature,
						top_p: parse.data.top_p,
						repetition_penalty: parse.data.repetition_penalty,
						top_k: parse.data.top_k,
					},
				},
			}
		);

		if (acknowledged) {
			redirect(302, `${base}/settings/assistants/${assistant._id}`);
		} else {
			throw Error("Update failed");
		}
	},
};

</src/routes/settings/(nav)/assistants/[assistantId]/edit/+page.server.ts>

<src/routes/settings/(nav)/assistants/[assistantId]/avatar.jpg/+server.ts>
import { collections } from "$lib/server/database";
import { error, type RequestHandler } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

export const GET: RequestHandler = async ({ params }) => {
	const assistant = await collections.assistants.findOne({
		_id: new ObjectId(params.assistantId),
	});

	if (!assistant) {
		error(404, "No assistant found");
	}

	if (!assistant.avatar) {
		error(404, "No avatar found");
	}

	const fileId = collections.bucket.find({ filename: assistant._id.toString() });

	const content = await fileId.next().then(async (file) => {
		if (!file?._id) {
			error(404, "Avatar not found");
		}

		const fileStream = collections.bucket.openDownloadStream(file?._id);

		const fileBuffer = await new Promise<Buffer>((resolve, reject) => {
			const chunks: Uint8Array[] = [];
			fileStream.on("data", (chunk) => chunks.push(chunk));
			fileStream.on("error", reject);
			fileStream.on("end", () => resolve(Buffer.concat(chunks)));
		});

		return fileBuffer;
	});

	return new Response(content, {
		headers: {
			"Content-Type": "image/jpeg",
			"Content-Security-Policy":
				"default-src 'none'; script-src 'none'; style-src 'none'; sandbox;",
		},
	});
};

</src/routes/settings/(nav)/assistants/[assistantId]/avatar.jpg/+server.ts>

<src/routes/settings/(nav)/+server.ts>
import { collections } from "$lib/server/database";
import { z } from "zod";
import { authCondition } from "$lib/server/auth";
import { DEFAULT_SETTINGS, type SettingsEditable } from "$lib/types/Settings";
import { toolFromConfigs } from "$lib/server/tools/index.js";
import { ObjectId } from "mongodb";

export async function POST({ request, locals }) {
	const body = await request.json();

	const { ethicsModalAccepted, ...settings } = z
		.object({
			shareConversationsWithModelAuthors: z
				.boolean()
				.default(DEFAULT_SETTINGS.shareConversationsWithModelAuthors),
			hideEmojiOnSidebar: z.boolean().default(DEFAULT_SETTINGS.hideEmojiOnSidebar),
			ethicsModalAccepted: z.boolean().optional(),
			activeModel: z.string().default(DEFAULT_SETTINGS.activeModel),
			customPrompts: z.record(z.string()).default({}),
			tools: z.array(z.string()).optional(),
			disableStream: z.boolean().default(false),
		})
		.parse(body) satisfies SettingsEditable;

	// make sure all tools exist
	// either in db or in config
	if (settings.tools) {
		const newTools = [
			...(await collections.tools
				.find({ _id: { $in: settings.tools.map((toolId) => new ObjectId(toolId)) } })
				.project({ _id: 1 })
				.toArray()
				.then((tools) => tools.map((tool) => tool._id.toString()))),
			...toolFromConfigs
				.filter((el) => (settings?.tools ?? []).includes(el._id.toString()))
				.map((el) => el._id.toString()),
		];

		settings.tools = newTools;
	}

	await collections.settings.updateOne(
		authCondition(locals),
		{
			$set: {
				...settings,
				...(ethicsModalAccepted && { ethicsModalAcceptedAt: new Date() }),
				updatedAt: new Date(),
			},
			$setOnInsert: {
				createdAt: new Date(),
			},
		},
		{
			upsert: true,
		}
	);
	// return ok response
	return new Response();
}

</src/routes/settings/(nav)/+server.ts>

<src/routes/tools/+layout.ts>
import { base } from "$app/paths";
import { redirect } from "@sveltejs/kit";

export async function load({ parent }) {
	const { enableCommunityTools } = await parent();

	if (enableCommunityTools) {
		return {};
	}

	redirect(302, `${base}/`);
}

</src/routes/tools/+layout.ts>

<src/routes/tools/[toolId]/+page.server.ts>
import { base } from "$app/paths";
import { env } from "$env/dynamic/private";
import { env as envPublic } from "$env/dynamic/public";
import { collections } from "$lib/server/database";
import { logger } from "$lib/server/logger";
import type { Tool } from "$lib/types/Tool";
import { fail, redirect, type Actions } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import { z } from "zod";

async function toolOnlyIfAuthor(locals: App.Locals, toolId?: string) {
	const tool = await collections.tools.findOne({ _id: new ObjectId(toolId) });

	if (!tool) {
		throw Error("Tool not found");
	}

	if (
		tool.createdById.toString() !== (locals.user?._id ?? locals.sessionId).toString() &&
		!locals.user?.isAdmin
	) {
		throw Error("You are not the creator of this tool");
	}

	return tool;
}

export const actions: Actions = {
	delete: async ({ params, locals }) => {
		let tool;
		try {
			tool = await toolOnlyIfAuthor(locals, params.toolId);
		} catch (e) {
			return fail(400, { error: true, message: (e as Error).message });
		}

		await collections.tools.deleteOne({ _id: tool._id });

		// Remove the tool from all users' settings
		await collections.settings.updateMany(
			{
				tools: { $in: [tool._id.toString()] },
			},
			{
				$pull: { tools: tool._id.toString() },
			}
		);

		// Remove the tool from all assistants
		await collections.assistants.updateMany(
			{
				tools: { $in: [tool._id.toString()] },
			},
			{
				$pull: { tools: tool._id.toString() },
			}
		);

		redirect(302, `${base}/tools`);
	},
	report: async ({ request, params, locals, url }) => {
		// is there already a report from this user for this model ?
		const report = await collections.reports.findOne({
			createdBy: locals.user?._id ?? locals.sessionId,
			object: "tool",
			contentId: new ObjectId(params.toolId),
		});

		if (report) {
			return fail(400, { error: true, message: "Already reported" });
		}

		const formData = await request.formData();
		const result = z.string().min(1).max(128).safeParse(formData?.get("reportReason"));

		if (!result.success) {
			return fail(400, { error: true, message: "Invalid report reason" });
		}

		const { acknowledged } = await collections.reports.insertOne({
			_id: new ObjectId(),
			contentId: new ObjectId(params.toolId),
			object: "tool",
			createdBy: locals.user?._id ?? locals.sessionId,
			createdAt: new Date(),
			updatedAt: new Date(),
			reason: result.data,
		});

		if (!acknowledged) {
			return fail(500, { error: true, message: "Failed to report tool" });
		}

		if (env.WEBHOOK_URL_REPORT_ASSISTANT) {
			const prefixUrl =
				envPublic.PUBLIC_SHARE_PREFIX || `${envPublic.PUBLIC_ORIGIN || url.origin}${base}`;
			const toolUrl = `${prefixUrl}/tools/${params.toolId}`;

			const tool = await collections.tools.findOne<Pick<Tool, "displayName">>(
				{ _id: new ObjectId(params.toolId) },
				{ projection: { displayName: 1 } }
			);

			const username = locals.user?.username;

			const res = await fetch(env.WEBHOOK_URL_REPORT_ASSISTANT, {
				method: "POST",
				headers: {
					"Content-type": "application/json",
				},
				body: JSON.stringify({
					text: `Tool <${toolUrl}|${tool?.displayName}> reported by ${
						username ? `<http://hf.co/${username}|${username}>` : "non-logged in user"
					}.\n\n> ${result.data}`,
				}),
			});

			if (!res.ok) {
				logger.error(`Webhook tool report failed. ${res.statusText} ${res.text}`);
			}
		}

		return { from: "report", ok: true, message: "Tool reported" };
	},

	unfeature: async ({ params, locals }) => {
		if (!locals.user?.isAdmin) {
			return fail(403, { error: true, message: "Permission denied" });
		}

		const tool = await collections.tools.findOne({
			_id: new ObjectId(params.toolId),
		});

		if (!tool) {
			return fail(404, { error: true, message: "Tool not found" });
		}

		const result = await collections.tools.updateOne(
			{ _id: tool._id },
			{ $set: { featured: false } }
		);

		if (result.modifiedCount === 0) {
			return fail(500, { error: true, message: "Failed to unfeature tool" });
		}

		return { from: "unfeature", ok: true, message: "Tool unfeatured" };
	},
	feature: async ({ params, locals }) => {
		if (!locals.user?.isAdmin) {
			return fail(403, { error: true, message: "Permission denied" });
		}

		const result = await collections.tools.updateOne(
			{ _id: new ObjectId(params.toolId) },
			{ $set: { featured: true } }
		);

		if (result.modifiedCount === 0) {
			return fail(500, { error: true, message: "Failed to feature tool" });
		}

		return { from: "feature", ok: true, message: "Tool featured" };
	},
};

</src/routes/tools/[toolId]/+page.server.ts>

<src/routes/tools/[toolId]/edit/+page.server.ts>
import { base } from "$app/paths";
import { requiresUser } from "$lib/server/auth.js";
import { collections } from "$lib/server/database.js";
import { editableToolSchema } from "$lib/server/tools/index.js";
import { generateSearchTokens } from "$lib/utils/searchTokens.js";
import { error, fail, redirect } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

export const actions = {
	default: async ({ request, params, locals }) => {
		const tool = await collections.tools.findOne({
			_id: new ObjectId(params.toolId),
		});

		if (!tool) {
			throw Error("Tool not found");
		}

		if (tool.createdById.toString() !== (locals.user?._id ?? locals.sessionId).toString()) {
			throw Error("You are not the creator of this tool");
		}

		// can only create tools when logged in, IF login is setup
		if (!locals.user && requiresUser) {
			const errors = [{ field: "description", message: "Must be logged in. Unauthorized" }];
			return fail(400, { error: true, errors });
		}

		const body = await request.formData();
		const toolStringified = body.get("tool");

		if (!toolStringified || typeof toolStringified !== "string") {
			error(400, "Tool is required");
		}

		const parse = editableToolSchema.safeParse(JSON.parse(toolStringified));

		if (!parse.success) {
			// Loop through the errors array and create a custom errors array
			const errors = parse.error.errors.map((error) => {
				return {
					field: error.path[0],
					message: error.message,
				};
			});

			return fail(400, { error: true, errors });
		}

		// modify the tool
		await collections.tools.updateOne(
			{ _id: tool._id },
			{
				$set: {
					...parse.data,
					updatedAt: new Date(),
					searchTokens: generateSearchTokens(parse.data.displayName),
				},
			}
		);

		redirect(302, `${base}/tools/${tool._id.toString()}`);
	},
};

</src/routes/tools/[toolId]/edit/+page.server.ts>

<src/routes/tools/[toolId]/+layout.server.ts>
import { base } from "$app/paths";
import { collections } from "$lib/server/database.js";
import { toolFromConfigs } from "$lib/server/tools/index.js";
import { redirect } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

export const load = async ({ params, locals }) => {
	const tool = await collections.tools.findOne({ _id: new ObjectId(params.toolId) });

	if (!tool) {
		const tool = toolFromConfigs.find((el) => el._id.toString() === params.toolId);
		if (!tool) {
			redirect(302, `${base}/tools`);
		}
		return {
			tool: {
				...tool,
				_id: tool._id.toString(),
				call: undefined,
				createdById: null,
				createdByName: null,
				createdByMe: false,
				reported: false,
				featured: false,
			},
		};
	}

	const reported = await collections.reports.findOne({
		contentId: tool._id,
		object: "tool",
	});

	return {
		tool: {
			...tool,
			_id: tool._id.toString(),
			call: undefined,
			createdById: tool.createdById.toString(),
			createdByMe:
				tool.createdById.toString() === (locals.user?._id ?? locals.sessionId).toString(),
			reported: !!reported,
		},
	};
};

</src/routes/tools/[toolId]/+layout.server.ts>

<src/routes/tools/+page.server.ts>
import { env } from "$env/dynamic/private";
import { authCondition } from "$lib/server/auth.js";
import { Database, collections } from "$lib/server/database.js";
import { toolFromConfigs } from "$lib/server/tools/index.js";
import { SortKey } from "$lib/types/Assistant.js";
import type { CommunityToolDB } from "$lib/types/Tool.js";
import type { User } from "$lib/types/User.js";
import { generateQueryTokens, generateSearchTokens } from "$lib/utils/searchTokens.js";
import { error } from "@sveltejs/kit";
import { ObjectId, type Filter } from "mongodb";

const NUM_PER_PAGE = 16;

export const load = async ({ url, locals }) => {
	if (env.COMMUNITY_TOOLS !== "true") {
		error(403, "Community tools are not enabled");
	}

	const username = url.searchParams.get("user");
	const query = url.searchParams.get("q")?.trim() ?? null;

	const pageIndex = parseInt(url.searchParams.get("p") ?? "0");
	const sort = url.searchParams.get("sort")?.trim() ?? SortKey.TRENDING;
	const createdByCurrentUser = locals.user?.username && locals.user.username === username;
	const activeOnly = url.searchParams.get("active") === "true";
	const showUnfeatured = url.searchParams.get("showUnfeatured") === "true";

	let user: Pick<User, "_id"> | null = null;
	if (username) {
		user = await collections.users.findOne<Pick<User, "_id">>(
			{ username },
			{ projection: { _id: 1 } }
		);
		if (!user) {
			error(404, `User "${username}" doesn't exist`);
		}
	}

	const settings = await collections.settings.findOne(authCondition(locals));

	if (!settings && activeOnly) {
		error(404, "No user settings found");
	}

	const queryTokens = !!query && generateQueryTokens(query);

	const filter: Filter<CommunityToolDB> = {
		...(!createdByCurrentUser &&
			!activeOnly &&
			!(locals.user?.isAdmin && showUnfeatured) && { featured: true }),
		...(user && { createdById: user._id }),
		...(queryTokens && { searchTokens: { $all: queryTokens } }),
		...(activeOnly && {
			_id: {
				$in: (settings?.tools ?? []).map((key) => {
					return new ObjectId(key);
				}),
			},
		}),
	};

	const communityTools = await Database.getInstance()
		.getCollections()
		.tools.find(filter)
		.skip(NUM_PER_PAGE * pageIndex)
		.sort({
			...(sort === SortKey.TRENDING && { last24HoursUseCount: -1 }),
			useCount: -1,
		})
		.limit(NUM_PER_PAGE)
		.toArray();

	const configTools = toolFromConfigs
		.filter((tool) => !tool?.isHidden)
		.filter((tool) => {
			if (queryTokens) {
				return generateSearchTokens(tool.displayName).some((token) =>
					queryTokens.some((queryToken) => queryToken.test(token))
				);
			}
			return true;
		});

	const tools = [...(pageIndex == 0 && !username ? configTools : []), ...communityTools];

	const numTotalItems =
		(await Database.getInstance().getCollections().tools.countDocuments(filter)) +
		toolFromConfigs.length;

	return {
		tools: JSON.parse(JSON.stringify(tools)) as CommunityToolDB[],
		numTotalItems,
		numItemsPerPage: NUM_PER_PAGE,
		query,
		sort,
		showUnfeatured,
	};
};

</src/routes/tools/+page.server.ts>

<src/routes/tools/new/+page.server.ts>
import { env } from "$env/dynamic/private";
import { authCondition, requiresUser } from "$lib/server/auth.js";
import { collections } from "$lib/server/database.js";
import { editableToolSchema } from "$lib/server/tools/index.js";
import { usageLimits } from "$lib/server/usageLimits.js";
import { generateSearchTokens } from "$lib/utils/searchTokens.js";
import { error, fail } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

export const actions = {
	default: async ({ request, locals }) => {
		if (env.COMMUNITY_TOOLS !== "true") {
			error(403, "Community tools are not enabled");
		}

		const body = await request.formData();
		const toolStringified = body.get("tool");

		if (!toolStringified || typeof toolStringified !== "string") {
			error(400, "Tool is required");
		}

		const parse = editableToolSchema.safeParse(JSON.parse(toolStringified));

		if (!parse.success) {
			// Loop through the errors array and create a custom errors array
			const errors = parse.error.errors.map((error) => {
				return {
					field: error.path[0],
					message: error.message,
				};
			});

			return fail(400, { error: true, errors });
		}

		// can only create tools when logged in, IF login is setup
		if (!locals.user && requiresUser) {
			const errors = [{ field: "description", message: "Must be logged in. Unauthorized" }];
			return fail(400, { error: true, errors });
		}

		const toolCounts = await collections.tools.countDocuments({ createdById: locals.user?._id });

		if (usageLimits?.tools && toolCounts > usageLimits.tools) {
			const errors = [
				{
					field: "description",
					message: "You have reached the maximum number of tools. Delete some to continue.",
				},
			];
			return fail(400, { error: true, errors });
		}

		if (!locals.user || !authCondition(locals)) {
			error(401, "Unauthorized");
		}

		const { insertedId } = await collections.tools.insertOne({
			...parse.data,
			type: "community" as const,
			_id: new ObjectId(),
			createdById: locals.user?._id,
			createdByName: locals.user?.username,
			createdAt: new Date(),
			updatedAt: new Date(),
			last24HoursUseCount: 0,
			useCount: 0,
			featured: locals.user?.isAdmin ?? false, // admin tools are featured by default
			searchTokens: generateSearchTokens(parse.data.displayName),
		});

		return { toolId: insertedId.toString() };
	},
};

</src/routes/tools/new/+page.server.ts>

<src/routes/assistants/+page.server.ts>
import { base } from "$app/paths";
import { env } from "$env/dynamic/private";
import { Database, collections } from "$lib/server/database.js";
import { SortKey, type Assistant } from "$lib/types/Assistant";
import type { User } from "$lib/types/User";
import { generateQueryTokens } from "$lib/utils/searchTokens.js";
import { error, redirect } from "@sveltejs/kit";
import type { Filter } from "mongodb";

const NUM_PER_PAGE = 24;

export const load = async ({ url, locals }) => {
	if (!env.ENABLE_ASSISTANTS) {
		redirect(302, `${base}/`);
	}

	const modelId = url.searchParams.get("modelId");
	const pageIndex = parseInt(url.searchParams.get("p") ?? "0");
	const username = url.searchParams.get("user");
	const query = url.searchParams.get("q")?.trim() ?? null;
	const sort = url.searchParams.get("sort")?.trim() ?? SortKey.TRENDING;
	const createdByCurrentUser = locals.user?.username && locals.user.username === username;
	const showUnfeatured = url.searchParams.get("showUnfeatured") === "true";

	let user: Pick<User, "_id"> | null = null;
	if (username) {
		user = await collections.users.findOne<Pick<User, "_id">>(
			{ username },
			{ projection: { _id: 1 } }
		);
		if (!user) {
			error(404, `User "${username}" doesn't exist`);
		}
	}

	// if there is no user, we show community assistants, so only show featured assistants
	const shouldBeFeatured =
		env.REQUIRE_FEATURED_ASSISTANTS === "true" && !user && !(locals.user?.isAdmin && showUnfeatured)
			? { featured: true }
			: {};

	// if the user queried is not the current user, only show "public" assistants that have been shared before
	const shouldHaveBeenShared =
		env.REQUIRE_FEATURED_ASSISTANTS === "true" && !createdByCurrentUser && !locals.user?.isAdmin
			? { userCount: { $gt: 1 } }
			: {};

	// fetch the top assistants sorted by user count from biggest to smallest. filter by model too if modelId is provided or query if query is provided
	const filter: Filter<Assistant> = {
		...(modelId && { modelId }),
		...(user && { createdById: user._id }),
		...(query && { searchTokens: { $all: generateQueryTokens(query) } }),
		...shouldBeFeatured,
		...shouldHaveBeenShared,
	};
	const assistants = await Database.getInstance()
		.getCollections()
		.assistants.find(filter)
		.sort({
			...(sort === SortKey.TRENDING && { last24HoursCount: -1 }),
			userCount: -1,
			_id: 1,
		})
		.skip(NUM_PER_PAGE * pageIndex)
		.limit(NUM_PER_PAGE)
		.toArray();

	const numTotalItems = await Database.getInstance()
		.getCollections()
		.assistants.countDocuments(filter);

	return {
		assistants: JSON.parse(JSON.stringify(assistants)) as Array<Assistant>,
		selectedModel: modelId ?? "",
		numTotalItems,
		numItemsPerPage: NUM_PER_PAGE,
		query,
		sort,
		showUnfeatured,
	};
};

</src/routes/assistants/+page.server.ts>

<src/routes/healthcheck/+server.ts>
export async function GET() {
	return new Response("OK", { status: 200 });
}

</src/routes/healthcheck/+server.ts>

<src/routes/admin/export/+server.ts>
import { env } from "$env/dynamic/private";
import { collections } from "$lib/server/database";
import type { Message } from "$lib/types/Message";
import { error } from "@sveltejs/kit";
import { pathToFileURL } from "node:url";
import { unlink } from "node:fs/promises";
import { uploadFile } from "@huggingface/hub";
import parquet from "parquetjs";
import { z } from "zod";
import { logger } from "$lib/server/logger.js";

// Triger like this:
// curl -X POST "http://localhost:5173/chat/admin/export" -H "Authorization: Bearer <ADMIN_API_SECRET>" -H "Content-Type: application/json" -d '{"model": "OpenAssistant/oasst-sft-6-llama-30b-xor"}'

export async function POST({ request }) {
	if (!env.PARQUET_EXPORT_DATASET || !env.PARQUET_EXPORT_HF_TOKEN) {
		error(500, "Parquet export is not configured.");
	}

	const { model } = z
		.object({
			model: z.string(),
		})
		.parse(await request.json());

	const schema = new parquet.ParquetSchema({
		title: { type: "UTF8" },
		created_at: { type: "TIMESTAMP_MILLIS" },
		updated_at: { type: "TIMESTAMP_MILLIS" },
		messages: {
			repeated: true,
			fields: {
				from: { type: "UTF8" },
				content: { type: "UTF8" },
				score: { type: "INT_8", optional: true },
			},
		},
	});

	const fileName = `/tmp/conversations-${new Date().toJSON().slice(0, 10)}-${Date.now()}.parquet`;

	const writer = await parquet.ParquetWriter.openFile(schema, fileName);

	let count = 0;
	logger.info("Exporting conversations for model", model);

	for await (const conversation of collections.settings.aggregate<{
		title: string;
		created_at: Date;
		updated_at: Date;
		messages: Message[];
	}>([
		{
			$match: {
				shareConversationsWithModelAuthors: true,
				sessionId: { $exists: true },
				userId: { $exists: false },
			},
		},
		{
			$lookup: {
				from: "conversations",
				localField: "sessionId",
				foreignField: "sessionId",
				as: "conversations",
				pipeline: [{ $match: { model, userId: { $exists: false } } }],
			},
		},
		{ $unwind: "$conversations" },
		{
			$project: {
				title: "$conversations.title",
				created_at: "$conversations.createdAt",
				updated_at: "$conversations.updatedAt",
				messages: "$conversations.messages",
			},
		},
	])) {
		await writer.appendRow({
			title: conversation.title,
			created_at: conversation.created_at,
			updated_at: conversation.updated_at,
			messages: conversation.messages.map((message: Message) => ({
				from: message.from,
				content: message.content,
				...(message.score ? { score: message.score } : undefined),
			})),
		});
		++count;

		if (count % 1_000 === 0) {
			logger.info("Exported", count, "conversations");
		}
	}

	logger.info("exporting convos with userId");

	for await (const conversation of collections.settings.aggregate<{
		title: string;
		created_at: Date;
		updated_at: Date;
		messages: Message[];
	}>([
		{ $match: { shareConversationsWithModelAuthors: true, userId: { $exists: true } } },
		{
			$lookup: {
				from: "conversations",
				localField: "userId",
				foreignField: "userId",
				as: "conversations",
				pipeline: [{ $match: { model } }],
			},
		},
		{ $unwind: "$conversations" },
		{
			$project: {
				title: "$conversations.title",
				created_at: "$conversations.createdAt",
				updated_at: "$conversations.updatedAt",
				messages: "$conversations.messages",
			},
		},
	])) {
		await writer.appendRow({
			title: conversation.title,
			created_at: conversation.created_at,
			updated_at: conversation.updated_at,
			messages: conversation.messages.map((message: Message) => ({
				from: message.from,
				content: message.content,
				...(message.score ? { score: message.score } : undefined),
			})),
		});
		++count;

		if (count % 1_000 === 0) {
			logger.info("Exported", count, "conversations");
		}
	}

	await writer.close();

	logger.info("Uploading", fileName, "to Hugging Face Hub");

	await uploadFile({
		file: pathToFileURL(fileName) as URL,
		credentials: { accessToken: env.PARQUET_EXPORT_HF_TOKEN },
		repo: {
			type: "dataset",
			name: env.PARQUET_EXPORT_DATASET,
		},
	});

	logger.info("Upload done");

	await unlink(fileName);

	return new Response();
}

</src/routes/admin/export/+server.ts>

<src/routes/admin/stats/compute/+server.ts>
import { json } from "@sveltejs/kit";
import { logger } from "$lib/server/logger";
import { computeAllStats } from "$lib/jobs/refresh-conversation-stats";

// Triger like this:
// curl -X POST "http://localhost:5173/chat/admin/stats/compute" -H "Authorization: Bearer <ADMIN_API_SECRET>"

export async function POST() {
	computeAllStats().catch((e) => logger.error(e));
	return json(
		{
			message: "Stats job started",
		},
		{ status: 202 }
	);
}

</src/routes/admin/stats/compute/+server.ts>

<src/routes/r/[id]/+page.ts>
import { redirect, type LoadEvent } from "@sveltejs/kit";

export const load = async ({ params, url }: LoadEvent) => {
	const leafId = url.searchParams.get("leafId");

	throw redirect(302, "../conversation/" + params.id + `?leafId=${leafId}`);
};

</src/routes/r/[id]/+page.ts>

<src/routes/logout/+page.server.ts>
import { dev } from "$app/environment";
import { base } from "$app/paths";
import { env } from "$env/dynamic/private";
import { collections } from "$lib/server/database";
import { redirect } from "@sveltejs/kit";

export const actions = {
	async default({ cookies, locals }) {
		await collections.sessions.deleteOne({ sessionId: locals.sessionId });

		cookies.delete(env.COOKIE_NAME, {
			path: "/",
			// So that it works inside the space's iframe
			sameSite: dev || env.ALLOW_INSECURE_COOKIES === "true" ? "lax" : "none",
			secure: !dev && !(env.ALLOW_INSECURE_COOKIES === "true"),
			httpOnly: true,
		});
		redirect(303, `${base}/`);
	},
};

</src/routes/logout/+page.server.ts>

<src/routes/+layout.server.ts>
import type { LayoutServerLoad } from "./$types";
import { collections } from "$lib/server/database";
import type { Conversation } from "$lib/types/Conversation";
import { UrlDependency } from "$lib/types/UrlDependency";
import { defaultModel, models, oldModels, validateModel } from "$lib/server/models";
import { authCondition, requiresUser } from "$lib/server/auth";
import { DEFAULT_SETTINGS } from "$lib/types/Settings";
import { env } from "$env/dynamic/private";
import { ObjectId } from "mongodb";
import type { ConvSidebar } from "$lib/types/ConvSidebar";
import { toolFromConfigs } from "$lib/server/tools";
import { MetricsServer } from "$lib/server/metrics";
import type { ToolFront, ToolInputFile } from "$lib/types/Tool";

export const load: LayoutServerLoad = async ({ locals, depends, request }) => {
	depends(UrlDependency.ConversationList);

	const settings = await collections.settings.findOne(authCondition(locals));

	// If the active model in settings is not valid, set it to the default model. This can happen if model was disabled.
	if (
		settings &&
		!validateModel(models).safeParse(settings?.activeModel).success &&
		!settings.assistants?.map((el) => el.toString())?.includes(settings?.activeModel)
	) {
		settings.activeModel = defaultModel.id;
		await collections.settings.updateOne(authCondition(locals), {
			$set: { activeModel: defaultModel.id },
		});
	}

	// if the model is unlisted, set the active model to the default model
	if (
		settings?.activeModel &&
		models.find((m) => m.id === settings?.activeModel)?.unlisted === true
	) {
		settings.activeModel = defaultModel.id;
		await collections.settings.updateOne(authCondition(locals), {
			$set: { activeModel: defaultModel.id },
		});
	}

	const enableAssistants = env.ENABLE_ASSISTANTS === "true";

	const assistantActive = !models.map(({ id }) => id).includes(settings?.activeModel ?? "");

	const assistant = assistantActive
		? JSON.parse(
				JSON.stringify(
					await collections.assistants.findOne({
						_id: new ObjectId(settings?.activeModel),
					})
				)
		  )
		: null;

	const conversations = await collections.conversations
		.find(authCondition(locals))
		.sort({ updatedAt: -1 })
		.project<
			Pick<Conversation, "title" | "model" | "_id" | "updatedAt" | "createdAt" | "assistantId">
		>({
			title: 1,
			model: 1,
			_id: 1,
			updatedAt: 1,
			createdAt: 1,
			assistantId: 1,
		})
		.limit(300)
		.toArray();

	const userAssistants = settings?.assistants?.map((assistantId) => assistantId.toString()) ?? [];
	const userAssistantsSet = new Set(userAssistants);

	const assistantIds = [
		...userAssistants.map((el) => new ObjectId(el)),
		...(conversations.map((conv) => conv.assistantId).filter((el) => !!el) as ObjectId[]),
	];

	const assistants = await collections.assistants.find({ _id: { $in: assistantIds } }).toArray();

	const messagesBeforeLogin = env.MESSAGES_BEFORE_LOGIN ? parseInt(env.MESSAGES_BEFORE_LOGIN) : 0;

	let loginRequired = false;

	if (requiresUser && !locals.user && messagesBeforeLogin) {
		if (conversations.length > messagesBeforeLogin) {
			loginRequired = true;
		} else {
			// get the number of messages where `from === "assistant"` across all conversations.
			const totalMessages =
				(
					await collections.conversations
						.aggregate([
							{ $match: { ...authCondition(locals), "messages.from": "assistant" } },
							{ $project: { messages: 1 } },
							{ $limit: messagesBeforeLogin + 1 },
							{ $unwind: "$messages" },
							{ $match: { "messages.from": "assistant" } },
							{ $count: "messages" },
						])
						.toArray()
				)[0]?.messages ?? 0;

			loginRequired = totalMessages > messagesBeforeLogin;
		}
	}

	const toolUseDuration = (await MetricsServer.getMetrics().tool.toolUseDuration.get()).values;

	const configToolIds = toolFromConfigs.map((el) => el._id.toString());

	const activeCommunityToolIds = (settings?.tools ?? []).filter(
		(key) => !configToolIds.includes(key)
	);

	const communityTools = await collections.tools
		.find({ _id: { $in: activeCommunityToolIds.map((el) => new ObjectId(el)) } })
		.toArray()
		.then((tools) =>
			tools.map((tool) => ({
				...tool,
				isHidden: false,
				isOnByDefault: true,
				isLocked: true,
			}))
		);

	return {
		conversations: conversations.map((conv) => {
			if (settings?.hideEmojiOnSidebar) {
				conv.title = conv.title.replace(/\p{Emoji}/gu, "");
			}

			// remove invalid unicode and trim whitespaces
			conv.title = conv.title.replace(/\uFFFD/gu, "").trimStart();

			return {
				id: conv._id.toString(),
				title: conv.title,
				model: conv.model ?? defaultModel,
				updatedAt: conv.updatedAt,
				assistantId: conv.assistantId?.toString(),
				avatarHash:
					conv.assistantId &&
					assistants.find((a) => a._id.toString() === conv.assistantId?.toString())?.avatar,
			};
		}) satisfies ConvSidebar[],
		settings: {
			searchEnabled: !!(
				env.SERPAPI_KEY ||
				env.SERPER_API_KEY ||
				env.SERPSTACK_API_KEY ||
				env.SEARCHAPI_KEY ||
				env.YDC_API_KEY ||
				env.USE_LOCAL_WEBSEARCH ||
				env.SEARXNG_QUERY_URL ||
				env.BING_SUBSCRIPTION_KEY
			),
			ethicsModalAccepted: !!settings?.ethicsModalAcceptedAt,
			ethicsModalAcceptedAt: settings?.ethicsModalAcceptedAt ?? null,
			activeModel: settings?.activeModel ?? DEFAULT_SETTINGS.activeModel,
			hideEmojiOnSidebar: settings?.hideEmojiOnSidebar ?? false,
			shareConversationsWithModelAuthors:
				settings?.shareConversationsWithModelAuthors ??
				DEFAULT_SETTINGS.shareConversationsWithModelAuthors,
			customPrompts: settings?.customPrompts ?? {},
			assistants: userAssistants,
			tools:
				settings?.tools ??
				toolFromConfigs
					.filter((el) => !el.isHidden && el.isOnByDefault)
					.map((el) => el._id.toString()),
			disableStream: settings?.disableStream ?? DEFAULT_SETTINGS.disableStream,
		},
		models: models.map((model) => ({
			id: model.id,
			name: model.name,
			websiteUrl: model.websiteUrl,
			modelUrl: model.modelUrl,
			tokenizer: model.tokenizer,
			datasetName: model.datasetName,
			datasetUrl: model.datasetUrl,
			displayName: model.displayName,
			description: model.description,
			logoUrl: model.logoUrl,
			promptExamples: model.promptExamples,
			parameters: model.parameters,
			preprompt: model.preprompt,
			multimodal: model.multimodal,
			tools:
				model.tools &&
				// disable tools on huggingchat android app
				!request.headers.get("user-agent")?.includes("co.huggingface.chat_ui_android"),
			unlisted: model.unlisted,
		})),
		oldModels,
		tools: [...toolFromConfigs, ...communityTools]
			.filter((tool) => !tool?.isHidden)
			.map(
				(tool) =>
					({
						_id: tool._id.toString(),
						type: tool.type,
						displayName: tool.displayName,
						name: tool.name,
						description: tool.description,
						mimeTypes: (tool.inputs ?? [])
							.filter((input): input is ToolInputFile => input.type === "file")
							.map((input) => (input as ToolInputFile).mimeTypes)
							.flat(),
						isOnByDefault: tool.isOnByDefault ?? true,
						isLocked: tool.isLocked ?? true,
						timeToUseMS:
							toolUseDuration.find(
								(el) => el.labels.tool === tool._id.toString() && el.labels.quantile === 0.9
							)?.value ?? 15_000,
					} satisfies ToolFront)
			),
		communityToolCount: await collections.tools.countDocuments({ type: "community" }),
		assistants: assistants
			.filter((el) => userAssistantsSet.has(el._id.toString()))
			.map((el) => ({
				...el,
				_id: el._id.toString(),
				createdById: undefined,
				createdByMe:
					el.createdById.toString() === (locals.user?._id ?? locals.sessionId).toString(),
			})),
		user: locals.user && {
			id: locals.user._id.toString(),
			username: locals.user.username,
			avatarUrl: locals.user.avatarUrl,
			email: locals.user.email,
			logoutDisabled: locals.user.logoutDisabled,
			isAdmin: locals.user.isAdmin ?? false,
			isEarlyAccess: locals.user.isEarlyAccess ?? false,
		},
		assistant,
		enableAssistants,
		enableAssistantsRAG: env.ENABLE_ASSISTANTS_RAG === "true",
		enableCommunityTools: env.COMMUNITY_TOOLS === "true",
		loginRequired,
		loginEnabled: requiresUser,
		guestMode: requiresUser && messagesBeforeLogin > 0,
	};
};

</src/routes/+layout.server.ts>

<src/routes/conversations/+page.server.ts>
import { base } from "$app/paths";
import { authCondition } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { redirect } from "@sveltejs/kit";

export const actions = {
	async delete({ locals }) {
		// double check we have a user to delete conversations for
		if (locals.user?._id || locals.sessionId) {
			await collections.conversations.deleteMany({
				...authCondition(locals),
			});
		}

		redirect(303, `${base}/`);
	},
};

</src/routes/conversations/+page.server.ts>

<src/routes/api/assistant/[id]/+server.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";

export async function GET({ params }) {
	const id = params.id;
	const assistantId = new ObjectId(id);

	const assistant = await collections.assistants.findOne({
		_id: assistantId,
	});

	if (assistant) {
		return Response.json(assistant);
	} else {
		return Response.json({ message: "Assistant not found" }, { status: 404 });
	}
}

</src/routes/api/assistant/[id]/+server.ts>

<src/routes/api/tools/[toolId]/+server.ts>
import { env } from "$env/dynamic/private";
import { collections } from "$lib/server/database.js";
import { toolFromConfigs } from "$lib/server/tools/index.js";
import type { CommunityToolDB } from "$lib/types/Tool.js";
import { ObjectId } from "mongodb";

export async function GET({ params }) {
	if (env.COMMUNITY_TOOLS !== "true") {
		return new Response("Community tools are not enabled", { status: 403 });
	}

	const toolId = params.toolId;

	try {
		const configTool = toolFromConfigs.find((el) => el._id.toString() === toolId);
		if (configTool) {
			return Response.json({
				_id: toolId,
				displayName: configTool.displayName,
				color: configTool.color,
				icon: configTool.icon,
				createdByName: undefined,
			});
		} else {
			// try community tools
			const tool = await collections.tools
				.findOne<CommunityToolDB>({ _id: new ObjectId(toolId) })
				.then((tool) =>
					tool
						? {
								_id: tool._id.toString(),
								displayName: tool.displayName,
								color: tool.color,
								icon: tool.icon,
								createdByName: tool.createdByName,
								featured: tool.featured,
						  }
						: undefined
				);

			if (!tool || !tool.featured) {
				return new Response(`Tool "${toolId}" not found`, { status: 404 });
			}

			return Response.json(tool);
		}
	} catch (e) {
		return new Response(`Tool "${toolId}" not found`, { status: 404 });
	}
}

</src/routes/api/tools/[toolId]/+server.ts>

<src/routes/api/tools/search/+server.ts>
import { env } from "$env/dynamic/private";
import { collections } from "$lib/server/database.js";
import { toolFromConfigs } from "$lib/server/tools/index.js";
import type { BaseTool, CommunityToolDB } from "$lib/types/Tool.js";
import { generateQueryTokens, generateSearchTokens } from "$lib/utils/searchTokens.js";
import type { Filter } from "mongodb";

export async function GET({ url }) {
	if (env.COMMUNITY_TOOLS !== "true") {
		return new Response("Community tools are not enabled", { status: 403 });
	}

	const query = url.searchParams.get("q")?.trim() ?? null;
	const queryTokens = !!query && generateQueryTokens(query);

	const filter: Filter<CommunityToolDB> = {
		...(queryTokens && { searchTokens: { $all: queryTokens } }),
		featured: true,
	};

	const matchingCommunityTools = await collections.tools
		.find(filter)
		.project<Pick<BaseTool, "_id" | "displayName" | "color" | "icon">>({
			_id: 1,
			displayName: 1,
			color: 1,
			icon: 1,
			createdByName: 1,
		})
		.sort({ useCount: -1 })
		.limit(5)
		.toArray();

	const matchingConfigTools = toolFromConfigs
		.filter((tool) => !tool?.isHidden)
		.filter((tool) => tool.name !== "websearch") // filter out websearch tool from config tools since its added separately
		.filter((tool) => {
			if (queryTokens) {
				return generateSearchTokens(tool.displayName).some((token) =>
					queryTokens.some((queryToken) => queryToken.test(token))
				);
			}
			return true;
		})
		.map((tool) => ({
			_id: tool._id,
			displayName: tool.displayName,
			color: tool.color,
			icon: tool.icon,
			createdByName: undefined,
		}));

	const tools = [...matchingConfigTools, ...matchingCommunityTools] satisfies Array<
		Pick<BaseTool, "_id" | "displayName" | "color" | "icon"> & { createdByName?: string }
	>;

	return Response.json(tools.map((tool) => ({ ...tool, _id: tool._id.toString() })).slice(0, 5));
}

</src/routes/api/tools/search/+server.ts>

<src/routes/api/assistants/+server.ts>
import { collections } from "$lib/server/database";
import type { Assistant } from "$lib/types/Assistant";
import type { User } from "$lib/types/User";
import { generateQueryTokens } from "$lib/utils/searchTokens.js";
import type { Filter } from "mongodb";
import { env } from "$env/dynamic/private";

const NUM_PER_PAGE = 24;

export async function GET({ url, locals }) {
	const modelId = url.searchParams.get("modelId");
	const pageIndex = parseInt(url.searchParams.get("p") ?? "0");
	const username = url.searchParams.get("user");
	const query = url.searchParams.get("q")?.trim() ?? null;
	const createdByCurrentUser = locals.user?.username && locals.user.username === username;

	let user: Pick<User, "_id"> | null = null;
	if (username) {
		user = await collections.users.findOne<Pick<User, "_id">>(
			{ username },
			{ projection: { _id: 1 } }
		);
		if (!user) {
			return Response.json({ message: `User "${username}" doesn't exist` }, { status: 404 });
		}
	}

	// if there is no user, we show community assistants, so only show featured assistants
	const shouldBeFeatured =
		env.REQUIRE_FEATURED_ASSISTANTS === "true" && !user ? { featured: true } : {};

	// if the user queried is not the current user, only show "public" assistants that have been shared before
	const shouldHaveBeenShared =
		env.REQUIRE_FEATURED_ASSISTANTS === "true" && !createdByCurrentUser
			? { userCount: { $gt: 1 } }
			: {};

	// fetch the top assistants sorted by user count from biggest to smallest, filter out all assistants with only 1 users. filter by model too if modelId is provided
	const filter: Filter<Assistant> = {
		...(modelId && { modelId }),
		...(user && { createdById: user._id }),
		...(query && { searchTokens: { $all: generateQueryTokens(query) } }),
		...shouldBeFeatured,
		...shouldHaveBeenShared,
	};
	const assistants = await collections.assistants
		.find(filter)
		.skip(NUM_PER_PAGE * pageIndex)
		.sort({ userCount: -1 })
		.limit(NUM_PER_PAGE)
		.toArray();

	const numTotalItems = await collections.assistants.countDocuments(filter);

	return Response.json({
		assistants,
		selectedModel: modelId ?? "",
		numTotalItems,
		numItemsPerPage: NUM_PER_PAGE,
		query,
	});
}

</src/routes/api/assistants/+server.ts>

<src/routes/api/user/assistants/+server.ts>
import { authCondition } from "$lib/server/auth";
import type { Conversation } from "$lib/types/Conversation";
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";

export async function GET({ locals }) {
	if (locals.user?._id || locals.sessionId) {
		const settings = await collections.settings.findOne(authCondition(locals));

		const conversations = await collections.conversations
			.find(authCondition(locals))
			.sort({ updatedAt: -1 })
			.project<Pick<Conversation, "assistantId">>({
				assistantId: 1,
			})
			.limit(300)
			.toArray();

		const userAssistants = settings?.assistants?.map((assistantId) => assistantId.toString()) ?? [];
		const userAssistantsSet = new Set(userAssistants);

		const assistantIds = [
			...userAssistants.map((el) => new ObjectId(el)),
			...(conversations.map((conv) => conv.assistantId).filter((el) => !!el) as ObjectId[]),
		];

		const assistants = await collections.assistants.find({ _id: { $in: assistantIds } }).toArray();

		const res = assistants
			.filter((el) => userAssistantsSet.has(el._id.toString()))
			.map((el) => ({
				...el,
				_id: el._id.toString(),
				createdById: undefined,
				createdByMe:
					el.createdById.toString() === (locals.user?._id ?? locals.sessionId).toString(),
			}));

		return Response.json(res);
	} else {
		return Response.json({ message: "Must have session cookie" }, { status: 401 });
	}
}

</src/routes/api/user/assistants/+server.ts>

<src/routes/api/user/+server.ts>
export async function GET({ locals }) {
	if (locals.user) {
		const res = {
			id: locals.user._id,
			username: locals.user.username,
			name: locals.user.name,
			email: locals.user.email,
			avatarUrl: locals.user.avatarUrl,
			hfUserId: locals.user.hfUserId,
		};

		return Response.json(res);
	}
	return Response.json({ message: "Must be signed in" }, { status: 401 });
}

</src/routes/api/user/+server.ts>

<src/routes/api/models/+server.ts>
import { models } from "$lib/server/models";

export async function GET() {
	const res = models
		.filter((m) => m.unlisted == false)
		.map((model) => ({
			id: model.id,
			name: model.name,
			websiteUrl: model.websiteUrl ?? "https://huggingface.co",
			modelUrl: model.modelUrl ?? "https://huggingface.co",
			tokenizer: model.tokenizer,
			datasetName: model.datasetName,
			datasetUrl: model.datasetUrl,
			displayName: model.displayName,
			description: model.description ?? "",
			logoUrl: model.logoUrl,
			promptExamples: model.promptExamples ?? [],
			preprompt: model.preprompt ?? "",
			multimodal: model.multimodal ?? false,
			unlisted: model.unlisted ?? false,
			tools: model.tools ?? false,
		}));
	return Response.json(res);
}

</src/routes/api/models/+server.ts>

<src/routes/api/conversations/+server.ts>
import { collections } from "$lib/server/database";
import { models } from "$lib/server/models";
import { authCondition } from "$lib/server/auth";
import type { Conversation } from "$lib/types/Conversation";

const NUM_PER_PAGE = 300;

export async function GET({ locals, url }) {
	const p = parseInt(url.searchParams.get("p") ?? "0");

	if (locals.user?._id || locals.sessionId) {
		const convs = await collections.conversations
			.find({
				...authCondition(locals),
			})
			.project<Pick<Conversation, "_id" | "title" | "updatedAt" | "model" | "assistantId">>({
				title: 1,
				updatedAt: 1,
				model: 1,
				assistantId: 1,
			})
			.sort({ updatedAt: -1 })
			.skip(p * NUM_PER_PAGE)
			.limit(NUM_PER_PAGE)
			.toArray();

		const res = convs.map((conv) => ({
			id: conv._id,
			title: conv.title,
			updatedAt: conv.updatedAt,
			modelId: conv.model,
			assistantId: conv.assistantId,
			modelTools: models.find((m) => m.id == conv.model)?.tools ?? false,
		}));

		return Response.json(res);
	} else {
		return Response.json({ message: "Must have session cookie" }, { status: 401 });
	}
}

</src/routes/api/conversations/+server.ts>

<src/routes/api/spaces-config/+server.ts>
import { env } from "$env/dynamic/private";
import { Client } from "@gradio/client";

export async function GET({ url }) {
	if (env.COMMUNITY_TOOLS !== "true") {
		return new Response("Community tools are not enabled", { status: 403 });
	}

	const space = url.searchParams.get("space");

	if (!space) {
		return new Response("Missing space", { status: 400 });
	}
	// Extract namespace from space URL or use as-is if it's already in namespace format
	let namespace = null;
	if (space.startsWith("https://huggingface.co/spaces/")) {
		namespace = space.split("/").slice(-2).join("/");
	} else if (space.match(/^[^/]+\/[^/]+$/)) {
		namespace = space;
	}

	if (!namespace) {
		return new Response(
			"Invalid space name. Specify a namespace or a full URL on huggingface.co.",
			{ status: 400 }
		);
	}

	try {
		const api = await (await Client.connect(namespace)).view_api();
		return new Response(JSON.stringify(api), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	} catch (e) {
		return new Response("Error fetching space API. Is the name correct?", {
			status: 400,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}
}

</src/routes/api/spaces-config/+server.ts>

<src/routes/api/conversation/[id]/+server.ts>
import { collections } from "$lib/server/database";
import { authCondition } from "$lib/server/auth";
import { z } from "zod";
import { models } from "$lib/server/models";
import { ObjectId } from "mongodb";

export async function GET({ locals, params }) {
	const id = z.string().parse(params.id);
	const convId = new ObjectId(id);

	if (locals.user?._id || locals.sessionId) {
		const conv = await collections.conversations.findOne({
			_id: convId,
			...authCondition(locals),
		});

		if (conv) {
			const res = {
				id: conv._id,
				title: conv.title,
				updatedAt: conv.updatedAt,
				modelId: conv.model,
				assistantId: conv.assistantId,
				messages: conv.messages.map((message) => ({
					content: message.content,
					from: message.from,
					id: message.id,
					createdAt: message.createdAt,
					updatedAt: message.updatedAt,
					webSearch: message.webSearch,
					files: message.files,
					updates: message.updates,
				})),
				modelTools: models.find((m) => m.id == conv.model)?.tools ?? false,
			};
			return Response.json(res);
		} else {
			return Response.json({ message: "Conversation not found" }, { status: 404 });
		}
	} else {
		return Response.json({ message: "Must have session cookie" }, { status: 401 });
	}
}

</src/routes/api/conversation/[id]/+server.ts>

<src/routes/login/+page.server.ts>
import { redirect } from "@sveltejs/kit";
import { getOIDCAuthorizationUrl } from "$lib/server/auth";
import { base } from "$app/paths";
import { env } from "$env/dynamic/private";

export const actions = {
	async default({ url, locals, request }) {
		const referer = request.headers.get("referer");
		let redirectURI = `${(referer ? new URL(referer) : url).origin}${base}/login/callback`;

		// TODO: Handle errors if provider is not responding

		if (url.searchParams.has("callback")) {
			const callback = url.searchParams.get("callback") || redirectURI;
			if (env.ALTERNATIVE_REDIRECT_URLS.includes(callback)) {
				redirectURI = callback;
			}
		}

		const authorizationUrl = await getOIDCAuthorizationUrl(
			{ redirectURI },
			{ sessionId: locals.sessionId }
		);

		redirect(303, authorizationUrl);
	},
};

</src/routes/login/+page.server.ts>

<src/routes/login/callback/+page.server.ts>
import { redirect, error } from "@sveltejs/kit";
import { getOIDCUserData, validateAndParseCsrfToken } from "$lib/server/auth";
import { z } from "zod";
import { base } from "$app/paths";
import { updateUser } from "./updateUser";
import { env } from "$env/dynamic/private";
import JSON5 from "json5";

const allowedUserEmails = z
	.array(z.string().email())
	.optional()
	.default([])
	.parse(JSON5.parse(env.ALLOWED_USER_EMAILS));

export async function load({ url, locals, cookies, request, getClientAddress }) {
	const { error: errorName, error_description: errorDescription } = z
		.object({
			error: z.string().optional(),
			error_description: z.string().optional(),
		})
		.parse(Object.fromEntries(url.searchParams.entries()));

	if (errorName) {
		error(400, errorName + (errorDescription ? ": " + errorDescription : ""));
	}

	const { code, state, iss } = z
		.object({
			code: z.string(),
			state: z.string(),
			iss: z.string().optional(),
		})
		.parse(Object.fromEntries(url.searchParams.entries()));

	const csrfToken = Buffer.from(state, "base64").toString("utf-8");

	const validatedToken = await validateAndParseCsrfToken(csrfToken, locals.sessionId);

	if (!validatedToken) {
		error(403, "Invalid or expired CSRF token");
	}

	const { userData } = await getOIDCUserData(
		{ redirectURI: validatedToken.redirectUrl },
		code,
		iss
	);

	// Filter by allowed user emails
	if (allowedUserEmails.length > 0) {
		if (!userData.email) {
			error(403, "User not allowed: email not returned");
		}
		const emailVerified = userData.email_verified ?? true;
		if (!emailVerified) {
			error(403, "User not allowed: email not verified");
		}
		if (!allowedUserEmails.includes(userData.email)) {
			error(403, "User not allowed");
		}
	}

	await updateUser({
		userData,
		locals,
		cookies,
		userAgent: request.headers.get("user-agent") ?? undefined,
		ip: getClientAddress(),
	});

	redirect(302, `${base}/`);
}

</src/routes/login/callback/+page.server.ts>

<src/routes/login/callback/updateUser.spec.ts>
import { assert, it, describe, afterEach, vi, expect } from "vitest";
import type { Cookies } from "@sveltejs/kit";
import { collections } from "$lib/server/database";
import { updateUser } from "./updateUser";
import { ObjectId } from "mongodb";
import { DEFAULT_SETTINGS } from "$lib/types/Settings";
import { defaultModel } from "$lib/server/models";
import { findUser } from "$lib/server/auth";
import { defaultEmbeddingModel } from "$lib/server/embeddingModels";

const userData = {
	preferred_username: "new-username",
	name: "name",
	picture: "https://example.com/avatar.png",
	sub: "1234567890",
};
Object.freeze(userData);

const locals = {
	userId: "1234567890",
	sessionId: "1234567890",
};

// @ts-expect-error SvelteKit cookies dumb mock
const cookiesMock: Cookies = {
	set: vi.fn(),
};

const insertRandomUser = async () => {
	const res = await collections.users.insertOne({
		_id: new ObjectId(),
		createdAt: new Date(),
		updatedAt: new Date(),
		username: "base-username",
		name: userData.name,
		avatarUrl: userData.picture,
		hfUserId: userData.sub,
	});

	return res.insertedId;
};

const insertRandomConversations = async (count: number) => {
	const res = await collections.conversations.insertMany(
		new Array(count).fill(0).map(() => ({
			_id: new ObjectId(),
			title: "random title",
			messages: [],
			model: defaultModel.id,
			embeddingModel: defaultEmbeddingModel.id,
			createdAt: new Date(),
			updatedAt: new Date(),
			sessionId: locals.sessionId,
		}))
	);

	return res.insertedIds;
};

describe("login", () => {
	it("should update user if existing", async () => {
		await insertRandomUser();

		await updateUser({ userData, locals, cookies: cookiesMock });

		const existingUser = await collections.users.findOne({ hfUserId: userData.sub });

		assert.equal(existingUser?.name, userData.name);

		expect(cookiesMock.set).toBeCalledTimes(1);
	});

	it("should migrate pre-existing conversations for new user", async () => {
		const insertedId = await insertRandomUser();

		await insertRandomConversations(2);

		await updateUser({ userData, locals, cookies: cookiesMock });

		const conversationCount = await collections.conversations.countDocuments({
			userId: insertedId,
			sessionId: { $exists: false },
		});

		assert.equal(conversationCount, 2);

		await collections.conversations.deleteMany({ userId: insertedId });
	});

	it("should create default settings for new user", async () => {
		await updateUser({ userData, locals, cookies: cookiesMock });

		const user = await findUser(locals.sessionId);

		assert.exists(user);

		const settings = await collections.settings.findOne({ userId: user?._id });

		expect(settings).toMatchObject({
			userId: user?._id,
			updatedAt: expect.any(Date),
			createdAt: expect.any(Date),
			ethicsModalAcceptedAt: expect.any(Date),
			...DEFAULT_SETTINGS,
		});

		await collections.settings.deleteOne({ userId: user?._id });
	});

	it("should migrate pre-existing settings for pre-existing user", async () => {
		const { insertedId } = await collections.settings.insertOne({
			sessionId: locals.sessionId,
			ethicsModalAcceptedAt: new Date(),
			updatedAt: new Date(),
			createdAt: new Date(),
			...DEFAULT_SETTINGS,
			shareConversationsWithModelAuthors: false,
		});

		await updateUser({ userData, locals, cookies: cookiesMock });

		const settings = await collections.settings.findOne({
			_id: insertedId,
			sessionId: { $exists: false },
		});

		assert.exists(settings);

		const user = await collections.users.findOne({ hfUserId: userData.sub });

		expect(settings).toMatchObject({
			userId: user?._id,
			updatedAt: expect.any(Date),
			createdAt: expect.any(Date),
			ethicsModalAcceptedAt: expect.any(Date),
			...DEFAULT_SETTINGS,
			shareConversationsWithModelAuthors: false,
		});

		await collections.settings.deleteOne({ userId: user?._id });
	});
});

afterEach(async () => {
	await collections.users.deleteMany({ hfUserId: userData.sub });
	await collections.sessions.deleteMany({});

	locals.userId = "1234567890";
	locals.sessionId = "1234567890";
	vi.clearAllMocks();
});

</src/routes/login/callback/updateUser.spec.ts>

<src/routes/login/callback/updateUser.ts>
import { refreshSessionCookie } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { DEFAULT_SETTINGS } from "$lib/types/Settings";
import { z } from "zod";
import type { UserinfoResponse } from "openid-client";
import { error, type Cookies } from "@sveltejs/kit";
import crypto from "crypto";
import { sha256 } from "$lib/utils/sha256";
import { addWeeks } from "date-fns";
import { OIDConfig } from "$lib/server/auth";
import { env } from "$env/dynamic/private";
import { logger } from "$lib/server/logger";

export async function updateUser(params: {
	userData: UserinfoResponse;
	locals: App.Locals;
	cookies: Cookies;
	userAgent?: string;
	ip?: string;
}) {
	const { userData, locals, cookies, userAgent, ip } = params;

	// Microsoft Entra v1 tokens do not provide preferred_username, instead the username is provided in the upn
	// claim. See https://learn.microsoft.com/en-us/entra/identity-platform/access-token-claims-reference
	if (!userData.preferred_username && userData.upn) {
		userData.preferred_username = userData.upn as string;
	}

	const {
		preferred_username: username,
		name,
		email,
		picture: avatarUrl,
		sub: hfUserId,
		orgs,
	} = z
		.object({
			preferred_username: z.string().optional(),
			name: z.string(),
			picture: z.string().optional(),
			sub: z.string(),
			email: z.string().email().optional(),
			orgs: z
				.array(
					z.object({
						sub: z.string(),
						name: z.string(),
						picture: z.string(),
						preferred_username: z.string(),
						isEnterprise: z.boolean(),
					})
				)
				.optional(),
		})
		.setKey(OIDConfig.NAME_CLAIM, z.string())
		.refine((data) => data.preferred_username || data.email, {
			message: "Either preferred_username or email must be provided by the provider.",
		})
		.transform((data) => ({
			...data,
			name: data[OIDConfig.NAME_CLAIM],
		}))
		.parse(userData) as {
		preferred_username?: string;
		email?: string;
		picture?: string;
		sub: string;
		name: string;
		orgs?: Array<{
			sub: string;
			name: string;
			picture: string;
			preferred_username: string;
			isEnterprise: boolean;
		}>;
	} & Record<string, string>;

	// Dynamically access user data based on NAME_CLAIM from environment
	// This approach allows us to adapt to different OIDC providers flexibly.

	logger.info(
		{
			login_username: username,
			login_name: name,
			login_email: email,
			login_orgs: orgs?.map((el) => el.sub),
		},
		"user login"
	);
	// if using huggingface as auth provider, check orgs for earl access and amin rights
	const isAdmin = (env.HF_ORG_ADMIN && orgs?.some((org) => org.sub === env.HF_ORG_ADMIN)) || false;
	const isEarlyAccess =
		(env.HF_ORG_EARLY_ACCESS && orgs?.some((org) => org.sub === env.HF_ORG_EARLY_ACCESS)) || false;

	logger.debug(
		{
			isAdmin,
			isEarlyAccess,
			hfUserId,
		},
		`Updating user ${hfUserId}`
	);

	// check if user already exists
	const existingUser = await collections.users.findOne({ hfUserId });
	let userId = existingUser?._id;

	// update session cookie on login
	const previousSessionId = locals.sessionId;
	const secretSessionId = crypto.randomUUID();
	const sessionId = await sha256(secretSessionId);

	if (await collections.sessions.findOne({ sessionId })) {
		error(500, "Session ID collision");
	}

	locals.sessionId = sessionId;

	if (existingUser) {
		// update existing user if any
		await collections.users.updateOne(
			{ _id: existingUser._id },
			{ $set: { username, name, avatarUrl, isAdmin, isEarlyAccess } }
		);

		// remove previous session if it exists and add new one
		await collections.sessions.deleteOne({ sessionId: previousSessionId });
		await collections.sessions.insertOne({
			_id: new ObjectId(),
			sessionId: locals.sessionId,
			userId: existingUser._id,
			createdAt: new Date(),
			updatedAt: new Date(),
			userAgent,
			ip,
			expiresAt: addWeeks(new Date(), 2),
		});
	} else {
		// user doesn't exist yet, create a new one
		const { insertedId } = await collections.users.insertOne({
			_id: new ObjectId(),
			createdAt: new Date(),
			updatedAt: new Date(),
			username,
			name,
			email,
			avatarUrl,
			hfUserId,
			isAdmin,
			isEarlyAccess,
		});

		userId = insertedId;

		await collections.sessions.insertOne({
			_id: new ObjectId(),
			sessionId: locals.sessionId,
			userId,
			createdAt: new Date(),
			updatedAt: new Date(),
			userAgent,
			ip,
			expiresAt: addWeeks(new Date(), 2),
		});

		// move pre-existing settings to new user
		const { matchedCount } = await collections.settings.updateOne(
			{ sessionId: previousSessionId },
			{
				$set: { userId, updatedAt: new Date() },
				$unset: { sessionId: "" },
			}
		);

		if (!matchedCount) {
			// if no settings found for user, create default settings
			await collections.settings.insertOne({
				userId,
				ethicsModalAcceptedAt: new Date(),
				updatedAt: new Date(),
				createdAt: new Date(),
				...DEFAULT_SETTINGS,
			});
		}
	}

	// refresh session cookie
	refreshSessionCookie(cookies, secretSessionId);

	// migrate pre-existing conversations
	await collections.conversations.updateMany(
		{ sessionId: previousSessionId },
		{
			$set: { userId },
			$unset: { sessionId: "" },
		}
	);
}

</src/routes/login/callback/updateUser.ts>

<src/routes/conversation/+server.ts>
import type { RequestHandler } from "./$types";
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { error, redirect } from "@sveltejs/kit";
import { base } from "$app/paths";
import { z } from "zod";
import type { Message } from "$lib/types/Message";
import { models, validateModel } from "$lib/server/models";
import { defaultEmbeddingModel } from "$lib/server/embeddingModels";
import { v4 } from "uuid";
import { authCondition } from "$lib/server/auth";
import { usageLimits } from "$lib/server/usageLimits";
import { MetricsServer } from "$lib/server/metrics";

export const POST: RequestHandler = async ({ locals, request }) => {
	const body = await request.text();

	let title = "";

	const parsedBody = z
		.object({
			fromShare: z.string().optional(),
			model: validateModel(models),
			assistantId: z.string().optional(),
			preprompt: z.string().optional(),
		})
		.safeParse(JSON.parse(body));

	if (!parsedBody.success) {
		error(400, "Invalid request");
	}
	const values = parsedBody.data;

	const convCount = await collections.conversations.countDocuments(authCondition(locals));

	if (usageLimits?.conversations && convCount > usageLimits?.conversations) {
		error(429, "You have reached the maximum number of conversations. Delete some to continue.");
	}

	const model = models.find((m) => (m.id || m.name) === values.model);

	if (!model) {
		error(400, "Invalid model");
	}

	let messages: Message[] = [
		{
			id: v4(),
			from: "system",
			content: values.preprompt ?? "",
			createdAt: new Date(),
			updatedAt: new Date(),
			children: [],
			ancestors: [],
		},
	];

	let rootMessageId: Message["id"] = messages[0].id;
	let embeddingModel: string;

	if (values.fromShare) {
		const conversation = await collections.sharedConversations.findOne({
			_id: values.fromShare,
		});

		if (!conversation) {
			error(404, "Conversation not found");
		}

		title = conversation.title;
		messages = conversation.messages;
		rootMessageId = conversation.rootMessageId ?? rootMessageId;
		values.model = conversation.model;
		values.preprompt = conversation.preprompt;
		values.assistantId = conversation.assistantId?.toString();
		embeddingModel = conversation.embeddingModel;
	}

	embeddingModel ??= model.embeddingModel ?? defaultEmbeddingModel.name;

	if (model.unlisted) {
		error(400, "Can't start a conversation with an unlisted model");
	}

	// get preprompt from assistant if it exists
	const assistant = await collections.assistants.findOne({
		_id: new ObjectId(values.assistantId),
	});

	if (assistant) {
		values.preprompt = assistant.preprompt;
	} else {
		values.preprompt ??= model?.preprompt ?? "";
	}

	if (messages && messages.length > 0 && messages[0].from === "system") {
		messages[0].content = values.preprompt;
	}

	const res = await collections.conversations.insertOne({
		_id: new ObjectId(),
		title: title || "New Chat",
		rootMessageId,
		messages,
		model: values.model,
		preprompt: values.preprompt,
		assistantId: values.assistantId ? new ObjectId(values.assistantId) : undefined,
		createdAt: new Date(),
		updatedAt: new Date(),
		userAgent: request.headers.get("User-Agent") ?? undefined,
		embeddingModel,
		...(locals.user ? { userId: locals.user._id } : { sessionId: locals.sessionId }),
		...(values.fromShare ? { meta: { fromShareId: values.fromShare } } : {}),
	});

	MetricsServer.getMetrics().model.conversationsTotal.inc({ model: values.model });

	return new Response(
		JSON.stringify({
			conversationId: res.insertedId.toString(),
		}),
		{ headers: { "Content-Type": "application/json" } }
	);
};

export const GET: RequestHandler = async () => {
	redirect(302, `${base}/`);
};

</src/routes/conversation/+server.ts>

<src/routes/conversation/[id]/+page.server.ts>
import { collections } from "$lib/server/database";
import { ObjectId } from "mongodb";
import { error } from "@sveltejs/kit";
import { authCondition } from "$lib/server/auth";
import { UrlDependency } from "$lib/types/UrlDependency";
import { convertLegacyConversation } from "$lib/utils/tree/convertLegacyConversation.js";

export const load = async ({ params, depends, locals }) => {
	let conversation;
	let shared = false;

	// if the conver
	if (params.id.length === 7) {
		// shared link of length 7
		conversation = await collections.sharedConversations.findOne({
			_id: params.id,
		});
		shared = true;

		if (!conversation) {
			error(404, "Conversation not found");
		}
	} else {
		// todo: add validation on params.id
		conversation = await collections.conversations.findOne({
			_id: new ObjectId(params.id),
			...authCondition(locals),
		});

		depends(UrlDependency.Conversation);

		if (!conversation) {
			const conversationExists =
				(await collections.conversations.countDocuments({
					_id: new ObjectId(params.id),
				})) !== 0;

			if (conversationExists) {
				error(
					403,
					"You don't have access to this conversation. If someone gave you this link, ask them to use the 'share' feature instead."
				);
			}

			error(404, "Conversation not found.");
		}
	}

	const convertedConv = { ...conversation, ...convertLegacyConversation(conversation) };

	return {
		messages: convertedConv.messages,
		title: convertedConv.title,
		model: convertedConv.model,
		preprompt: convertedConv.preprompt,
		rootMessageId: convertedConv.rootMessageId,
		assistant: convertedConv.assistantId
			? JSON.parse(
					JSON.stringify(
						await collections.assistants.findOne({
							_id: new ObjectId(convertedConv.assistantId),
						})
					)
			  )
			: null,
		shared,
	};
};

export const actions = {
	deleteBranch: async ({ request, locals, params }) => {
		const data = await request.formData();
		const messageId = data.get("messageId");

		if (!messageId || typeof messageId !== "string") {
			error(400, "Invalid message id");
		}

		const conversation = await collections.conversations.findOne({
			...authCondition(locals),
			_id: new ObjectId(params.id),
		});

		if (!conversation) {
			error(404, "Conversation not found");
		}

		const filteredMessages = conversation.messages
			.filter(
				(message) =>
					// not the message AND the message is not in ancestors
					!(message.id === messageId) && message.ancestors && !message.ancestors.includes(messageId)
			)
			.map((message) => {
				// remove the message from children if it's there
				if (message.children && message.children.includes(messageId)) {
					message.children = message.children.filter((child) => child !== messageId);
				}
				return message;
			});

		await collections.conversations.updateOne(
			{ _id: conversation._id, ...authCondition(locals) },
			{ $set: { messages: filteredMessages } }
		);

		return { from: "deleteBranch", ok: true };
	},
};

</src/routes/conversation/[id]/+page.server.ts>

<src/routes/conversation/[id]/stop-generating/+server.ts>
import { authCondition } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { error } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

/**
 * Ideally, we'd be able to detect the client-side abort, see https://github.com/huggingface/chat-ui/pull/88#issuecomment-1523173850
 */
export async function POST({ params, locals }) {
	const conversationId = new ObjectId(params.id);

	const conversation = await collections.conversations.findOne({
		_id: conversationId,
		...authCondition(locals),
	});

	if (!conversation) {
		error(404, "Conversation not found");
	}

	await collections.abortedGenerations.updateOne(
		{ conversationId },
		{ $set: { updatedAt: new Date() }, $setOnInsert: { createdAt: new Date() } },
		{ upsert: true }
	);

	return new Response();
}

</src/routes/conversation/[id]/stop-generating/+server.ts>

<src/routes/conversation/[id]/+server.ts>
import { env } from "$env/dynamic/private";
import { startOfHour } from "date-fns";
import { authCondition, requiresUser } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { models, validModelIdSchema } from "$lib/server/models";
import { ERROR_MESSAGES } from "$lib/stores/errors";
import type { Message } from "$lib/types/Message";
import { error } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import { z } from "zod";
import {
	MessageUpdateStatus,
	MessageUpdateType,
	type MessageUpdate,
} from "$lib/types/MessageUpdate";
import { uploadFile } from "$lib/server/files/uploadFile";
import { convertLegacyConversation } from "$lib/utils/tree/convertLegacyConversation";
import { isMessageId } from "$lib/utils/tree/isMessageId";
import { buildSubtree } from "$lib/utils/tree/buildSubtree.js";
import { addChildren } from "$lib/utils/tree/addChildren.js";
import { addSibling } from "$lib/utils/tree/addSibling.js";
import { usageLimits } from "$lib/server/usageLimits";
import { MetricsServer } from "$lib/server/metrics";
import { textGeneration } from "$lib/server/textGeneration";
import type { TextGenerationContext } from "$lib/server/textGeneration/types";
import { logger } from "$lib/server/logger.js";

export async function POST({ request, locals, params, getClientAddress }) {
	const id = z.string().parse(params.id);
	const convId = new ObjectId(id);
	const promptedAt = new Date();

	const userId = locals.user?._id ?? locals.sessionId;

	// check user
	if (!userId) {
		error(401, "Unauthorized");
	}

	// check if the user has access to the conversation
	const convBeforeCheck = await collections.conversations.findOne({
		_id: convId,
		...authCondition(locals),
	});

	if (convBeforeCheck && !convBeforeCheck.rootMessageId) {
		const res = await collections.conversations.updateOne(
			{
				_id: convId,
			},
			{
				$set: {
					...convBeforeCheck,
					...convertLegacyConversation(convBeforeCheck),
				},
			}
		);

		if (!res.acknowledged) {
			error(500, "Failed to convert conversation");
		}
	}

	const conv = await collections.conversations.findOne({
		_id: convId,
		...authCondition(locals),
	});

	if (!conv) {
		error(404, "Conversation not found");
	}

	// register the event for ratelimiting
	await collections.messageEvents.insertOne({
		userId,
		createdAt: new Date(),
		ip: getClientAddress(),
	});

	const messagesBeforeLogin = env.MESSAGES_BEFORE_LOGIN ? parseInt(env.MESSAGES_BEFORE_LOGIN) : 0;

	// guest mode check
	if (!locals.user?._id && requiresUser && messagesBeforeLogin) {
		const totalMessages =
			(
				await collections.conversations
					.aggregate([
						{ $match: { ...authCondition(locals), "messages.from": "assistant" } },
						{ $project: { messages: 1 } },
						{ $limit: messagesBeforeLogin + 1 },
						{ $unwind: "$messages" },
						{ $match: { "messages.from": "assistant" } },
						{ $count: "messages" },
					])
					.toArray()
			)[0]?.messages ?? 0;

		if (totalMessages > messagesBeforeLogin) {
			error(429, "Exceeded number of messages before login");
		}
	}

	if (usageLimits?.messagesPerMinute) {
		// check if the user is rate limited
		const nEvents = Math.max(
			await collections.messageEvents.countDocuments({
				userId,
				createdAt: { $gte: new Date(Date.now() - 60_000) },
			}),
			await collections.messageEvents.countDocuments({
				ip: getClientAddress(),
				createdAt: { $gte: new Date(Date.now() - 60_000) },
			})
		);
		if (nEvents > usageLimits.messagesPerMinute) {
			error(429, ERROR_MESSAGES.rateLimited);
		}
	}

	if (usageLimits?.messages && conv.messages.length > usageLimits.messages) {
		error(
			429,
			`This conversation has more than ${usageLimits.messages} messages. Start a new one to continue`
		);
	}

	// fetch the model
	const model = models.find((m) => m.id === conv.model);

	if (!model) {
		error(410, "Model not available anymore");
	}

	// finally parse the content of the request
	const form = await request.formData();

	const json = form.get("data");

	if (!json || typeof json !== "string") {
		error(400, "Invalid request");
	}

	const {
		inputs: newPrompt,
		id: messageId,
		is_retry: isRetry,
		is_continue: isContinue,
		web_search: webSearch,
		tools: toolsPreferences,
	} = z
		.object({
			id: z.string().uuid().refine(isMessageId).optional(), // parent message id to append to for a normal message, or the message id for a retry/continue
			inputs: z.optional(
				z
					.string()
					.min(1)
					.transform((s) => s.replace(/\r\n/g, "\n"))
			),
			is_retry: z.optional(z.boolean()),
			is_continue: z.optional(z.boolean()),
			web_search: z.optional(z.boolean()),
			tools: z
				.array(z.string())
				.optional()
				.transform((tools) =>
					// disable tools on huggingchat android app
					request.headers.get("user-agent")?.includes("co.huggingface.chat_ui_android") ? [] : tools
				),

			files: z.optional(
				z.array(
					z.object({
						type: z.literal("base64").or(z.literal("hash")),
						name: z.string(),
						value: z.string(),
						mime: z.string(),
					})
				)
			),
		})
		.parse(JSON.parse(json));

	const inputFiles = await Promise.all(
		form
			.getAll("files")
			.filter((entry): entry is File => entry instanceof File && entry.size > 0)
			.map(async (file) => {
				const [type, ...name] = file.name.split(";");

				return {
					type: z.literal("base64").or(z.literal("hash")).parse(type),
					value: await file.text(),
					mime: file.type,
					name: name.join(";"),
				};
			})
	);

	if (usageLimits?.messageLength && (newPrompt?.length ?? 0) > usageLimits.messageLength) {
		error(400, "Message too long.");
	}

	// each file is either:
	// base64 string requiring upload to the server
	// hash pointing to an existing file
	const hashFiles = inputFiles?.filter((file) => file.type === "hash") ?? [];
	const b64Files =
		inputFiles
			?.filter((file) => file.type !== "hash")
			.map((file) => {
				const blob = Buffer.from(file.value, "base64");
				return new File([blob], file.name, { type: file.mime });
			}) ?? [];

	// check sizes
	// todo: make configurable
	if (b64Files.some((file) => file.size > 10 * 1024 * 1024)) {
		error(413, "File too large, should be <10MB");
	}

	const uploadedFiles = await Promise.all(b64Files.map((file) => uploadFile(file, conv))).then(
		(files) => [...files, ...hashFiles]
	);

	// we will append tokens to the content of this message
	let messageToWriteToId: Message["id"] | undefined = undefined;
	// used for building the prompt, subtree of the conversation that goes from the latest message to the root
	let messagesForPrompt: Message[] = [];

	if (isContinue && messageId) {
		// if it's the last message and we continue then we build the prompt up to the last message
		// we will strip the end tokens afterwards when the prompt is built
		if ((conv.messages.find((msg) => msg.id === messageId)?.children?.length ?? 0) > 0) {
			error(400, "Can only continue the last message");
		}
		messageToWriteToId = messageId;
		messagesForPrompt = buildSubtree(conv, messageId);
	} else if (isRetry && messageId) {
		// two cases, if we're retrying a user message with a newPrompt set,
		// it means we're editing a user message
		// if we're retrying on an assistant message, newPrompt cannot be set
		// it means we're retrying the last assistant message for a new answer

		const messageToRetry = conv.messages.find((message) => message.id === messageId);

		if (!messageToRetry) {
			error(404, "Message not found");
		}

		if (messageToRetry.from === "user" && newPrompt) {
			// add a sibling to this message from the user, with the alternative prompt
			// add a children to that sibling, where we can write to
			const newUserMessageId = addSibling(
				conv,
				{
					from: "user",
					content: newPrompt,
					files: uploadedFiles,
					createdAt: new Date(),
					updatedAt: new Date(),
				},
				messageId
			);
			messageToWriteToId = addChildren(
				conv,
				{
					from: "assistant",
					content: "",
					createdAt: new Date(),
					updatedAt: new Date(),
				},
				newUserMessageId
			);
			messagesForPrompt = buildSubtree(conv, newUserMessageId);
		} else if (messageToRetry.from === "assistant") {
			// we're retrying an assistant message, to generate a new answer
			// just add a sibling to the assistant answer where we can write to
			messageToWriteToId = addSibling(
				conv,
				{ from: "assistant", content: "", createdAt: new Date(), updatedAt: new Date() },
				messageId
			);
			messagesForPrompt = buildSubtree(conv, messageId);
			messagesForPrompt.pop(); // don't need the latest assistant message in the prompt since we're retrying it
		}
	} else {
		// just a normal linear conversation, so we add the user message
		// and the blank assistant message back to back
		const newUserMessageId = addChildren(
			conv,
			{
				from: "user",
				content: newPrompt ?? "",
				files: uploadedFiles,
				createdAt: new Date(),
				updatedAt: new Date(),
			},
			messageId
		);

		messageToWriteToId = addChildren(
			conv,
			{
				from: "assistant",
				content: "",
				createdAt: new Date(),
				updatedAt: new Date(),
			},
			newUserMessageId
		);
		// build the prompt from the user message
		messagesForPrompt = buildSubtree(conv, newUserMessageId);
	}

	const messageToWriteTo = conv.messages.find((message) => message.id === messageToWriteToId);
	if (!messageToWriteTo) {
		error(500, "Failed to create message");
	}
	if (messagesForPrompt.length === 0) {
		error(500, "Failed to create prompt");
	}

	// update the conversation with the new messages
	await collections.conversations.updateOne(
		{ _id: convId },
		{ $set: { messages: conv.messages, title: conv.title, updatedAt: new Date() } }
	);

	let doneStreaming = false;

	let lastTokenTimestamp: undefined | Date = undefined;

	// we now build the stream
	const stream = new ReadableStream({
		async start(controller) {
			messageToWriteTo.updates ??= [];
			async function update(event: MessageUpdate) {
				if (!messageToWriteTo || !conv) {
					throw Error("No message or conversation to write events to");
				}

				// Add token to content or skip if empty
				if (event.type === MessageUpdateType.Stream) {
					if (event.token === "") return;
					messageToWriteTo.content += event.token;

					// add to token total
					MetricsServer.getMetrics().model.tokenCountTotal.inc({ model: model?.id });

					// if this is the first token, add to time to first token
					if (!lastTokenTimestamp) {
						MetricsServer.getMetrics().model.timeToFirstToken.observe(
							{ model: model?.id },
							Date.now() - promptedAt.getTime()
						);
						lastTokenTimestamp = new Date();
					}

					// add to time per token
					MetricsServer.getMetrics().model.timePerOutputToken.observe(
						{ model: model?.id },
						Date.now() - (lastTokenTimestamp ?? promptedAt).getTime()
					);
					lastTokenTimestamp = new Date();
				}

				// Set the title
				else if (event.type === MessageUpdateType.Title) {
					conv.title = event.title;
					await collections.conversations.updateOne(
						{ _id: convId },
						{ $set: { title: conv?.title, updatedAt: new Date() } }
					);
				}

				// Set the final text and the interrupted flag
				else if (event.type === MessageUpdateType.FinalAnswer) {
					messageToWriteTo.interrupted = event.interrupted;
					messageToWriteTo.content = initialMessageContent + event.text;

					// add to latency
					MetricsServer.getMetrics().model.latency.observe(
						{ model: model?.id },
						Date.now() - promptedAt.getTime()
					);
				}

				// Add file
				else if (event.type === MessageUpdateType.File) {
					messageToWriteTo.files = [
						...(messageToWriteTo.files ?? []),
						{ type: "hash", name: event.name, value: event.sha, mime: event.mime },
					];
				}

				// Append to the persistent message updates if it's not a stream update
				if (event.type !== "stream") {
					messageToWriteTo?.updates?.push(event);
				}

				// Avoid remote keylogging attack executed by watching packet lengths
				// by padding the text with null chars to a fixed length
				// https://cdn.arstechnica.net/wp-content/uploads/2024/03/LLM-Side-Channel.pdf
				if (event.type === MessageUpdateType.Stream) {
					event = { ...event, token: event.token.padEnd(16, "\0") };
				}

				// Send the update to the client
				controller.enqueue(JSON.stringify(event) + "\n");

				// Send 4096 of spaces to make sure the browser doesn't blocking buffer that holding the response
				if (event.type === MessageUpdateType.FinalAnswer) {
					controller.enqueue(" ".repeat(4096));
				}
			}

			await collections.conversations.updateOne(
				{ _id: convId },
				{ $set: { title: conv.title, updatedAt: new Date() } }
			);
			messageToWriteTo.updatedAt = new Date();

			let hasError = false;
			const initialMessageContent = messageToWriteTo.content;

			try {
				const ctx: TextGenerationContext = {
					model,
					endpoint: await model.getEndpoint(),
					conv,
					messages: messagesForPrompt,
					assistant: undefined,
					isContinue: isContinue ?? false,
					webSearch: webSearch ?? false,
					toolsPreference: toolsPreferences ?? [],
					promptedAt,
					ip: getClientAddress(),
					username: locals.user?.username,
				};
				// run the text generation and send updates to the client
				for await (const event of textGeneration(ctx)) await update(event);
			} catch (e) {
				hasError = true;
				await update({
					type: MessageUpdateType.Status,
					status: MessageUpdateStatus.Error,
					message: (e as Error).message,
				});
				logger.error(e);
			} finally {
				// check if no output was generated
				if (!hasError && messageToWriteTo.content === initialMessageContent) {
					await update({
						type: MessageUpdateType.Status,
						status: MessageUpdateStatus.Error,
						message: "No output was generated. Something went wrong.",
					});
				}
			}

			await collections.conversations.updateOne(
				{ _id: convId },
				{ $set: { messages: conv.messages, title: conv?.title, updatedAt: new Date() } }
			);

			// used to detect if cancel() is called bc of interrupt or just because the connection closes
			doneStreaming = true;

			controller.close();
		},
		async cancel() {
			if (doneStreaming) return;
			await collections.conversations.updateOne(
				{ _id: convId },
				{ $set: { messages: conv.messages, title: conv.title, updatedAt: new Date() } }
			);
		},
	});

	if (conv.assistantId) {
		await collections.assistantStats.updateOne(
			{ assistantId: conv.assistantId, "date.at": startOfHour(new Date()), "date.span": "hour" },
			{ $inc: { count: 1 } },
			{ upsert: true }
		);
	}

	const metrics = MetricsServer.getMetrics();
	metrics.model.messagesTotal.inc({ model: model?.id });
	// Todo: maybe we should wait for the message to be saved before ending the response - in case of errors
	return new Response(stream, {
		headers: {
			"Content-Type": "text/event-stream",
		},
	});
}

export async function DELETE({ locals, params }) {
	const convId = new ObjectId(params.id);

	const conv = await collections.conversations.findOne({
		_id: convId,
		...authCondition(locals),
	});

	if (!conv) {
		error(404, "Conversation not found");
	}

	await collections.conversations.deleteOne({ _id: conv._id });

	return new Response();
}

export async function PATCH({ request, locals, params }) {
	const values = z
		.object({
			title: z.string().trim().min(1).max(100).optional(),
			model: validModelIdSchema.optional(),
		})
		.parse(await request.json());

	const convId = new ObjectId(params.id);

	const conv = await collections.conversations.findOne({
		_id: convId,
		...authCondition(locals),
	});

	if (!conv) {
		error(404, "Conversation not found");
	}

	await collections.conversations.updateOne(
		{
			_id: convId,
		},
		{
			$set: values,
		}
	);

	return new Response();
}

</src/routes/conversation/[id]/+server.ts>

<src/routes/conversation/[id]/output/[sha256]/+server.ts>
import { authCondition } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { error } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import { z } from "zod";
import type { RequestHandler } from "./$types";
import { downloadFile } from "$lib/server/files/downloadFile";

export const GET: RequestHandler = async ({ locals, params }) => {
	const sha256 = z.string().parse(params.sha256);

	const userId = locals.user?._id ?? locals.sessionId;

	// check user
	if (!userId) {
		error(401, "Unauthorized");
	}

	if (params.id.length !== 7) {
		const convId = new ObjectId(z.string().parse(params.id));

		// check if the user has access to the conversation
		const conv = await collections.conversations.findOne({
			_id: convId,
			...authCondition(locals),
		});

		if (!conv) {
			error(404, "Conversation not found");
		}
	} else {
		// look for the conversation in shared conversations
		const conv = await collections.sharedConversations.findOne({
			_id: params.id,
		});

		if (!conv) {
			error(404, "Conversation not found");
		}
	}

	const { value, mime } = await downloadFile(sha256, params.id);

	const b64Value = Buffer.from(value, "base64");
	return new Response(b64Value, {
		headers: {
			"Content-Type": mime ?? "application/octet-stream",
			"Content-Security-Policy":
				"default-src 'none'; script-src 'none'; style-src 'none'; sandbox;",
			"Content-Length": b64Value.length.toString(),
			"Accept-Range": "bytes",
		},
	});
};

</src/routes/conversation/[id]/output/[sha256]/+server.ts>

<src/routes/conversation/[id]/message/[messageId]/vote/+server.ts>
import { authCondition } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { error } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import { z } from "zod";

export async function POST({ params, request, locals }) {
	const { score } = z
		.object({
			score: z.number().int().min(-1).max(1),
		})
		.parse(await request.json());
	const conversationId = new ObjectId(params.id);
	const messageId = params.messageId;

	const document = await collections.conversations.updateOne(
		{
			_id: conversationId,
			...authCondition(locals),
			"messages.id": messageId,
		},
		{
			...(score !== 0
				? {
						$set: {
							"messages.$.score": score,
						},
				  }
				: { $unset: { "messages.$.score": "" } }),
		}
	);

	if (!document.matchedCount) {
		error(404, "Message not found");
	}

	return new Response();
}

</src/routes/conversation/[id]/message/[messageId]/vote/+server.ts>

<src/routes/conversation/[id]/message/[messageId]/prompt/+server.ts>
import { buildPrompt } from "$lib/buildPrompt";
import { authCondition } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import { models } from "$lib/server/models";
import { buildSubtree } from "$lib/utils/tree/buildSubtree";
import { isMessageId } from "$lib/utils/tree/isMessageId";
import { error } from "@sveltejs/kit";
import { ObjectId } from "mongodb";

export async function GET({ params, locals }) {
	const conv =
		params.id.length === 7
			? await collections.sharedConversations.findOne({
					_id: params.id,
			  })
			: await collections.conversations.findOne({
					_id: new ObjectId(params.id),
					...authCondition(locals),
			  });

	if (conv === null) {
		error(404, "Conversation not found");
	}

	const messageId = params.messageId;

	const messageIndex = conv.messages.findIndex((msg) => msg.id === messageId);

	if (!isMessageId(messageId) || messageIndex === -1) {
		error(404, "Message not found");
	}

	const model = models.find((m) => m.id === conv.model);

	if (!model) {
		error(404, "Conversation model not found");
	}

	const messagesUpTo = buildSubtree(conv, messageId);

	const prompt = await buildPrompt({
		preprompt: conv.preprompt,
		messages: messagesUpTo,
		model,
	});

	const userMessage = conv.messages[messageIndex];
	const assistantMessage = conv.messages[messageIndex + 1];

	return new Response(
		JSON.stringify(
			{
				note: "This is a preview of the prompt that will be sent to the model when retrying the message. It may differ from what was sent in the past if the parameters have been updated since",
				prompt,
				model: model.name,
				parameters: {
					...model.parameters,
					return_full_text: false,
				},
				userMessage,
				...(assistantMessage ? { assistantMessage } : {}),
			},
			null,
			2
		),
		{ headers: { "Content-Type": "application/json" } }
	);
}

</src/routes/conversation/[id]/message/[messageId]/prompt/+server.ts>

<src/routes/conversation/[id]/share/+server.ts>
import { authCondition } from "$lib/server/auth";
import { collections } from "$lib/server/database";
import type { SharedConversation } from "$lib/types/SharedConversation";
import { getShareUrl } from "$lib/utils/getShareUrl";
import { hashConv } from "$lib/utils/hashConv";
import { error } from "@sveltejs/kit";
import { ObjectId } from "mongodb";
import { nanoid } from "nanoid";

export async function POST({ params, url, locals }) {
	const conversation = await collections.conversations.findOne({
		_id: new ObjectId(params.id),
		...authCondition(locals),
	});

	if (!conversation) {
		error(404, "Conversation not found");
	}

	const hash = await hashConv(conversation);

	const existingShare = await collections.sharedConversations.findOne({ hash });

	if (existingShare) {
		return new Response(
			JSON.stringify({
				url: getShareUrl(url, existingShare._id),
			}),
			{ headers: { "Content-Type": "application/json" } }
		);
	}

	const shared: SharedConversation = {
		_id: nanoid(7),
		hash,
		createdAt: new Date(),
		updatedAt: new Date(),
		rootMessageId: conversation.rootMessageId,
		messages: conversation.messages,
		title: conversation.title,
		model: conversation.model,
		embeddingModel: conversation.embeddingModel,
		preprompt: conversation.preprompt,
		assistantId: conversation.assistantId,
	};

	await collections.sharedConversations.insertOne(shared);

	// copy files from `${conversation._id}-` to `${shared._id}-`
	const files = await collections.bucket
		.find({ filename: { $regex: `${conversation._id}-` } })
		.toArray();

	await Promise.all(
		files.map(async (file) => {
			const newFilename = file.filename.replace(`${conversation._id}-`, `${shared._id}-`);
			// copy files from `${conversation._id}-` to `${shared._id}-` by downloading and reuploaidng
			const downloadStream = collections.bucket.openDownloadStream(file._id);
			const uploadStream = collections.bucket.openUploadStream(newFilename, {
				metadata: { ...file.metadata, conversation: shared._id.toString() },
			});
			downloadStream.pipe(uploadStream);
		})
	);

	return new Response(
		JSON.stringify({
			url: getShareUrl(url, shared._id),
		}),
		{ headers: { "Content-Type": "application/json" } }
	);
}

</src/routes/conversation/[id]/share/+server.ts>

